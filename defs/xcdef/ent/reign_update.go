// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/adapter"
	"github.com/auroraride/adapter/defs/batdef"
	"github.com/auroraride/adapter/defs/xcdef/ent/battery"
	"github.com/auroraride/adapter/defs/xcdef/ent/predicate"
	"github.com/auroraride/adapter/defs/xcdef/ent/reign"
)

// ReignUpdate is the builder for updating Reign entities.
type ReignUpdate struct {
	config
	hooks     []Hook
	mutation  *ReignMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ReignUpdate builder.
func (ru *ReignUpdate) Where(ps ...predicate.Reign) *ReignUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetAction sets the "action" field.
func (ru *ReignUpdate) SetAction(ba batdef.ReignAction) *ReignUpdate {
	ru.mutation.SetAction(ba)
	return ru
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (ru *ReignUpdate) SetNillableAction(ba *batdef.ReignAction) *ReignUpdate {
	if ba != nil {
		ru.SetAction(*ba)
	}
	return ru
}

// SetSn sets the "sn" field.
func (ru *ReignUpdate) SetSn(s string) *ReignUpdate {
	ru.mutation.SetSn(s)
	return ru
}

// SetBatteryID sets the "battery_id" field.
func (ru *ReignUpdate) SetBatteryID(i int) *ReignUpdate {
	ru.mutation.SetBatteryID(i)
	return ru
}

// SetSerial sets the "serial" field.
func (ru *ReignUpdate) SetSerial(s string) *ReignUpdate {
	ru.mutation.SetSerial(s)
	return ru
}

// SetOrdinal sets the "ordinal" field.
func (ru *ReignUpdate) SetOrdinal(i int) *ReignUpdate {
	ru.mutation.ResetOrdinal()
	ru.mutation.SetOrdinal(i)
	return ru
}

// AddOrdinal adds i to the "ordinal" field.
func (ru *ReignUpdate) AddOrdinal(i int) *ReignUpdate {
	ru.mutation.AddOrdinal(i)
	return ru
}

// SetCabinetName sets the "cabinet_name" field.
func (ru *ReignUpdate) SetCabinetName(s string) *ReignUpdate {
	ru.mutation.SetCabinetName(s)
	return ru
}

// SetNillableCabinetName sets the "cabinet_name" field if the given value is not nil.
func (ru *ReignUpdate) SetNillableCabinetName(s *string) *ReignUpdate {
	if s != nil {
		ru.SetCabinetName(*s)
	}
	return ru
}

// ClearCabinetName clears the value of the "cabinet_name" field.
func (ru *ReignUpdate) ClearCabinetName() *ReignUpdate {
	ru.mutation.ClearCabinetName()
	return ru
}

// SetRemark sets the "remark" field.
func (ru *ReignUpdate) SetRemark(s string) *ReignUpdate {
	ru.mutation.SetRemark(s)
	return ru
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ru *ReignUpdate) SetNillableRemark(s *string) *ReignUpdate {
	if s != nil {
		ru.SetRemark(*s)
	}
	return ru
}

// ClearRemark clears the value of the "remark" field.
func (ru *ReignUpdate) ClearRemark() *ReignUpdate {
	ru.mutation.ClearRemark()
	return ru
}

// SetGeom sets the "geom" field.
func (ru *ReignUpdate) SetGeom(a *adapter.Geometry) *ReignUpdate {
	ru.mutation.SetGeom(a)
	return ru
}

// SetBattery sets the "battery" edge to the Battery entity.
func (ru *ReignUpdate) SetBattery(b *Battery) *ReignUpdate {
	return ru.SetBatteryID(b.ID)
}

// Mutation returns the ReignMutation object of the builder.
func (ru *ReignUpdate) Mutation() *ReignMutation {
	return ru.mutation
}

// ClearBattery clears the "battery" edge to the Battery entity.
func (ru *ReignUpdate) ClearBattery() *ReignUpdate {
	ru.mutation.ClearBattery()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ReignUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ReignMutation](ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ReignUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ReignUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ReignUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *ReignUpdate) check() error {
	if _, ok := ru.mutation.BatteryID(); ru.mutation.BatteryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Reign.battery"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ru *ReignUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ReignUpdate {
	ru.modifiers = append(ru.modifiers, modifiers...)
	return ru
}

func (ru *ReignUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   reign.Table,
			Columns: reign.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: reign.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Action(); ok {
		_spec.SetField(reign.FieldAction, field.TypeOther, value)
	}
	if value, ok := ru.mutation.Sn(); ok {
		_spec.SetField(reign.FieldSn, field.TypeString, value)
	}
	if value, ok := ru.mutation.Serial(); ok {
		_spec.SetField(reign.FieldSerial, field.TypeString, value)
	}
	if value, ok := ru.mutation.Ordinal(); ok {
		_spec.SetField(reign.FieldOrdinal, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedOrdinal(); ok {
		_spec.AddField(reign.FieldOrdinal, field.TypeInt, value)
	}
	if value, ok := ru.mutation.CabinetName(); ok {
		_spec.SetField(reign.FieldCabinetName, field.TypeString, value)
	}
	if ru.mutation.CabinetNameCleared() {
		_spec.ClearField(reign.FieldCabinetName, field.TypeString)
	}
	if value, ok := ru.mutation.Remark(); ok {
		_spec.SetField(reign.FieldRemark, field.TypeString, value)
	}
	if ru.mutation.RemarkCleared() {
		_spec.ClearField(reign.FieldRemark, field.TypeString)
	}
	if value, ok := ru.mutation.Geom(); ok {
		_spec.SetField(reign.FieldGeom, field.TypeOther, value)
	}
	if ru.mutation.BatteryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reign.BatteryTable,
			Columns: []string{reign.BatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: battery.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.BatteryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reign.BatteryTable,
			Columns: []string{reign.BatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: battery.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reign.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// ReignUpdateOne is the builder for updating a single Reign entity.
type ReignUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ReignMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetAction sets the "action" field.
func (ruo *ReignUpdateOne) SetAction(ba batdef.ReignAction) *ReignUpdateOne {
	ruo.mutation.SetAction(ba)
	return ruo
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (ruo *ReignUpdateOne) SetNillableAction(ba *batdef.ReignAction) *ReignUpdateOne {
	if ba != nil {
		ruo.SetAction(*ba)
	}
	return ruo
}

// SetSn sets the "sn" field.
func (ruo *ReignUpdateOne) SetSn(s string) *ReignUpdateOne {
	ruo.mutation.SetSn(s)
	return ruo
}

// SetBatteryID sets the "battery_id" field.
func (ruo *ReignUpdateOne) SetBatteryID(i int) *ReignUpdateOne {
	ruo.mutation.SetBatteryID(i)
	return ruo
}

// SetSerial sets the "serial" field.
func (ruo *ReignUpdateOne) SetSerial(s string) *ReignUpdateOne {
	ruo.mutation.SetSerial(s)
	return ruo
}

// SetOrdinal sets the "ordinal" field.
func (ruo *ReignUpdateOne) SetOrdinal(i int) *ReignUpdateOne {
	ruo.mutation.ResetOrdinal()
	ruo.mutation.SetOrdinal(i)
	return ruo
}

// AddOrdinal adds i to the "ordinal" field.
func (ruo *ReignUpdateOne) AddOrdinal(i int) *ReignUpdateOne {
	ruo.mutation.AddOrdinal(i)
	return ruo
}

// SetCabinetName sets the "cabinet_name" field.
func (ruo *ReignUpdateOne) SetCabinetName(s string) *ReignUpdateOne {
	ruo.mutation.SetCabinetName(s)
	return ruo
}

// SetNillableCabinetName sets the "cabinet_name" field if the given value is not nil.
func (ruo *ReignUpdateOne) SetNillableCabinetName(s *string) *ReignUpdateOne {
	if s != nil {
		ruo.SetCabinetName(*s)
	}
	return ruo
}

// ClearCabinetName clears the value of the "cabinet_name" field.
func (ruo *ReignUpdateOne) ClearCabinetName() *ReignUpdateOne {
	ruo.mutation.ClearCabinetName()
	return ruo
}

// SetRemark sets the "remark" field.
func (ruo *ReignUpdateOne) SetRemark(s string) *ReignUpdateOne {
	ruo.mutation.SetRemark(s)
	return ruo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ruo *ReignUpdateOne) SetNillableRemark(s *string) *ReignUpdateOne {
	if s != nil {
		ruo.SetRemark(*s)
	}
	return ruo
}

// ClearRemark clears the value of the "remark" field.
func (ruo *ReignUpdateOne) ClearRemark() *ReignUpdateOne {
	ruo.mutation.ClearRemark()
	return ruo
}

// SetGeom sets the "geom" field.
func (ruo *ReignUpdateOne) SetGeom(a *adapter.Geometry) *ReignUpdateOne {
	ruo.mutation.SetGeom(a)
	return ruo
}

// SetBattery sets the "battery" edge to the Battery entity.
func (ruo *ReignUpdateOne) SetBattery(b *Battery) *ReignUpdateOne {
	return ruo.SetBatteryID(b.ID)
}

// Mutation returns the ReignMutation object of the builder.
func (ruo *ReignUpdateOne) Mutation() *ReignMutation {
	return ruo.mutation
}

// ClearBattery clears the "battery" edge to the Battery entity.
func (ruo *ReignUpdateOne) ClearBattery() *ReignUpdateOne {
	ruo.mutation.ClearBattery()
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ReignUpdateOne) Select(field string, fields ...string) *ReignUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Reign entity.
func (ruo *ReignUpdateOne) Save(ctx context.Context) (*Reign, error) {
	return withHooks[*Reign, ReignMutation](ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ReignUpdateOne) SaveX(ctx context.Context) *Reign {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ReignUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ReignUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *ReignUpdateOne) check() error {
	if _, ok := ruo.mutation.BatteryID(); ruo.mutation.BatteryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Reign.battery"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ruo *ReignUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ReignUpdateOne {
	ruo.modifiers = append(ruo.modifiers, modifiers...)
	return ruo
}

func (ruo *ReignUpdateOne) sqlSave(ctx context.Context) (_node *Reign, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   reign.Table,
			Columns: reign.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: reign.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Reign.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reign.FieldID)
		for _, f := range fields {
			if !reign.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != reign.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Action(); ok {
		_spec.SetField(reign.FieldAction, field.TypeOther, value)
	}
	if value, ok := ruo.mutation.Sn(); ok {
		_spec.SetField(reign.FieldSn, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Serial(); ok {
		_spec.SetField(reign.FieldSerial, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Ordinal(); ok {
		_spec.SetField(reign.FieldOrdinal, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedOrdinal(); ok {
		_spec.AddField(reign.FieldOrdinal, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.CabinetName(); ok {
		_spec.SetField(reign.FieldCabinetName, field.TypeString, value)
	}
	if ruo.mutation.CabinetNameCleared() {
		_spec.ClearField(reign.FieldCabinetName, field.TypeString)
	}
	if value, ok := ruo.mutation.Remark(); ok {
		_spec.SetField(reign.FieldRemark, field.TypeString, value)
	}
	if ruo.mutation.RemarkCleared() {
		_spec.ClearField(reign.FieldRemark, field.TypeString)
	}
	if value, ok := ruo.mutation.Geom(); ok {
		_spec.SetField(reign.FieldGeom, field.TypeOther, value)
	}
	if ruo.mutation.BatteryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reign.BatteryTable,
			Columns: []string{reign.BatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: battery.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.BatteryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reign.BatteryTable,
			Columns: []string{reign.BatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: battery.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ruo.modifiers...)
	_node = &Reign{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reign.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
