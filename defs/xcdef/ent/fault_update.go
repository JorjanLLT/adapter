// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/adapter/defs/xcdef"
	"github.com/auroraride/adapter/defs/xcdef/ent/battery"
	"github.com/auroraride/adapter/defs/xcdef/ent/fault"
	"github.com/auroraride/adapter/defs/xcdef/ent/predicate"
)

// FaultUpdate is the builder for updating Fault entities.
type FaultUpdate struct {
	config
	hooks     []Hook
	mutation  *FaultMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the FaultUpdate builder.
func (fu *FaultUpdate) Where(ps ...predicate.Fault) *FaultUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetSn sets the "sn" field.
func (fu *FaultUpdate) SetSn(s string) *FaultUpdate {
	fu.mutation.SetSn(s)
	return fu
}

// SetBatteryID sets the "battery_id" field.
func (fu *FaultUpdate) SetBatteryID(i int) *FaultUpdate {
	fu.mutation.SetBatteryID(i)
	return fu
}

// SetFault sets the "fault" field.
func (fu *FaultUpdate) SetFault(x xcdef.Fault) *FaultUpdate {
	fu.mutation.SetFault(x)
	return fu
}

// SetEndAt sets the "end_at" field.
func (fu *FaultUpdate) SetEndAt(t time.Time) *FaultUpdate {
	fu.mutation.SetEndAt(t)
	return fu
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (fu *FaultUpdate) SetNillableEndAt(t *time.Time) *FaultUpdate {
	if t != nil {
		fu.SetEndAt(*t)
	}
	return fu
}

// ClearEndAt clears the value of the "end_at" field.
func (fu *FaultUpdate) ClearEndAt() *FaultUpdate {
	fu.mutation.ClearEndAt()
	return fu
}

// SetBattery sets the "battery" edge to the Battery entity.
func (fu *FaultUpdate) SetBattery(b *Battery) *FaultUpdate {
	return fu.SetBatteryID(b.ID)
}

// Mutation returns the FaultMutation object of the builder.
func (fu *FaultUpdate) Mutation() *FaultMutation {
	return fu.mutation
}

// ClearBattery clears the "battery" edge to the Battery entity.
func (fu *FaultUpdate) ClearBattery() *FaultUpdate {
	fu.mutation.ClearBattery()
	return fu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FaultUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, FaultMutation](ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FaultUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FaultUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FaultUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FaultUpdate) check() error {
	if _, ok := fu.mutation.BatteryID(); fu.mutation.BatteryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Fault.battery"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fu *FaultUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FaultUpdate {
	fu.modifiers = append(fu.modifiers, modifiers...)
	return fu
}

func (fu *FaultUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   fault.Table,
			Columns: fault.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: fault.FieldID,
			},
		},
	}
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Sn(); ok {
		_spec.SetField(fault.FieldSn, field.TypeString, value)
	}
	if value, ok := fu.mutation.Fault(); ok {
		_spec.SetField(fault.FieldFault, field.TypeOther, value)
	}
	if value, ok := fu.mutation.EndAt(); ok {
		_spec.SetField(fault.FieldEndAt, field.TypeTime, value)
	}
	if fu.mutation.EndAtCleared() {
		_spec.ClearField(fault.FieldEndAt, field.TypeTime)
	}
	if fu.mutation.BatteryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fault.BatteryTable,
			Columns: []string{fault.BatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: battery.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.BatteryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fault.BatteryTable,
			Columns: []string{fault.BatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: battery.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(fu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fault.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FaultUpdateOne is the builder for updating a single Fault entity.
type FaultUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *FaultMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetSn sets the "sn" field.
func (fuo *FaultUpdateOne) SetSn(s string) *FaultUpdateOne {
	fuo.mutation.SetSn(s)
	return fuo
}

// SetBatteryID sets the "battery_id" field.
func (fuo *FaultUpdateOne) SetBatteryID(i int) *FaultUpdateOne {
	fuo.mutation.SetBatteryID(i)
	return fuo
}

// SetFault sets the "fault" field.
func (fuo *FaultUpdateOne) SetFault(x xcdef.Fault) *FaultUpdateOne {
	fuo.mutation.SetFault(x)
	return fuo
}

// SetEndAt sets the "end_at" field.
func (fuo *FaultUpdateOne) SetEndAt(t time.Time) *FaultUpdateOne {
	fuo.mutation.SetEndAt(t)
	return fuo
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (fuo *FaultUpdateOne) SetNillableEndAt(t *time.Time) *FaultUpdateOne {
	if t != nil {
		fuo.SetEndAt(*t)
	}
	return fuo
}

// ClearEndAt clears the value of the "end_at" field.
func (fuo *FaultUpdateOne) ClearEndAt() *FaultUpdateOne {
	fuo.mutation.ClearEndAt()
	return fuo
}

// SetBattery sets the "battery" edge to the Battery entity.
func (fuo *FaultUpdateOne) SetBattery(b *Battery) *FaultUpdateOne {
	return fuo.SetBatteryID(b.ID)
}

// Mutation returns the FaultMutation object of the builder.
func (fuo *FaultUpdateOne) Mutation() *FaultMutation {
	return fuo.mutation
}

// ClearBattery clears the "battery" edge to the Battery entity.
func (fuo *FaultUpdateOne) ClearBattery() *FaultUpdateOne {
	fuo.mutation.ClearBattery()
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FaultUpdateOne) Select(field string, fields ...string) *FaultUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Fault entity.
func (fuo *FaultUpdateOne) Save(ctx context.Context) (*Fault, error) {
	return withHooks[*Fault, FaultMutation](ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FaultUpdateOne) SaveX(ctx context.Context) *Fault {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FaultUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FaultUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FaultUpdateOne) check() error {
	if _, ok := fuo.mutation.BatteryID(); fuo.mutation.BatteryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Fault.battery"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fuo *FaultUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FaultUpdateOne {
	fuo.modifiers = append(fuo.modifiers, modifiers...)
	return fuo
}

func (fuo *FaultUpdateOne) sqlSave(ctx context.Context) (_node *Fault, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   fault.Table,
			Columns: fault.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: fault.FieldID,
			},
		},
	}
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Fault.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fault.FieldID)
		for _, f := range fields {
			if !fault.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != fault.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Sn(); ok {
		_spec.SetField(fault.FieldSn, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Fault(); ok {
		_spec.SetField(fault.FieldFault, field.TypeOther, value)
	}
	if value, ok := fuo.mutation.EndAt(); ok {
		_spec.SetField(fault.FieldEndAt, field.TypeTime, value)
	}
	if fuo.mutation.EndAtCleared() {
		_spec.ClearField(fault.FieldEndAt, field.TypeTime)
	}
	if fuo.mutation.BatteryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fault.BatteryTable,
			Columns: []string{fault.BatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: battery.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.BatteryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fault.BatteryTable,
			Columns: []string{fault.BatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: battery.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(fuo.modifiers...)
	_node = &Fault{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fault.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
