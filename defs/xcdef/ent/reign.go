// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/adapter"
	"github.com/auroraride/adapter/defs/batdef"
	"github.com/auroraride/adapter/defs/xcdef/ent/battery"
	"github.com/auroraride/adapter/defs/xcdef/ent/reign"
)

// Reign is the model entity for the Reign schema.
type Reign struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 动作 1:入仓 2:离仓
	Action batdef.ReignAction `json:"action,omitempty"`
	// 电池编号
	Sn string `json:"sn,omitempty"`
	// 电池ID
	BatteryID int `json:"battery_id,omitempty"`
	// 记录时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 电柜编号
	Serial string `json:"serial,omitempty"`
	// 仓位序号
	Ordinal int `json:"ordinal,omitempty"`
	// 电柜名称
	CabinetName *string `json:"cabinet_name,omitempty"`
	// 备注信息
	Remark *string `json:"remark,omitempty"`
	// 坐标
	Geom *adapter.Geometry `json:"geom,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReignQuery when eager-loading is set.
	Edges ReignEdges `json:"edges"`
}

// ReignEdges holds the relations/edges for other nodes in the graph.
type ReignEdges struct {
	// 所属电池
	Battery *Battery `json:"battery,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BatteryOrErr returns the Battery value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReignEdges) BatteryOrErr() (*Battery, error) {
	if e.loadedTypes[0] {
		if e.Battery == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: battery.Label}
		}
		return e.Battery, nil
	}
	return nil, &NotLoadedError{edge: "battery"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Reign) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case reign.FieldGeom:
			values[i] = new(adapter.Geometry)
		case reign.FieldAction:
			values[i] = new(batdef.ReignAction)
		case reign.FieldID, reign.FieldBatteryID, reign.FieldOrdinal:
			values[i] = new(sql.NullInt64)
		case reign.FieldSn, reign.FieldSerial, reign.FieldCabinetName, reign.FieldRemark:
			values[i] = new(sql.NullString)
		case reign.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Reign", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Reign fields.
func (r *Reign) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case reign.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case reign.FieldAction:
			if value, ok := values[i].(*batdef.ReignAction); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value != nil {
				r.Action = *value
			}
		case reign.FieldSn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sn", values[i])
			} else if value.Valid {
				r.Sn = value.String
			}
		case reign.FieldBatteryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field battery_id", values[i])
			} else if value.Valid {
				r.BatteryID = int(value.Int64)
			}
		case reign.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case reign.FieldSerial:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field serial", values[i])
			} else if value.Valid {
				r.Serial = value.String
			}
		case reign.FieldOrdinal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ordinal", values[i])
			} else if value.Valid {
				r.Ordinal = int(value.Int64)
			}
		case reign.FieldCabinetName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cabinet_name", values[i])
			} else if value.Valid {
				r.CabinetName = new(string)
				*r.CabinetName = value.String
			}
		case reign.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				r.Remark = new(string)
				*r.Remark = value.String
			}
		case reign.FieldGeom:
			if value, ok := values[i].(*adapter.Geometry); !ok {
				return fmt.Errorf("unexpected type %T for field geom", values[i])
			} else if value != nil {
				r.Geom = value
			}
		}
	}
	return nil
}

// QueryBattery queries the "battery" edge of the Reign entity.
func (r *Reign) QueryBattery() *BatteryQuery {
	return NewReignClient(r.config).QueryBattery(r)
}

// Update returns a builder for updating this Reign.
// Note that you need to call Reign.Unwrap() before calling this method if this Reign
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Reign) Update() *ReignUpdateOne {
	return NewReignClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Reign entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Reign) Unwrap() *Reign {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Reign is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Reign) String() string {
	var builder strings.Builder
	builder.WriteString("Reign(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("action=")
	builder.WriteString(fmt.Sprintf("%v", r.Action))
	builder.WriteString(", ")
	builder.WriteString("sn=")
	builder.WriteString(r.Sn)
	builder.WriteString(", ")
	builder.WriteString("battery_id=")
	builder.WriteString(fmt.Sprintf("%v", r.BatteryID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("serial=")
	builder.WriteString(r.Serial)
	builder.WriteString(", ")
	builder.WriteString("ordinal=")
	builder.WriteString(fmt.Sprintf("%v", r.Ordinal))
	builder.WriteString(", ")
	if v := r.CabinetName; v != nil {
		builder.WriteString("cabinet_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := r.Remark; v != nil {
		builder.WriteString("remark=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("geom=")
	builder.WriteString(fmt.Sprintf("%v", r.Geom))
	builder.WriteByte(')')
	return builder.String()
}

// Reigns is a parsable slice of Reign.
type Reigns []*Reign

func (r Reigns) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
