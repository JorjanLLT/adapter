// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/adapter/defs/xcdef/ent/battery"
	"github.com/auroraride/adapter/defs/xcdef/ent/fault"
	"github.com/auroraride/adapter/defs/xcdef/ent/heartbeat"
	"github.com/auroraride/adapter/defs/xcdef/ent/predicate"
	"github.com/auroraride/adapter/defs/xcdef/ent/reign"
)

// BatteryUpdate is the builder for updating Battery entities.
type BatteryUpdate struct {
	config
	hooks     []Hook
	mutation  *BatteryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the BatteryUpdate builder.
func (bu *BatteryUpdate) Where(ps ...predicate.Battery) *BatteryUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BatteryUpdate) SetUpdatedAt(t time.Time) *BatteryUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// SetSn sets the "sn" field.
func (bu *BatteryUpdate) SetSn(s string) *BatteryUpdate {
	bu.mutation.SetSn(s)
	return bu
}

// SetSoftVersion sets the "soft_version" field.
func (bu *BatteryUpdate) SetSoftVersion(u uint16) *BatteryUpdate {
	bu.mutation.ResetSoftVersion()
	bu.mutation.SetSoftVersion(u)
	return bu
}

// SetNillableSoftVersion sets the "soft_version" field if the given value is not nil.
func (bu *BatteryUpdate) SetNillableSoftVersion(u *uint16) *BatteryUpdate {
	if u != nil {
		bu.SetSoftVersion(*u)
	}
	return bu
}

// AddSoftVersion adds u to the "soft_version" field.
func (bu *BatteryUpdate) AddSoftVersion(u int16) *BatteryUpdate {
	bu.mutation.AddSoftVersion(u)
	return bu
}

// ClearSoftVersion clears the value of the "soft_version" field.
func (bu *BatteryUpdate) ClearSoftVersion() *BatteryUpdate {
	bu.mutation.ClearSoftVersion()
	return bu
}

// SetHardVersion sets the "hard_version" field.
func (bu *BatteryUpdate) SetHardVersion(u uint16) *BatteryUpdate {
	bu.mutation.ResetHardVersion()
	bu.mutation.SetHardVersion(u)
	return bu
}

// SetNillableHardVersion sets the "hard_version" field if the given value is not nil.
func (bu *BatteryUpdate) SetNillableHardVersion(u *uint16) *BatteryUpdate {
	if u != nil {
		bu.SetHardVersion(*u)
	}
	return bu
}

// AddHardVersion adds u to the "hard_version" field.
func (bu *BatteryUpdate) AddHardVersion(u int16) *BatteryUpdate {
	bu.mutation.AddHardVersion(u)
	return bu
}

// ClearHardVersion clears the value of the "hard_version" field.
func (bu *BatteryUpdate) ClearHardVersion() *BatteryUpdate {
	bu.mutation.ClearHardVersion()
	return bu
}

// SetSoft4gVersion sets the "soft_4g_version" field.
func (bu *BatteryUpdate) SetSoft4gVersion(u uint16) *BatteryUpdate {
	bu.mutation.ResetSoft4gVersion()
	bu.mutation.SetSoft4gVersion(u)
	return bu
}

// SetNillableSoft4gVersion sets the "soft_4g_version" field if the given value is not nil.
func (bu *BatteryUpdate) SetNillableSoft4gVersion(u *uint16) *BatteryUpdate {
	if u != nil {
		bu.SetSoft4gVersion(*u)
	}
	return bu
}

// AddSoft4gVersion adds u to the "soft_4g_version" field.
func (bu *BatteryUpdate) AddSoft4gVersion(u int16) *BatteryUpdate {
	bu.mutation.AddSoft4gVersion(u)
	return bu
}

// ClearSoft4gVersion clears the value of the "soft_4g_version" field.
func (bu *BatteryUpdate) ClearSoft4gVersion() *BatteryUpdate {
	bu.mutation.ClearSoft4gVersion()
	return bu
}

// SetHard4gVersion sets the "hard_4g_version" field.
func (bu *BatteryUpdate) SetHard4gVersion(u uint16) *BatteryUpdate {
	bu.mutation.ResetHard4gVersion()
	bu.mutation.SetHard4gVersion(u)
	return bu
}

// SetNillableHard4gVersion sets the "hard_4g_version" field if the given value is not nil.
func (bu *BatteryUpdate) SetNillableHard4gVersion(u *uint16) *BatteryUpdate {
	if u != nil {
		bu.SetHard4gVersion(*u)
	}
	return bu
}

// AddHard4gVersion adds u to the "hard_4g_version" field.
func (bu *BatteryUpdate) AddHard4gVersion(u int16) *BatteryUpdate {
	bu.mutation.AddHard4gVersion(u)
	return bu
}

// ClearHard4gVersion clears the value of the "hard_4g_version" field.
func (bu *BatteryUpdate) ClearHard4gVersion() *BatteryUpdate {
	bu.mutation.ClearHard4gVersion()
	return bu
}

// SetSn4g sets the "sn_4g" field.
func (bu *BatteryUpdate) SetSn4g(u uint64) *BatteryUpdate {
	bu.mutation.ResetSn4g()
	bu.mutation.SetSn4g(u)
	return bu
}

// SetNillableSn4g sets the "sn_4g" field if the given value is not nil.
func (bu *BatteryUpdate) SetNillableSn4g(u *uint64) *BatteryUpdate {
	if u != nil {
		bu.SetSn4g(*u)
	}
	return bu
}

// AddSn4g adds u to the "sn_4g" field.
func (bu *BatteryUpdate) AddSn4g(u int64) *BatteryUpdate {
	bu.mutation.AddSn4g(u)
	return bu
}

// ClearSn4g clears the value of the "sn_4g" field.
func (bu *BatteryUpdate) ClearSn4g() *BatteryUpdate {
	bu.mutation.ClearSn4g()
	return bu
}

// SetIccid sets the "iccid" field.
func (bu *BatteryUpdate) SetIccid(s string) *BatteryUpdate {
	bu.mutation.SetIccid(s)
	return bu
}

// SetNillableIccid sets the "iccid" field if the given value is not nil.
func (bu *BatteryUpdate) SetNillableIccid(s *string) *BatteryUpdate {
	if s != nil {
		bu.SetIccid(*s)
	}
	return bu
}

// ClearIccid clears the value of the "iccid" field.
func (bu *BatteryUpdate) ClearIccid() *BatteryUpdate {
	bu.mutation.ClearIccid()
	return bu
}

// SetSoc sets the "soc" field.
func (bu *BatteryUpdate) SetSoc(u uint16) *BatteryUpdate {
	bu.mutation.ResetSoc()
	bu.mutation.SetSoc(u)
	return bu
}

// SetNillableSoc sets the "soc" field if the given value is not nil.
func (bu *BatteryUpdate) SetNillableSoc(u *uint16) *BatteryUpdate {
	if u != nil {
		bu.SetSoc(*u)
	}
	return bu
}

// AddSoc adds u to the "soc" field.
func (bu *BatteryUpdate) AddSoc(u int16) *BatteryUpdate {
	bu.mutation.AddSoc(u)
	return bu
}

// ClearSoc clears the value of the "soc" field.
func (bu *BatteryUpdate) ClearSoc() *BatteryUpdate {
	bu.mutation.ClearSoc()
	return bu
}

// AddHeartbeatIDs adds the "heartbeats" edge to the Heartbeat entity by IDs.
func (bu *BatteryUpdate) AddHeartbeatIDs(ids ...int) *BatteryUpdate {
	bu.mutation.AddHeartbeatIDs(ids...)
	return bu
}

// AddHeartbeats adds the "heartbeats" edges to the Heartbeat entity.
func (bu *BatteryUpdate) AddHeartbeats(h ...*Heartbeat) *BatteryUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return bu.AddHeartbeatIDs(ids...)
}

// AddReignIDs adds the "reigns" edge to the Reign entity by IDs.
func (bu *BatteryUpdate) AddReignIDs(ids ...int) *BatteryUpdate {
	bu.mutation.AddReignIDs(ids...)
	return bu
}

// AddReigns adds the "reigns" edges to the Reign entity.
func (bu *BatteryUpdate) AddReigns(r ...*Reign) *BatteryUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return bu.AddReignIDs(ids...)
}

// AddFaultLogIDs adds the "fault_log" edge to the Fault entity by IDs.
func (bu *BatteryUpdate) AddFaultLogIDs(ids ...int) *BatteryUpdate {
	bu.mutation.AddFaultLogIDs(ids...)
	return bu
}

// AddFaultLog adds the "fault_log" edges to the Fault entity.
func (bu *BatteryUpdate) AddFaultLog(f ...*Fault) *BatteryUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return bu.AddFaultLogIDs(ids...)
}

// Mutation returns the BatteryMutation object of the builder.
func (bu *BatteryUpdate) Mutation() *BatteryMutation {
	return bu.mutation
}

// ClearHeartbeats clears all "heartbeats" edges to the Heartbeat entity.
func (bu *BatteryUpdate) ClearHeartbeats() *BatteryUpdate {
	bu.mutation.ClearHeartbeats()
	return bu
}

// RemoveHeartbeatIDs removes the "heartbeats" edge to Heartbeat entities by IDs.
func (bu *BatteryUpdate) RemoveHeartbeatIDs(ids ...int) *BatteryUpdate {
	bu.mutation.RemoveHeartbeatIDs(ids...)
	return bu
}

// RemoveHeartbeats removes "heartbeats" edges to Heartbeat entities.
func (bu *BatteryUpdate) RemoveHeartbeats(h ...*Heartbeat) *BatteryUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return bu.RemoveHeartbeatIDs(ids...)
}

// ClearReigns clears all "reigns" edges to the Reign entity.
func (bu *BatteryUpdate) ClearReigns() *BatteryUpdate {
	bu.mutation.ClearReigns()
	return bu
}

// RemoveReignIDs removes the "reigns" edge to Reign entities by IDs.
func (bu *BatteryUpdate) RemoveReignIDs(ids ...int) *BatteryUpdate {
	bu.mutation.RemoveReignIDs(ids...)
	return bu
}

// RemoveReigns removes "reigns" edges to Reign entities.
func (bu *BatteryUpdate) RemoveReigns(r ...*Reign) *BatteryUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return bu.RemoveReignIDs(ids...)
}

// ClearFaultLog clears all "fault_log" edges to the Fault entity.
func (bu *BatteryUpdate) ClearFaultLog() *BatteryUpdate {
	bu.mutation.ClearFaultLog()
	return bu
}

// RemoveFaultLogIDs removes the "fault_log" edge to Fault entities by IDs.
func (bu *BatteryUpdate) RemoveFaultLogIDs(ids ...int) *BatteryUpdate {
	bu.mutation.RemoveFaultLogIDs(ids...)
	return bu
}

// RemoveFaultLog removes "fault_log" edges to Fault entities.
func (bu *BatteryUpdate) RemoveFaultLog(f ...*Fault) *BatteryUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return bu.RemoveFaultLogIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BatteryUpdate) Save(ctx context.Context) (int, error) {
	bu.defaults()
	return withHooks[int, BatteryMutation](ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BatteryUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BatteryUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BatteryUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bu *BatteryUpdate) defaults() {
	if _, ok := bu.mutation.UpdatedAt(); !ok {
		v := battery.UpdateDefaultUpdatedAt()
		bu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (bu *BatteryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BatteryUpdate {
	bu.modifiers = append(bu.modifiers, modifiers...)
	return bu
}

func (bu *BatteryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   battery.Table,
			Columns: battery.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: battery.FieldID,
			},
		},
	}
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.SetField(battery.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bu.mutation.Sn(); ok {
		_spec.SetField(battery.FieldSn, field.TypeString, value)
	}
	if value, ok := bu.mutation.SoftVersion(); ok {
		_spec.SetField(battery.FieldSoftVersion, field.TypeUint16, value)
	}
	if value, ok := bu.mutation.AddedSoftVersion(); ok {
		_spec.AddField(battery.FieldSoftVersion, field.TypeUint16, value)
	}
	if bu.mutation.SoftVersionCleared() {
		_spec.ClearField(battery.FieldSoftVersion, field.TypeUint16)
	}
	if value, ok := bu.mutation.HardVersion(); ok {
		_spec.SetField(battery.FieldHardVersion, field.TypeUint16, value)
	}
	if value, ok := bu.mutation.AddedHardVersion(); ok {
		_spec.AddField(battery.FieldHardVersion, field.TypeUint16, value)
	}
	if bu.mutation.HardVersionCleared() {
		_spec.ClearField(battery.FieldHardVersion, field.TypeUint16)
	}
	if value, ok := bu.mutation.Soft4gVersion(); ok {
		_spec.SetField(battery.FieldSoft4gVersion, field.TypeUint16, value)
	}
	if value, ok := bu.mutation.AddedSoft4gVersion(); ok {
		_spec.AddField(battery.FieldSoft4gVersion, field.TypeUint16, value)
	}
	if bu.mutation.Soft4gVersionCleared() {
		_spec.ClearField(battery.FieldSoft4gVersion, field.TypeUint16)
	}
	if value, ok := bu.mutation.Hard4gVersion(); ok {
		_spec.SetField(battery.FieldHard4gVersion, field.TypeUint16, value)
	}
	if value, ok := bu.mutation.AddedHard4gVersion(); ok {
		_spec.AddField(battery.FieldHard4gVersion, field.TypeUint16, value)
	}
	if bu.mutation.Hard4gVersionCleared() {
		_spec.ClearField(battery.FieldHard4gVersion, field.TypeUint16)
	}
	if value, ok := bu.mutation.Sn4g(); ok {
		_spec.SetField(battery.FieldSn4g, field.TypeUint64, value)
	}
	if value, ok := bu.mutation.AddedSn4g(); ok {
		_spec.AddField(battery.FieldSn4g, field.TypeUint64, value)
	}
	if bu.mutation.Sn4gCleared() {
		_spec.ClearField(battery.FieldSn4g, field.TypeUint64)
	}
	if value, ok := bu.mutation.Iccid(); ok {
		_spec.SetField(battery.FieldIccid, field.TypeString, value)
	}
	if bu.mutation.IccidCleared() {
		_spec.ClearField(battery.FieldIccid, field.TypeString)
	}
	if value, ok := bu.mutation.Soc(); ok {
		_spec.SetField(battery.FieldSoc, field.TypeUint16, value)
	}
	if value, ok := bu.mutation.AddedSoc(); ok {
		_spec.AddField(battery.FieldSoc, field.TypeUint16, value)
	}
	if bu.mutation.SocCleared() {
		_spec.ClearField(battery.FieldSoc, field.TypeUint16)
	}
	if bu.mutation.HeartbeatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   battery.HeartbeatsTable,
			Columns: []string{battery.HeartbeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: heartbeat.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedHeartbeatsIDs(); len(nodes) > 0 && !bu.mutation.HeartbeatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   battery.HeartbeatsTable,
			Columns: []string{battery.HeartbeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: heartbeat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.HeartbeatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   battery.HeartbeatsTable,
			Columns: []string{battery.HeartbeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: heartbeat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.ReignsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   battery.ReignsTable,
			Columns: []string{battery.ReignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: reign.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedReignsIDs(); len(nodes) > 0 && !bu.mutation.ReignsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   battery.ReignsTable,
			Columns: []string{battery.ReignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: reign.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.ReignsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   battery.ReignsTable,
			Columns: []string{battery.ReignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: reign.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.FaultLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   battery.FaultLogTable,
			Columns: []string{battery.FaultLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fault.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedFaultLogIDs(); len(nodes) > 0 && !bu.mutation.FaultLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   battery.FaultLogTable,
			Columns: []string{battery.FaultLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fault.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.FaultLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   battery.FaultLogTable,
			Columns: []string{battery.FaultLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fault.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(bu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{battery.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BatteryUpdateOne is the builder for updating a single Battery entity.
type BatteryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *BatteryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BatteryUpdateOne) SetUpdatedAt(t time.Time) *BatteryUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// SetSn sets the "sn" field.
func (buo *BatteryUpdateOne) SetSn(s string) *BatteryUpdateOne {
	buo.mutation.SetSn(s)
	return buo
}

// SetSoftVersion sets the "soft_version" field.
func (buo *BatteryUpdateOne) SetSoftVersion(u uint16) *BatteryUpdateOne {
	buo.mutation.ResetSoftVersion()
	buo.mutation.SetSoftVersion(u)
	return buo
}

// SetNillableSoftVersion sets the "soft_version" field if the given value is not nil.
func (buo *BatteryUpdateOne) SetNillableSoftVersion(u *uint16) *BatteryUpdateOne {
	if u != nil {
		buo.SetSoftVersion(*u)
	}
	return buo
}

// AddSoftVersion adds u to the "soft_version" field.
func (buo *BatteryUpdateOne) AddSoftVersion(u int16) *BatteryUpdateOne {
	buo.mutation.AddSoftVersion(u)
	return buo
}

// ClearSoftVersion clears the value of the "soft_version" field.
func (buo *BatteryUpdateOne) ClearSoftVersion() *BatteryUpdateOne {
	buo.mutation.ClearSoftVersion()
	return buo
}

// SetHardVersion sets the "hard_version" field.
func (buo *BatteryUpdateOne) SetHardVersion(u uint16) *BatteryUpdateOne {
	buo.mutation.ResetHardVersion()
	buo.mutation.SetHardVersion(u)
	return buo
}

// SetNillableHardVersion sets the "hard_version" field if the given value is not nil.
func (buo *BatteryUpdateOne) SetNillableHardVersion(u *uint16) *BatteryUpdateOne {
	if u != nil {
		buo.SetHardVersion(*u)
	}
	return buo
}

// AddHardVersion adds u to the "hard_version" field.
func (buo *BatteryUpdateOne) AddHardVersion(u int16) *BatteryUpdateOne {
	buo.mutation.AddHardVersion(u)
	return buo
}

// ClearHardVersion clears the value of the "hard_version" field.
func (buo *BatteryUpdateOne) ClearHardVersion() *BatteryUpdateOne {
	buo.mutation.ClearHardVersion()
	return buo
}

// SetSoft4gVersion sets the "soft_4g_version" field.
func (buo *BatteryUpdateOne) SetSoft4gVersion(u uint16) *BatteryUpdateOne {
	buo.mutation.ResetSoft4gVersion()
	buo.mutation.SetSoft4gVersion(u)
	return buo
}

// SetNillableSoft4gVersion sets the "soft_4g_version" field if the given value is not nil.
func (buo *BatteryUpdateOne) SetNillableSoft4gVersion(u *uint16) *BatteryUpdateOne {
	if u != nil {
		buo.SetSoft4gVersion(*u)
	}
	return buo
}

// AddSoft4gVersion adds u to the "soft_4g_version" field.
func (buo *BatteryUpdateOne) AddSoft4gVersion(u int16) *BatteryUpdateOne {
	buo.mutation.AddSoft4gVersion(u)
	return buo
}

// ClearSoft4gVersion clears the value of the "soft_4g_version" field.
func (buo *BatteryUpdateOne) ClearSoft4gVersion() *BatteryUpdateOne {
	buo.mutation.ClearSoft4gVersion()
	return buo
}

// SetHard4gVersion sets the "hard_4g_version" field.
func (buo *BatteryUpdateOne) SetHard4gVersion(u uint16) *BatteryUpdateOne {
	buo.mutation.ResetHard4gVersion()
	buo.mutation.SetHard4gVersion(u)
	return buo
}

// SetNillableHard4gVersion sets the "hard_4g_version" field if the given value is not nil.
func (buo *BatteryUpdateOne) SetNillableHard4gVersion(u *uint16) *BatteryUpdateOne {
	if u != nil {
		buo.SetHard4gVersion(*u)
	}
	return buo
}

// AddHard4gVersion adds u to the "hard_4g_version" field.
func (buo *BatteryUpdateOne) AddHard4gVersion(u int16) *BatteryUpdateOne {
	buo.mutation.AddHard4gVersion(u)
	return buo
}

// ClearHard4gVersion clears the value of the "hard_4g_version" field.
func (buo *BatteryUpdateOne) ClearHard4gVersion() *BatteryUpdateOne {
	buo.mutation.ClearHard4gVersion()
	return buo
}

// SetSn4g sets the "sn_4g" field.
func (buo *BatteryUpdateOne) SetSn4g(u uint64) *BatteryUpdateOne {
	buo.mutation.ResetSn4g()
	buo.mutation.SetSn4g(u)
	return buo
}

// SetNillableSn4g sets the "sn_4g" field if the given value is not nil.
func (buo *BatteryUpdateOne) SetNillableSn4g(u *uint64) *BatteryUpdateOne {
	if u != nil {
		buo.SetSn4g(*u)
	}
	return buo
}

// AddSn4g adds u to the "sn_4g" field.
func (buo *BatteryUpdateOne) AddSn4g(u int64) *BatteryUpdateOne {
	buo.mutation.AddSn4g(u)
	return buo
}

// ClearSn4g clears the value of the "sn_4g" field.
func (buo *BatteryUpdateOne) ClearSn4g() *BatteryUpdateOne {
	buo.mutation.ClearSn4g()
	return buo
}

// SetIccid sets the "iccid" field.
func (buo *BatteryUpdateOne) SetIccid(s string) *BatteryUpdateOne {
	buo.mutation.SetIccid(s)
	return buo
}

// SetNillableIccid sets the "iccid" field if the given value is not nil.
func (buo *BatteryUpdateOne) SetNillableIccid(s *string) *BatteryUpdateOne {
	if s != nil {
		buo.SetIccid(*s)
	}
	return buo
}

// ClearIccid clears the value of the "iccid" field.
func (buo *BatteryUpdateOne) ClearIccid() *BatteryUpdateOne {
	buo.mutation.ClearIccid()
	return buo
}

// SetSoc sets the "soc" field.
func (buo *BatteryUpdateOne) SetSoc(u uint16) *BatteryUpdateOne {
	buo.mutation.ResetSoc()
	buo.mutation.SetSoc(u)
	return buo
}

// SetNillableSoc sets the "soc" field if the given value is not nil.
func (buo *BatteryUpdateOne) SetNillableSoc(u *uint16) *BatteryUpdateOne {
	if u != nil {
		buo.SetSoc(*u)
	}
	return buo
}

// AddSoc adds u to the "soc" field.
func (buo *BatteryUpdateOne) AddSoc(u int16) *BatteryUpdateOne {
	buo.mutation.AddSoc(u)
	return buo
}

// ClearSoc clears the value of the "soc" field.
func (buo *BatteryUpdateOne) ClearSoc() *BatteryUpdateOne {
	buo.mutation.ClearSoc()
	return buo
}

// AddHeartbeatIDs adds the "heartbeats" edge to the Heartbeat entity by IDs.
func (buo *BatteryUpdateOne) AddHeartbeatIDs(ids ...int) *BatteryUpdateOne {
	buo.mutation.AddHeartbeatIDs(ids...)
	return buo
}

// AddHeartbeats adds the "heartbeats" edges to the Heartbeat entity.
func (buo *BatteryUpdateOne) AddHeartbeats(h ...*Heartbeat) *BatteryUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return buo.AddHeartbeatIDs(ids...)
}

// AddReignIDs adds the "reigns" edge to the Reign entity by IDs.
func (buo *BatteryUpdateOne) AddReignIDs(ids ...int) *BatteryUpdateOne {
	buo.mutation.AddReignIDs(ids...)
	return buo
}

// AddReigns adds the "reigns" edges to the Reign entity.
func (buo *BatteryUpdateOne) AddReigns(r ...*Reign) *BatteryUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return buo.AddReignIDs(ids...)
}

// AddFaultLogIDs adds the "fault_log" edge to the Fault entity by IDs.
func (buo *BatteryUpdateOne) AddFaultLogIDs(ids ...int) *BatteryUpdateOne {
	buo.mutation.AddFaultLogIDs(ids...)
	return buo
}

// AddFaultLog adds the "fault_log" edges to the Fault entity.
func (buo *BatteryUpdateOne) AddFaultLog(f ...*Fault) *BatteryUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return buo.AddFaultLogIDs(ids...)
}

// Mutation returns the BatteryMutation object of the builder.
func (buo *BatteryUpdateOne) Mutation() *BatteryMutation {
	return buo.mutation
}

// ClearHeartbeats clears all "heartbeats" edges to the Heartbeat entity.
func (buo *BatteryUpdateOne) ClearHeartbeats() *BatteryUpdateOne {
	buo.mutation.ClearHeartbeats()
	return buo
}

// RemoveHeartbeatIDs removes the "heartbeats" edge to Heartbeat entities by IDs.
func (buo *BatteryUpdateOne) RemoveHeartbeatIDs(ids ...int) *BatteryUpdateOne {
	buo.mutation.RemoveHeartbeatIDs(ids...)
	return buo
}

// RemoveHeartbeats removes "heartbeats" edges to Heartbeat entities.
func (buo *BatteryUpdateOne) RemoveHeartbeats(h ...*Heartbeat) *BatteryUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return buo.RemoveHeartbeatIDs(ids...)
}

// ClearReigns clears all "reigns" edges to the Reign entity.
func (buo *BatteryUpdateOne) ClearReigns() *BatteryUpdateOne {
	buo.mutation.ClearReigns()
	return buo
}

// RemoveReignIDs removes the "reigns" edge to Reign entities by IDs.
func (buo *BatteryUpdateOne) RemoveReignIDs(ids ...int) *BatteryUpdateOne {
	buo.mutation.RemoveReignIDs(ids...)
	return buo
}

// RemoveReigns removes "reigns" edges to Reign entities.
func (buo *BatteryUpdateOne) RemoveReigns(r ...*Reign) *BatteryUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return buo.RemoveReignIDs(ids...)
}

// ClearFaultLog clears all "fault_log" edges to the Fault entity.
func (buo *BatteryUpdateOne) ClearFaultLog() *BatteryUpdateOne {
	buo.mutation.ClearFaultLog()
	return buo
}

// RemoveFaultLogIDs removes the "fault_log" edge to Fault entities by IDs.
func (buo *BatteryUpdateOne) RemoveFaultLogIDs(ids ...int) *BatteryUpdateOne {
	buo.mutation.RemoveFaultLogIDs(ids...)
	return buo
}

// RemoveFaultLog removes "fault_log" edges to Fault entities.
func (buo *BatteryUpdateOne) RemoveFaultLog(f ...*Fault) *BatteryUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return buo.RemoveFaultLogIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BatteryUpdateOne) Select(field string, fields ...string) *BatteryUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Battery entity.
func (buo *BatteryUpdateOne) Save(ctx context.Context) (*Battery, error) {
	buo.defaults()
	return withHooks[*Battery, BatteryMutation](ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BatteryUpdateOne) SaveX(ctx context.Context) *Battery {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BatteryUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BatteryUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buo *BatteryUpdateOne) defaults() {
	if _, ok := buo.mutation.UpdatedAt(); !ok {
		v := battery.UpdateDefaultUpdatedAt()
		buo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (buo *BatteryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BatteryUpdateOne {
	buo.modifiers = append(buo.modifiers, modifiers...)
	return buo
}

func (buo *BatteryUpdateOne) sqlSave(ctx context.Context) (_node *Battery, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   battery.Table,
			Columns: battery.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: battery.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Battery.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, battery.FieldID)
		for _, f := range fields {
			if !battery.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != battery.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.SetField(battery.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := buo.mutation.Sn(); ok {
		_spec.SetField(battery.FieldSn, field.TypeString, value)
	}
	if value, ok := buo.mutation.SoftVersion(); ok {
		_spec.SetField(battery.FieldSoftVersion, field.TypeUint16, value)
	}
	if value, ok := buo.mutation.AddedSoftVersion(); ok {
		_spec.AddField(battery.FieldSoftVersion, field.TypeUint16, value)
	}
	if buo.mutation.SoftVersionCleared() {
		_spec.ClearField(battery.FieldSoftVersion, field.TypeUint16)
	}
	if value, ok := buo.mutation.HardVersion(); ok {
		_spec.SetField(battery.FieldHardVersion, field.TypeUint16, value)
	}
	if value, ok := buo.mutation.AddedHardVersion(); ok {
		_spec.AddField(battery.FieldHardVersion, field.TypeUint16, value)
	}
	if buo.mutation.HardVersionCleared() {
		_spec.ClearField(battery.FieldHardVersion, field.TypeUint16)
	}
	if value, ok := buo.mutation.Soft4gVersion(); ok {
		_spec.SetField(battery.FieldSoft4gVersion, field.TypeUint16, value)
	}
	if value, ok := buo.mutation.AddedSoft4gVersion(); ok {
		_spec.AddField(battery.FieldSoft4gVersion, field.TypeUint16, value)
	}
	if buo.mutation.Soft4gVersionCleared() {
		_spec.ClearField(battery.FieldSoft4gVersion, field.TypeUint16)
	}
	if value, ok := buo.mutation.Hard4gVersion(); ok {
		_spec.SetField(battery.FieldHard4gVersion, field.TypeUint16, value)
	}
	if value, ok := buo.mutation.AddedHard4gVersion(); ok {
		_spec.AddField(battery.FieldHard4gVersion, field.TypeUint16, value)
	}
	if buo.mutation.Hard4gVersionCleared() {
		_spec.ClearField(battery.FieldHard4gVersion, field.TypeUint16)
	}
	if value, ok := buo.mutation.Sn4g(); ok {
		_spec.SetField(battery.FieldSn4g, field.TypeUint64, value)
	}
	if value, ok := buo.mutation.AddedSn4g(); ok {
		_spec.AddField(battery.FieldSn4g, field.TypeUint64, value)
	}
	if buo.mutation.Sn4gCleared() {
		_spec.ClearField(battery.FieldSn4g, field.TypeUint64)
	}
	if value, ok := buo.mutation.Iccid(); ok {
		_spec.SetField(battery.FieldIccid, field.TypeString, value)
	}
	if buo.mutation.IccidCleared() {
		_spec.ClearField(battery.FieldIccid, field.TypeString)
	}
	if value, ok := buo.mutation.Soc(); ok {
		_spec.SetField(battery.FieldSoc, field.TypeUint16, value)
	}
	if value, ok := buo.mutation.AddedSoc(); ok {
		_spec.AddField(battery.FieldSoc, field.TypeUint16, value)
	}
	if buo.mutation.SocCleared() {
		_spec.ClearField(battery.FieldSoc, field.TypeUint16)
	}
	if buo.mutation.HeartbeatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   battery.HeartbeatsTable,
			Columns: []string{battery.HeartbeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: heartbeat.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedHeartbeatsIDs(); len(nodes) > 0 && !buo.mutation.HeartbeatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   battery.HeartbeatsTable,
			Columns: []string{battery.HeartbeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: heartbeat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.HeartbeatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   battery.HeartbeatsTable,
			Columns: []string{battery.HeartbeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: heartbeat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.ReignsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   battery.ReignsTable,
			Columns: []string{battery.ReignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: reign.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedReignsIDs(); len(nodes) > 0 && !buo.mutation.ReignsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   battery.ReignsTable,
			Columns: []string{battery.ReignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: reign.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.ReignsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   battery.ReignsTable,
			Columns: []string{battery.ReignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: reign.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.FaultLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   battery.FaultLogTable,
			Columns: []string{battery.FaultLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fault.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedFaultLogIDs(); len(nodes) > 0 && !buo.mutation.FaultLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   battery.FaultLogTable,
			Columns: []string{battery.FaultLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fault.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.FaultLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   battery.FaultLogTable,
			Columns: []string{battery.FaultLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fault.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(buo.modifiers...)
	_node = &Battery{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{battery.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
