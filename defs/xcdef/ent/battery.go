// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/adapter/defs/xcdef/ent/battery"
)

// Battery is the model entity for the Battery schema.
type Battery struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 电池编号
	Sn string `json:"sn,omitempty"`
	// BMS软件版本
	SoftVersion *uint16 `json:"soft_version,omitempty"`
	// BMS硬件版本
	HardVersion *uint16 `json:"hard_version,omitempty"`
	// 4G软件版本
	Soft4gVersion *uint16 `json:"soft_4g_version,omitempty"`
	// 4G硬件版本
	Hard4gVersion *uint16 `json:"hard_4g_version,omitempty"`
	// 4G板SN
	Sn4g *uint64 `json:"sn_4g,omitempty"`
	// SIM卡ICCID
	Iccid *string `json:"iccid,omitempty"`
	// 电池设计容量
	Soc *uint16 `json:"soc,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BatteryQuery when eager-loading is set.
	Edges BatteryEdges `json:"edges"`
}

// BatteryEdges holds the relations/edges for other nodes in the graph.
type BatteryEdges struct {
	// 心跳列表
	Heartbeats []*Heartbeat `json:"heartbeats,omitempty"`
	// 在位列表
	Reigns []*Reign `json:"reigns,omitempty"`
	// 故障列表
	FaultLog []*Fault `json:"fault_log,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes     [3]bool
	namedHeartbeats map[string][]*Heartbeat
	namedReigns     map[string][]*Reign
	namedFaultLog   map[string][]*Fault
}

// HeartbeatsOrErr returns the Heartbeats value or an error if the edge
// was not loaded in eager-loading.
func (e BatteryEdges) HeartbeatsOrErr() ([]*Heartbeat, error) {
	if e.loadedTypes[0] {
		return e.Heartbeats, nil
	}
	return nil, &NotLoadedError{edge: "heartbeats"}
}

// ReignsOrErr returns the Reigns value or an error if the edge
// was not loaded in eager-loading.
func (e BatteryEdges) ReignsOrErr() ([]*Reign, error) {
	if e.loadedTypes[1] {
		return e.Reigns, nil
	}
	return nil, &NotLoadedError{edge: "reigns"}
}

// FaultLogOrErr returns the FaultLog value or an error if the edge
// was not loaded in eager-loading.
func (e BatteryEdges) FaultLogOrErr() ([]*Fault, error) {
	if e.loadedTypes[2] {
		return e.FaultLog, nil
	}
	return nil, &NotLoadedError{edge: "fault_log"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Battery) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case battery.FieldID, battery.FieldSoftVersion, battery.FieldHardVersion, battery.FieldSoft4gVersion, battery.FieldHard4gVersion, battery.FieldSn4g, battery.FieldSoc:
			values[i] = new(sql.NullInt64)
		case battery.FieldSn, battery.FieldIccid:
			values[i] = new(sql.NullString)
		case battery.FieldCreatedAt, battery.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Battery", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Battery fields.
func (b *Battery) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case battery.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case battery.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				b.CreatedAt = value.Time
			}
		case battery.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				b.UpdatedAt = value.Time
			}
		case battery.FieldSn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sn", values[i])
			} else if value.Valid {
				b.Sn = value.String
			}
		case battery.FieldSoftVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field soft_version", values[i])
			} else if value.Valid {
				b.SoftVersion = new(uint16)
				*b.SoftVersion = uint16(value.Int64)
			}
		case battery.FieldHardVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field hard_version", values[i])
			} else if value.Valid {
				b.HardVersion = new(uint16)
				*b.HardVersion = uint16(value.Int64)
			}
		case battery.FieldSoft4gVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field soft_4g_version", values[i])
			} else if value.Valid {
				b.Soft4gVersion = new(uint16)
				*b.Soft4gVersion = uint16(value.Int64)
			}
		case battery.FieldHard4gVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field hard_4g_version", values[i])
			} else if value.Valid {
				b.Hard4gVersion = new(uint16)
				*b.Hard4gVersion = uint16(value.Int64)
			}
		case battery.FieldSn4g:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sn_4g", values[i])
			} else if value.Valid {
				b.Sn4g = new(uint64)
				*b.Sn4g = uint64(value.Int64)
			}
		case battery.FieldIccid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field iccid", values[i])
			} else if value.Valid {
				b.Iccid = new(string)
				*b.Iccid = value.String
			}
		case battery.FieldSoc:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field soc", values[i])
			} else if value.Valid {
				b.Soc = new(uint16)
				*b.Soc = uint16(value.Int64)
			}
		}
	}
	return nil
}

// QueryHeartbeats queries the "heartbeats" edge of the Battery entity.
func (b *Battery) QueryHeartbeats() *HeartbeatQuery {
	return NewBatteryClient(b.config).QueryHeartbeats(b)
}

// QueryReigns queries the "reigns" edge of the Battery entity.
func (b *Battery) QueryReigns() *ReignQuery {
	return NewBatteryClient(b.config).QueryReigns(b)
}

// QueryFaultLog queries the "fault_log" edge of the Battery entity.
func (b *Battery) QueryFaultLog() *FaultQuery {
	return NewBatteryClient(b.config).QueryFaultLog(b)
}

// Update returns a builder for updating this Battery.
// Note that you need to call Battery.Unwrap() before calling this method if this Battery
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Battery) Update() *BatteryUpdateOne {
	return NewBatteryClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Battery entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Battery) Unwrap() *Battery {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Battery is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Battery) String() string {
	var builder strings.Builder
	builder.WriteString("Battery(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("created_at=")
	builder.WriteString(b.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(b.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("sn=")
	builder.WriteString(b.Sn)
	builder.WriteString(", ")
	if v := b.SoftVersion; v != nil {
		builder.WriteString("soft_version=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := b.HardVersion; v != nil {
		builder.WriteString("hard_version=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := b.Soft4gVersion; v != nil {
		builder.WriteString("soft_4g_version=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := b.Hard4gVersion; v != nil {
		builder.WriteString("hard_4g_version=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := b.Sn4g; v != nil {
		builder.WriteString("sn_4g=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := b.Iccid; v != nil {
		builder.WriteString("iccid=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := b.Soc; v != nil {
		builder.WriteString("soc=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedHeartbeats returns the Heartbeats named value or an error if the edge was not
// loaded in eager-loading with this name.
func (b *Battery) NamedHeartbeats(name string) ([]*Heartbeat, error) {
	if b.Edges.namedHeartbeats == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := b.Edges.namedHeartbeats[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (b *Battery) appendNamedHeartbeats(name string, edges ...*Heartbeat) {
	if b.Edges.namedHeartbeats == nil {
		b.Edges.namedHeartbeats = make(map[string][]*Heartbeat)
	}
	if len(edges) == 0 {
		b.Edges.namedHeartbeats[name] = []*Heartbeat{}
	} else {
		b.Edges.namedHeartbeats[name] = append(b.Edges.namedHeartbeats[name], edges...)
	}
}

// NamedReigns returns the Reigns named value or an error if the edge was not
// loaded in eager-loading with this name.
func (b *Battery) NamedReigns(name string) ([]*Reign, error) {
	if b.Edges.namedReigns == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := b.Edges.namedReigns[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (b *Battery) appendNamedReigns(name string, edges ...*Reign) {
	if b.Edges.namedReigns == nil {
		b.Edges.namedReigns = make(map[string][]*Reign)
	}
	if len(edges) == 0 {
		b.Edges.namedReigns[name] = []*Reign{}
	} else {
		b.Edges.namedReigns[name] = append(b.Edges.namedReigns[name], edges...)
	}
}

// NamedFaultLog returns the FaultLog named value or an error if the edge was not
// loaded in eager-loading with this name.
func (b *Battery) NamedFaultLog(name string) ([]*Fault, error) {
	if b.Edges.namedFaultLog == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := b.Edges.namedFaultLog[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (b *Battery) appendNamedFaultLog(name string, edges ...*Fault) {
	if b.Edges.namedFaultLog == nil {
		b.Edges.namedFaultLog = make(map[string][]*Fault)
	}
	if len(edges) == 0 {
		b.Edges.namedFaultLog[name] = []*Fault{}
	} else {
		b.Edges.namedFaultLog[name] = append(b.Edges.namedFaultLog[name], edges...)
	}
}

// Batteries is a parsable slice of Battery.
type Batteries []*Battery

func (b Batteries) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
