// Code generated by ent, DO NOT EDIT.

package battery

import (
	"time"
)

const (
	// Label holds the string label denoting the battery type in the database.
	Label = "battery"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldSn holds the string denoting the sn field in the database.
	FieldSn = "sn"
	// FieldSoftVersion holds the string denoting the soft_version field in the database.
	FieldSoftVersion = "soft_version"
	// FieldHardVersion holds the string denoting the hard_version field in the database.
	FieldHardVersion = "hard_version"
	// FieldSoft4gVersion holds the string denoting the soft_4g_version field in the database.
	FieldSoft4gVersion = "soft_4g_version"
	// FieldHard4gVersion holds the string denoting the hard_4g_version field in the database.
	FieldHard4gVersion = "hard_4g_version"
	// FieldSn4g holds the string denoting the sn_4g field in the database.
	FieldSn4g = "sn_4g"
	// FieldIccid holds the string denoting the iccid field in the database.
	FieldIccid = "iccid"
	// FieldSoc holds the string denoting the soc field in the database.
	FieldSoc = "soc"
	// EdgeHeartbeats holds the string denoting the heartbeats edge name in mutations.
	EdgeHeartbeats = "heartbeats"
	// EdgeReigns holds the string denoting the reigns edge name in mutations.
	EdgeReigns = "reigns"
	// Table holds the table name of the battery in the database.
	Table = "battery"
	// HeartbeatsTable is the table that holds the heartbeats relation/edge.
	HeartbeatsTable = "heartbeat"
	// HeartbeatsInverseTable is the table name for the Heartbeat entity.
	// It exists in this package in order to avoid circular dependency with the "heartbeat" package.
	HeartbeatsInverseTable = "heartbeat"
	// HeartbeatsColumn is the table column denoting the heartbeats relation/edge.
	HeartbeatsColumn = "battery_id"
	// ReignsTable is the table that holds the reigns relation/edge.
	ReignsTable = "reign"
	// ReignsInverseTable is the table name for the Reign entity.
	// It exists in this package in order to avoid circular dependency with the "reign" package.
	ReignsInverseTable = "reign"
	// ReignsColumn is the table column denoting the reigns relation/edge.
	ReignsColumn = "battery_id"
)

// Columns holds all SQL columns for battery fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldSn,
	FieldSoftVersion,
	FieldHardVersion,
	FieldSoft4gVersion,
	FieldHard4gVersion,
	FieldSn4g,
	FieldIccid,
	FieldSoc,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)
