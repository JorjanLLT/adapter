// Code generated by ent, DO NOT EDIT.

package battery

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/adapter/defs/xcdef/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Battery {
	return predicate.Battery(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Battery {
	return predicate.Battery(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Battery {
	return predicate.Battery(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Battery {
	return predicate.Battery(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Battery {
	return predicate.Battery(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Battery {
	return predicate.Battery(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Battery {
	return predicate.Battery(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Battery {
	return predicate.Battery(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Battery {
	return predicate.Battery(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Battery {
	return predicate.Battery(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Battery {
	return predicate.Battery(sql.FieldEQ(FieldUpdatedAt, v))
}

// Sn applies equality check predicate on the "sn" field. It's identical to SnEQ.
func Sn(v string) predicate.Battery {
	return predicate.Battery(sql.FieldEQ(FieldSn, v))
}

// SoftVersion applies equality check predicate on the "soft_version" field. It's identical to SoftVersionEQ.
func SoftVersion(v uint16) predicate.Battery {
	return predicate.Battery(sql.FieldEQ(FieldSoftVersion, v))
}

// HardVersion applies equality check predicate on the "hard_version" field. It's identical to HardVersionEQ.
func HardVersion(v uint16) predicate.Battery {
	return predicate.Battery(sql.FieldEQ(FieldHardVersion, v))
}

// Soft4gVersion applies equality check predicate on the "soft_4g_version" field. It's identical to Soft4gVersionEQ.
func Soft4gVersion(v uint16) predicate.Battery {
	return predicate.Battery(sql.FieldEQ(FieldSoft4gVersion, v))
}

// Hard4gVersion applies equality check predicate on the "hard_4g_version" field. It's identical to Hard4gVersionEQ.
func Hard4gVersion(v uint16) predicate.Battery {
	return predicate.Battery(sql.FieldEQ(FieldHard4gVersion, v))
}

// Sn4g applies equality check predicate on the "sn_4g" field. It's identical to Sn4gEQ.
func Sn4g(v uint64) predicate.Battery {
	return predicate.Battery(sql.FieldEQ(FieldSn4g, v))
}

// Iccid applies equality check predicate on the "iccid" field. It's identical to IccidEQ.
func Iccid(v string) predicate.Battery {
	return predicate.Battery(sql.FieldEQ(FieldIccid, v))
}

// Soc applies equality check predicate on the "soc" field. It's identical to SocEQ.
func Soc(v uint16) predicate.Battery {
	return predicate.Battery(sql.FieldEQ(FieldSoc, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Battery {
	return predicate.Battery(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Battery {
	return predicate.Battery(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Battery {
	return predicate.Battery(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Battery {
	return predicate.Battery(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Battery {
	return predicate.Battery(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Battery {
	return predicate.Battery(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Battery {
	return predicate.Battery(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Battery {
	return predicate.Battery(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Battery {
	return predicate.Battery(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Battery {
	return predicate.Battery(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Battery {
	return predicate.Battery(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Battery {
	return predicate.Battery(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Battery {
	return predicate.Battery(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Battery {
	return predicate.Battery(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Battery {
	return predicate.Battery(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Battery {
	return predicate.Battery(sql.FieldLTE(FieldUpdatedAt, v))
}

// SnEQ applies the EQ predicate on the "sn" field.
func SnEQ(v string) predicate.Battery {
	return predicate.Battery(sql.FieldEQ(FieldSn, v))
}

// SnNEQ applies the NEQ predicate on the "sn" field.
func SnNEQ(v string) predicate.Battery {
	return predicate.Battery(sql.FieldNEQ(FieldSn, v))
}

// SnIn applies the In predicate on the "sn" field.
func SnIn(vs ...string) predicate.Battery {
	return predicate.Battery(sql.FieldIn(FieldSn, vs...))
}

// SnNotIn applies the NotIn predicate on the "sn" field.
func SnNotIn(vs ...string) predicate.Battery {
	return predicate.Battery(sql.FieldNotIn(FieldSn, vs...))
}

// SnGT applies the GT predicate on the "sn" field.
func SnGT(v string) predicate.Battery {
	return predicate.Battery(sql.FieldGT(FieldSn, v))
}

// SnGTE applies the GTE predicate on the "sn" field.
func SnGTE(v string) predicate.Battery {
	return predicate.Battery(sql.FieldGTE(FieldSn, v))
}

// SnLT applies the LT predicate on the "sn" field.
func SnLT(v string) predicate.Battery {
	return predicate.Battery(sql.FieldLT(FieldSn, v))
}

// SnLTE applies the LTE predicate on the "sn" field.
func SnLTE(v string) predicate.Battery {
	return predicate.Battery(sql.FieldLTE(FieldSn, v))
}

// SnContains applies the Contains predicate on the "sn" field.
func SnContains(v string) predicate.Battery {
	return predicate.Battery(sql.FieldContains(FieldSn, v))
}

// SnHasPrefix applies the HasPrefix predicate on the "sn" field.
func SnHasPrefix(v string) predicate.Battery {
	return predicate.Battery(sql.FieldHasPrefix(FieldSn, v))
}

// SnHasSuffix applies the HasSuffix predicate on the "sn" field.
func SnHasSuffix(v string) predicate.Battery {
	return predicate.Battery(sql.FieldHasSuffix(FieldSn, v))
}

// SnEqualFold applies the EqualFold predicate on the "sn" field.
func SnEqualFold(v string) predicate.Battery {
	return predicate.Battery(sql.FieldEqualFold(FieldSn, v))
}

// SnContainsFold applies the ContainsFold predicate on the "sn" field.
func SnContainsFold(v string) predicate.Battery {
	return predicate.Battery(sql.FieldContainsFold(FieldSn, v))
}

// SoftVersionEQ applies the EQ predicate on the "soft_version" field.
func SoftVersionEQ(v uint16) predicate.Battery {
	return predicate.Battery(sql.FieldEQ(FieldSoftVersion, v))
}

// SoftVersionNEQ applies the NEQ predicate on the "soft_version" field.
func SoftVersionNEQ(v uint16) predicate.Battery {
	return predicate.Battery(sql.FieldNEQ(FieldSoftVersion, v))
}

// SoftVersionIn applies the In predicate on the "soft_version" field.
func SoftVersionIn(vs ...uint16) predicate.Battery {
	return predicate.Battery(sql.FieldIn(FieldSoftVersion, vs...))
}

// SoftVersionNotIn applies the NotIn predicate on the "soft_version" field.
func SoftVersionNotIn(vs ...uint16) predicate.Battery {
	return predicate.Battery(sql.FieldNotIn(FieldSoftVersion, vs...))
}

// SoftVersionGT applies the GT predicate on the "soft_version" field.
func SoftVersionGT(v uint16) predicate.Battery {
	return predicate.Battery(sql.FieldGT(FieldSoftVersion, v))
}

// SoftVersionGTE applies the GTE predicate on the "soft_version" field.
func SoftVersionGTE(v uint16) predicate.Battery {
	return predicate.Battery(sql.FieldGTE(FieldSoftVersion, v))
}

// SoftVersionLT applies the LT predicate on the "soft_version" field.
func SoftVersionLT(v uint16) predicate.Battery {
	return predicate.Battery(sql.FieldLT(FieldSoftVersion, v))
}

// SoftVersionLTE applies the LTE predicate on the "soft_version" field.
func SoftVersionLTE(v uint16) predicate.Battery {
	return predicate.Battery(sql.FieldLTE(FieldSoftVersion, v))
}

// SoftVersionIsNil applies the IsNil predicate on the "soft_version" field.
func SoftVersionIsNil() predicate.Battery {
	return predicate.Battery(sql.FieldIsNull(FieldSoftVersion))
}

// SoftVersionNotNil applies the NotNil predicate on the "soft_version" field.
func SoftVersionNotNil() predicate.Battery {
	return predicate.Battery(sql.FieldNotNull(FieldSoftVersion))
}

// HardVersionEQ applies the EQ predicate on the "hard_version" field.
func HardVersionEQ(v uint16) predicate.Battery {
	return predicate.Battery(sql.FieldEQ(FieldHardVersion, v))
}

// HardVersionNEQ applies the NEQ predicate on the "hard_version" field.
func HardVersionNEQ(v uint16) predicate.Battery {
	return predicate.Battery(sql.FieldNEQ(FieldHardVersion, v))
}

// HardVersionIn applies the In predicate on the "hard_version" field.
func HardVersionIn(vs ...uint16) predicate.Battery {
	return predicate.Battery(sql.FieldIn(FieldHardVersion, vs...))
}

// HardVersionNotIn applies the NotIn predicate on the "hard_version" field.
func HardVersionNotIn(vs ...uint16) predicate.Battery {
	return predicate.Battery(sql.FieldNotIn(FieldHardVersion, vs...))
}

// HardVersionGT applies the GT predicate on the "hard_version" field.
func HardVersionGT(v uint16) predicate.Battery {
	return predicate.Battery(sql.FieldGT(FieldHardVersion, v))
}

// HardVersionGTE applies the GTE predicate on the "hard_version" field.
func HardVersionGTE(v uint16) predicate.Battery {
	return predicate.Battery(sql.FieldGTE(FieldHardVersion, v))
}

// HardVersionLT applies the LT predicate on the "hard_version" field.
func HardVersionLT(v uint16) predicate.Battery {
	return predicate.Battery(sql.FieldLT(FieldHardVersion, v))
}

// HardVersionLTE applies the LTE predicate on the "hard_version" field.
func HardVersionLTE(v uint16) predicate.Battery {
	return predicate.Battery(sql.FieldLTE(FieldHardVersion, v))
}

// HardVersionIsNil applies the IsNil predicate on the "hard_version" field.
func HardVersionIsNil() predicate.Battery {
	return predicate.Battery(sql.FieldIsNull(FieldHardVersion))
}

// HardVersionNotNil applies the NotNil predicate on the "hard_version" field.
func HardVersionNotNil() predicate.Battery {
	return predicate.Battery(sql.FieldNotNull(FieldHardVersion))
}

// Soft4gVersionEQ applies the EQ predicate on the "soft_4g_version" field.
func Soft4gVersionEQ(v uint16) predicate.Battery {
	return predicate.Battery(sql.FieldEQ(FieldSoft4gVersion, v))
}

// Soft4gVersionNEQ applies the NEQ predicate on the "soft_4g_version" field.
func Soft4gVersionNEQ(v uint16) predicate.Battery {
	return predicate.Battery(sql.FieldNEQ(FieldSoft4gVersion, v))
}

// Soft4gVersionIn applies the In predicate on the "soft_4g_version" field.
func Soft4gVersionIn(vs ...uint16) predicate.Battery {
	return predicate.Battery(sql.FieldIn(FieldSoft4gVersion, vs...))
}

// Soft4gVersionNotIn applies the NotIn predicate on the "soft_4g_version" field.
func Soft4gVersionNotIn(vs ...uint16) predicate.Battery {
	return predicate.Battery(sql.FieldNotIn(FieldSoft4gVersion, vs...))
}

// Soft4gVersionGT applies the GT predicate on the "soft_4g_version" field.
func Soft4gVersionGT(v uint16) predicate.Battery {
	return predicate.Battery(sql.FieldGT(FieldSoft4gVersion, v))
}

// Soft4gVersionGTE applies the GTE predicate on the "soft_4g_version" field.
func Soft4gVersionGTE(v uint16) predicate.Battery {
	return predicate.Battery(sql.FieldGTE(FieldSoft4gVersion, v))
}

// Soft4gVersionLT applies the LT predicate on the "soft_4g_version" field.
func Soft4gVersionLT(v uint16) predicate.Battery {
	return predicate.Battery(sql.FieldLT(FieldSoft4gVersion, v))
}

// Soft4gVersionLTE applies the LTE predicate on the "soft_4g_version" field.
func Soft4gVersionLTE(v uint16) predicate.Battery {
	return predicate.Battery(sql.FieldLTE(FieldSoft4gVersion, v))
}

// Soft4gVersionIsNil applies the IsNil predicate on the "soft_4g_version" field.
func Soft4gVersionIsNil() predicate.Battery {
	return predicate.Battery(sql.FieldIsNull(FieldSoft4gVersion))
}

// Soft4gVersionNotNil applies the NotNil predicate on the "soft_4g_version" field.
func Soft4gVersionNotNil() predicate.Battery {
	return predicate.Battery(sql.FieldNotNull(FieldSoft4gVersion))
}

// Hard4gVersionEQ applies the EQ predicate on the "hard_4g_version" field.
func Hard4gVersionEQ(v uint16) predicate.Battery {
	return predicate.Battery(sql.FieldEQ(FieldHard4gVersion, v))
}

// Hard4gVersionNEQ applies the NEQ predicate on the "hard_4g_version" field.
func Hard4gVersionNEQ(v uint16) predicate.Battery {
	return predicate.Battery(sql.FieldNEQ(FieldHard4gVersion, v))
}

// Hard4gVersionIn applies the In predicate on the "hard_4g_version" field.
func Hard4gVersionIn(vs ...uint16) predicate.Battery {
	return predicate.Battery(sql.FieldIn(FieldHard4gVersion, vs...))
}

// Hard4gVersionNotIn applies the NotIn predicate on the "hard_4g_version" field.
func Hard4gVersionNotIn(vs ...uint16) predicate.Battery {
	return predicate.Battery(sql.FieldNotIn(FieldHard4gVersion, vs...))
}

// Hard4gVersionGT applies the GT predicate on the "hard_4g_version" field.
func Hard4gVersionGT(v uint16) predicate.Battery {
	return predicate.Battery(sql.FieldGT(FieldHard4gVersion, v))
}

// Hard4gVersionGTE applies the GTE predicate on the "hard_4g_version" field.
func Hard4gVersionGTE(v uint16) predicate.Battery {
	return predicate.Battery(sql.FieldGTE(FieldHard4gVersion, v))
}

// Hard4gVersionLT applies the LT predicate on the "hard_4g_version" field.
func Hard4gVersionLT(v uint16) predicate.Battery {
	return predicate.Battery(sql.FieldLT(FieldHard4gVersion, v))
}

// Hard4gVersionLTE applies the LTE predicate on the "hard_4g_version" field.
func Hard4gVersionLTE(v uint16) predicate.Battery {
	return predicate.Battery(sql.FieldLTE(FieldHard4gVersion, v))
}

// Hard4gVersionIsNil applies the IsNil predicate on the "hard_4g_version" field.
func Hard4gVersionIsNil() predicate.Battery {
	return predicate.Battery(sql.FieldIsNull(FieldHard4gVersion))
}

// Hard4gVersionNotNil applies the NotNil predicate on the "hard_4g_version" field.
func Hard4gVersionNotNil() predicate.Battery {
	return predicate.Battery(sql.FieldNotNull(FieldHard4gVersion))
}

// Sn4gEQ applies the EQ predicate on the "sn_4g" field.
func Sn4gEQ(v uint64) predicate.Battery {
	return predicate.Battery(sql.FieldEQ(FieldSn4g, v))
}

// Sn4gNEQ applies the NEQ predicate on the "sn_4g" field.
func Sn4gNEQ(v uint64) predicate.Battery {
	return predicate.Battery(sql.FieldNEQ(FieldSn4g, v))
}

// Sn4gIn applies the In predicate on the "sn_4g" field.
func Sn4gIn(vs ...uint64) predicate.Battery {
	return predicate.Battery(sql.FieldIn(FieldSn4g, vs...))
}

// Sn4gNotIn applies the NotIn predicate on the "sn_4g" field.
func Sn4gNotIn(vs ...uint64) predicate.Battery {
	return predicate.Battery(sql.FieldNotIn(FieldSn4g, vs...))
}

// Sn4gGT applies the GT predicate on the "sn_4g" field.
func Sn4gGT(v uint64) predicate.Battery {
	return predicate.Battery(sql.FieldGT(FieldSn4g, v))
}

// Sn4gGTE applies the GTE predicate on the "sn_4g" field.
func Sn4gGTE(v uint64) predicate.Battery {
	return predicate.Battery(sql.FieldGTE(FieldSn4g, v))
}

// Sn4gLT applies the LT predicate on the "sn_4g" field.
func Sn4gLT(v uint64) predicate.Battery {
	return predicate.Battery(sql.FieldLT(FieldSn4g, v))
}

// Sn4gLTE applies the LTE predicate on the "sn_4g" field.
func Sn4gLTE(v uint64) predicate.Battery {
	return predicate.Battery(sql.FieldLTE(FieldSn4g, v))
}

// Sn4gIsNil applies the IsNil predicate on the "sn_4g" field.
func Sn4gIsNil() predicate.Battery {
	return predicate.Battery(sql.FieldIsNull(FieldSn4g))
}

// Sn4gNotNil applies the NotNil predicate on the "sn_4g" field.
func Sn4gNotNil() predicate.Battery {
	return predicate.Battery(sql.FieldNotNull(FieldSn4g))
}

// IccidEQ applies the EQ predicate on the "iccid" field.
func IccidEQ(v string) predicate.Battery {
	return predicate.Battery(sql.FieldEQ(FieldIccid, v))
}

// IccidNEQ applies the NEQ predicate on the "iccid" field.
func IccidNEQ(v string) predicate.Battery {
	return predicate.Battery(sql.FieldNEQ(FieldIccid, v))
}

// IccidIn applies the In predicate on the "iccid" field.
func IccidIn(vs ...string) predicate.Battery {
	return predicate.Battery(sql.FieldIn(FieldIccid, vs...))
}

// IccidNotIn applies the NotIn predicate on the "iccid" field.
func IccidNotIn(vs ...string) predicate.Battery {
	return predicate.Battery(sql.FieldNotIn(FieldIccid, vs...))
}

// IccidGT applies the GT predicate on the "iccid" field.
func IccidGT(v string) predicate.Battery {
	return predicate.Battery(sql.FieldGT(FieldIccid, v))
}

// IccidGTE applies the GTE predicate on the "iccid" field.
func IccidGTE(v string) predicate.Battery {
	return predicate.Battery(sql.FieldGTE(FieldIccid, v))
}

// IccidLT applies the LT predicate on the "iccid" field.
func IccidLT(v string) predicate.Battery {
	return predicate.Battery(sql.FieldLT(FieldIccid, v))
}

// IccidLTE applies the LTE predicate on the "iccid" field.
func IccidLTE(v string) predicate.Battery {
	return predicate.Battery(sql.FieldLTE(FieldIccid, v))
}

// IccidContains applies the Contains predicate on the "iccid" field.
func IccidContains(v string) predicate.Battery {
	return predicate.Battery(sql.FieldContains(FieldIccid, v))
}

// IccidHasPrefix applies the HasPrefix predicate on the "iccid" field.
func IccidHasPrefix(v string) predicate.Battery {
	return predicate.Battery(sql.FieldHasPrefix(FieldIccid, v))
}

// IccidHasSuffix applies the HasSuffix predicate on the "iccid" field.
func IccidHasSuffix(v string) predicate.Battery {
	return predicate.Battery(sql.FieldHasSuffix(FieldIccid, v))
}

// IccidIsNil applies the IsNil predicate on the "iccid" field.
func IccidIsNil() predicate.Battery {
	return predicate.Battery(sql.FieldIsNull(FieldIccid))
}

// IccidNotNil applies the NotNil predicate on the "iccid" field.
func IccidNotNil() predicate.Battery {
	return predicate.Battery(sql.FieldNotNull(FieldIccid))
}

// IccidEqualFold applies the EqualFold predicate on the "iccid" field.
func IccidEqualFold(v string) predicate.Battery {
	return predicate.Battery(sql.FieldEqualFold(FieldIccid, v))
}

// IccidContainsFold applies the ContainsFold predicate on the "iccid" field.
func IccidContainsFold(v string) predicate.Battery {
	return predicate.Battery(sql.FieldContainsFold(FieldIccid, v))
}

// SocEQ applies the EQ predicate on the "soc" field.
func SocEQ(v uint16) predicate.Battery {
	return predicate.Battery(sql.FieldEQ(FieldSoc, v))
}

// SocNEQ applies the NEQ predicate on the "soc" field.
func SocNEQ(v uint16) predicate.Battery {
	return predicate.Battery(sql.FieldNEQ(FieldSoc, v))
}

// SocIn applies the In predicate on the "soc" field.
func SocIn(vs ...uint16) predicate.Battery {
	return predicate.Battery(sql.FieldIn(FieldSoc, vs...))
}

// SocNotIn applies the NotIn predicate on the "soc" field.
func SocNotIn(vs ...uint16) predicate.Battery {
	return predicate.Battery(sql.FieldNotIn(FieldSoc, vs...))
}

// SocGT applies the GT predicate on the "soc" field.
func SocGT(v uint16) predicate.Battery {
	return predicate.Battery(sql.FieldGT(FieldSoc, v))
}

// SocGTE applies the GTE predicate on the "soc" field.
func SocGTE(v uint16) predicate.Battery {
	return predicate.Battery(sql.FieldGTE(FieldSoc, v))
}

// SocLT applies the LT predicate on the "soc" field.
func SocLT(v uint16) predicate.Battery {
	return predicate.Battery(sql.FieldLT(FieldSoc, v))
}

// SocLTE applies the LTE predicate on the "soc" field.
func SocLTE(v uint16) predicate.Battery {
	return predicate.Battery(sql.FieldLTE(FieldSoc, v))
}

// SocIsNil applies the IsNil predicate on the "soc" field.
func SocIsNil() predicate.Battery {
	return predicate.Battery(sql.FieldIsNull(FieldSoc))
}

// SocNotNil applies the NotNil predicate on the "soc" field.
func SocNotNil() predicate.Battery {
	return predicate.Battery(sql.FieldNotNull(FieldSoc))
}

// HasHeartbeats applies the HasEdge predicate on the "heartbeats" edge.
func HasHeartbeats() predicate.Battery {
	return predicate.Battery(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HeartbeatsTable, HeartbeatsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHeartbeatsWith applies the HasEdge predicate on the "heartbeats" edge with a given conditions (other predicates).
func HasHeartbeatsWith(preds ...predicate.Heartbeat) predicate.Battery {
	return predicate.Battery(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HeartbeatsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HeartbeatsTable, HeartbeatsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReigns applies the HasEdge predicate on the "reigns" edge.
func HasReigns() predicate.Battery {
	return predicate.Battery(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReignsTable, ReignsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReignsWith applies the HasEdge predicate on the "reigns" edge with a given conditions (other predicates).
func HasReignsWith(preds ...predicate.Reign) predicate.Battery {
	return predicate.Battery(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReignsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReignsTable, ReignsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFaultLog applies the HasEdge predicate on the "fault_log" edge.
func HasFaultLog() predicate.Battery {
	return predicate.Battery(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FaultLogTable, FaultLogColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFaultLogWith applies the HasEdge predicate on the "fault_log" edge with a given conditions (other predicates).
func HasFaultLogWith(preds ...predicate.Fault) predicate.Battery {
	return predicate.Battery(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FaultLogInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FaultLogTable, FaultLogColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Battery) predicate.Battery {
	return predicate.Battery(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Battery) predicate.Battery {
	return predicate.Battery(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Battery) predicate.Battery {
	return predicate.Battery(func(s *sql.Selector) {
		p(s.Not())
	})
}
