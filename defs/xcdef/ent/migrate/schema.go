// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// BatteryColumns holds the columns for the "battery" table.
	BatteryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "sn", Type: field.TypeString, Unique: true, Comment: "电池编号"},
		{Name: "soft_version", Type: field.TypeUint16, Nullable: true, Comment: "BMS软件版本"},
		{Name: "hard_version", Type: field.TypeUint16, Nullable: true, Comment: "BMS硬件版本"},
		{Name: "soft_4g_version", Type: field.TypeUint16, Nullable: true, Comment: "4G软件版本"},
		{Name: "hard_4g_version", Type: field.TypeUint16, Nullable: true, Comment: "4G硬件版本"},
		{Name: "sn_4g", Type: field.TypeUint64, Nullable: true, Comment: "4G板SN"},
		{Name: "iccid", Type: field.TypeString, Nullable: true, Comment: "SIM卡ICCID"},
		{Name: "soc", Type: field.TypeUint16, Nullable: true, Comment: "电池设计容量"},
	}
	// BatteryTable holds the schema information for the "battery" table.
	BatteryTable = &schema.Table{
		Name:       "battery",
		Columns:    BatteryColumns,
		PrimaryKey: []*schema.Column{BatteryColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "battery_created_at",
				Unique:  false,
				Columns: []*schema.Column{BatteryColumns[1]},
			},
			{
				Name:    "battery_sn",
				Unique:  false,
				Columns: []*schema.Column{BatteryColumns[3]},
				Annotation: &entsql.IndexAnnotation{
					OpClass: "gin_trgm_ops",
					Types: map[string]string{
						"postgres": "GIN",
					},
				},
			},
		},
	}
	// HeartbeatColumns holds the columns for the "heartbeat" table.
	HeartbeatColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "sn", Type: field.TypeString, Comment: "电池编号"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "voltage", Type: field.TypeFloat64, Comment: "电池总压 (V)"},
		{Name: "current", Type: field.TypeFloat64, Comment: "电流 (A, 充电为正, 放电为负)"},
		{Name: "soc", Type: field.TypeUint8, Comment: "单位1%"},
		{Name: "soh", Type: field.TypeUint8, Comment: "单位1%"},
		{Name: "in_cabinet", Type: field.TypeBool, Comment: "是否在电柜"},
		{Name: "capacity", Type: field.TypeFloat64, Comment: "剩余容量 (单位AH)"},
		{Name: "mon_max_voltage", Type: field.TypeUint16, Comment: "最大单体电压 (mV)"},
		{Name: "mon_max_voltage_pos", Type: field.TypeUint8, Comment: "最大单体电压位置 (第x串)"},
		{Name: "mon_min_voltage", Type: field.TypeUint16, Comment: "最小单体电压 (mV)"},
		{Name: "mon_min_voltage_pos", Type: field.TypeUint8, Comment: "最小单体电压位置 (第x串)"},
		{Name: "max_temp", Type: field.TypeUint16, Comment: "最大温度 (单位1℃)"},
		{Name: "min_temp", Type: field.TypeUint16, Comment: "最小温度 (单位1℃)"},
		{Name: "faults", Type: field.TypeJSON, Nullable: true, Comment: "故障列表"},
		{Name: "mos_status", Type: field.TypeJSON, Comment: "MOS状态 (Bit0表示充电, Bit1表示放电, 此字段无法判定电池是否充放电状态)"},
		{Name: "mon_voltage", Type: field.TypeJSON, Comment: "单体电压 (24个单体电压, 单位mV)"},
		{Name: "temp", Type: field.TypeJSON, Comment: "电池温度 (4个电池温度传感器, 单位1℃)"},
		{Name: "mos_temp", Type: field.TypeUint16, Comment: "MOS温度 (1个MOS温度传感器, 单位1℃)"},
		{Name: "env_temp", Type: field.TypeUint16, Comment: "MOS温度 (1个MOS温度传感器, 单位1℃)"},
		{Name: "geom", Type: field.TypeOther, Comment: "坐标", SchemaType: map[string]string{"postgres": "geometry"}},
		{Name: "gps", Type: field.TypeOther, Comment: "GPS定位状态 (0=未定位 1=GPS定位 4=LBS定位)", SchemaType: map[string]string{"postgres": "smallint"}},
		{Name: "strength", Type: field.TypeUint8, Comment: "4G通讯信号强度 (0-100 百分比形式)"},
		{Name: "cycles", Type: field.TypeUint16, Comment: "电池包循环次数 (80%累加一次)"},
		{Name: "charging_time", Type: field.TypeUint32, Comment: "本次充电时长"},
		{Name: "dis_charging_time", Type: field.TypeUint32, Comment: "本次放电时长"},
		{Name: "using_time", Type: field.TypeUint32, Comment: "本次使用时长"},
		{Name: "total_charging_time", Type: field.TypeUint32, Comment: "总充电时长"},
		{Name: "total_dis_charging_time", Type: field.TypeUint32, Comment: "总放电时长"},
		{Name: "total_using_time", Type: field.TypeUint32, Comment: "总使用时长"},
		{Name: "battery_id", Type: field.TypeInt, Comment: "电池ID"},
	}
	// HeartbeatTable holds the schema information for the "heartbeat" table.
	HeartbeatTable = &schema.Table{
		Name:       "heartbeat",
		Columns:    HeartbeatColumns,
		PrimaryKey: []*schema.Column{HeartbeatColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "heartbeat_battery_heartbeats",
				Columns:    []*schema.Column{HeartbeatColumns[31]},
				RefColumns: []*schema.Column{BatteryColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "heartbeat_created_at",
				Unique:  false,
				Columns: []*schema.Column{HeartbeatColumns[2]},
			},
			{
				Name:    "heartbeat_battery_id",
				Unique:  false,
				Columns: []*schema.Column{HeartbeatColumns[31]},
			},
			{
				Name:    "heartbeat_sn",
				Unique:  false,
				Columns: []*schema.Column{HeartbeatColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					OpClass: "gin_trgm_ops",
					Types: map[string]string{
						"postgres": "GIN",
					},
				},
			},
			{
				Name:    "heartbeat_geom",
				Unique:  false,
				Columns: []*schema.Column{HeartbeatColumns[21]},
				Annotation: &entsql.IndexAnnotation{
					Types: map[string]string{
						"postgres": "GIST",
					},
				},
			},
		},
	}
	// ReignColumns holds the columns for the "reign" table.
	ReignColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "action", Type: field.TypeOther, Comment: "动作 1:入仓 2:离仓", SchemaType: map[string]string{"postgres": "smallint"}},
		{Name: "sn", Type: field.TypeString, Comment: "电池编号"},
		{Name: "created_at", Type: field.TypeTime, Comment: "记录时间"},
		{Name: "serial", Type: field.TypeString, Comment: "电柜编号"},
		{Name: "ordinal", Type: field.TypeInt, Comment: "仓位序号"},
		{Name: "cabinet_name", Type: field.TypeString, Nullable: true, Comment: "电柜名称"},
		{Name: "remark", Type: field.TypeString, Nullable: true, Comment: "备注信息"},
		{Name: "geom", Type: field.TypeOther, Comment: "坐标", SchemaType: map[string]string{"postgres": "geometry(POINT, 4326)"}},
		{Name: "battery_id", Type: field.TypeInt, Comment: "电池ID"},
	}
	// ReignTable holds the schema information for the "reign" table.
	ReignTable = &schema.Table{
		Name:       "reign",
		Columns:    ReignColumns,
		PrimaryKey: []*schema.Column{ReignColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "reign_battery_reigns",
				Columns:    []*schema.Column{ReignColumns[9]},
				RefColumns: []*schema.Column{BatteryColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "reign_sn",
				Unique:  false,
				Columns: []*schema.Column{ReignColumns[2]},
				Annotation: &entsql.IndexAnnotation{
					OpClass: "gin_trgm_ops",
					Types: map[string]string{
						"postgres": "GIN",
					},
				},
			},
			{
				Name:    "reign_battery_id",
				Unique:  false,
				Columns: []*schema.Column{ReignColumns[9]},
			},
			{
				Name:    "reign_created_at",
				Unique:  false,
				Columns: []*schema.Column{ReignColumns[3]},
			},
			{
				Name:    "reign_serial",
				Unique:  false,
				Columns: []*schema.Column{ReignColumns[4]},
			},
			{
				Name:    "reign_geom",
				Unique:  false,
				Columns: []*schema.Column{ReignColumns[8]},
				Annotation: &entsql.IndexAnnotation{
					Types: map[string]string{
						"postgres": "GIST",
					},
				},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		BatteryTable,
		HeartbeatTable,
		ReignTable,
	}
)

func init() {
	BatteryTable.Annotation = &entsql.Annotation{
		Table: "battery",
	}
	HeartbeatTable.ForeignKeys[0].RefTable = BatteryTable
	HeartbeatTable.Annotation = &entsql.Annotation{
		Table: "heartbeat",
	}
	ReignTable.ForeignKeys[0].RefTable = BatteryTable
	ReignTable.Annotation = &entsql.Annotation{
		Table: "reign",
	}
}
