// Code generated by ent, DO NOT EDIT.

package reign

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/adapter"
	"github.com/auroraride/adapter/defs/batdef"
	"github.com/auroraride/adapter/defs/xcdef/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Reign {
	return predicate.Reign(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Reign {
	return predicate.Reign(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Reign {
	return predicate.Reign(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Reign {
	return predicate.Reign(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Reign {
	return predicate.Reign(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Reign {
	return predicate.Reign(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Reign {
	return predicate.Reign(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Reign {
	return predicate.Reign(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Reign {
	return predicate.Reign(sql.FieldLTE(FieldID, id))
}

// Action applies equality check predicate on the "action" field. It's identical to ActionEQ.
func Action(v batdef.ReignAction) predicate.Reign {
	return predicate.Reign(sql.FieldEQ(FieldAction, v))
}

// Sn applies equality check predicate on the "sn" field. It's identical to SnEQ.
func Sn(v string) predicate.Reign {
	return predicate.Reign(sql.FieldEQ(FieldSn, v))
}

// BatteryID applies equality check predicate on the "battery_id" field. It's identical to BatteryIDEQ.
func BatteryID(v int) predicate.Reign {
	return predicate.Reign(sql.FieldEQ(FieldBatteryID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Reign {
	return predicate.Reign(sql.FieldEQ(FieldCreatedAt, v))
}

// Serial applies equality check predicate on the "serial" field. It's identical to SerialEQ.
func Serial(v string) predicate.Reign {
	return predicate.Reign(sql.FieldEQ(FieldSerial, v))
}

// Ordinal applies equality check predicate on the "ordinal" field. It's identical to OrdinalEQ.
func Ordinal(v int) predicate.Reign {
	return predicate.Reign(sql.FieldEQ(FieldOrdinal, v))
}

// CabinetName applies equality check predicate on the "cabinet_name" field. It's identical to CabinetNameEQ.
func CabinetName(v string) predicate.Reign {
	return predicate.Reign(sql.FieldEQ(FieldCabinetName, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.Reign {
	return predicate.Reign(sql.FieldEQ(FieldRemark, v))
}

// Geom applies equality check predicate on the "geom" field. It's identical to GeomEQ.
func Geom(v *adapter.Geometry) predicate.Reign {
	return predicate.Reign(sql.FieldEQ(FieldGeom, v))
}

// ActionEQ applies the EQ predicate on the "action" field.
func ActionEQ(v batdef.ReignAction) predicate.Reign {
	return predicate.Reign(sql.FieldEQ(FieldAction, v))
}

// ActionNEQ applies the NEQ predicate on the "action" field.
func ActionNEQ(v batdef.ReignAction) predicate.Reign {
	return predicate.Reign(sql.FieldNEQ(FieldAction, v))
}

// ActionIn applies the In predicate on the "action" field.
func ActionIn(vs ...batdef.ReignAction) predicate.Reign {
	return predicate.Reign(sql.FieldIn(FieldAction, vs...))
}

// ActionNotIn applies the NotIn predicate on the "action" field.
func ActionNotIn(vs ...batdef.ReignAction) predicate.Reign {
	return predicate.Reign(sql.FieldNotIn(FieldAction, vs...))
}

// ActionGT applies the GT predicate on the "action" field.
func ActionGT(v batdef.ReignAction) predicate.Reign {
	return predicate.Reign(sql.FieldGT(FieldAction, v))
}

// ActionGTE applies the GTE predicate on the "action" field.
func ActionGTE(v batdef.ReignAction) predicate.Reign {
	return predicate.Reign(sql.FieldGTE(FieldAction, v))
}

// ActionLT applies the LT predicate on the "action" field.
func ActionLT(v batdef.ReignAction) predicate.Reign {
	return predicate.Reign(sql.FieldLT(FieldAction, v))
}

// ActionLTE applies the LTE predicate on the "action" field.
func ActionLTE(v batdef.ReignAction) predicate.Reign {
	return predicate.Reign(sql.FieldLTE(FieldAction, v))
}

// SnEQ applies the EQ predicate on the "sn" field.
func SnEQ(v string) predicate.Reign {
	return predicate.Reign(sql.FieldEQ(FieldSn, v))
}

// SnNEQ applies the NEQ predicate on the "sn" field.
func SnNEQ(v string) predicate.Reign {
	return predicate.Reign(sql.FieldNEQ(FieldSn, v))
}

// SnIn applies the In predicate on the "sn" field.
func SnIn(vs ...string) predicate.Reign {
	return predicate.Reign(sql.FieldIn(FieldSn, vs...))
}

// SnNotIn applies the NotIn predicate on the "sn" field.
func SnNotIn(vs ...string) predicate.Reign {
	return predicate.Reign(sql.FieldNotIn(FieldSn, vs...))
}

// SnGT applies the GT predicate on the "sn" field.
func SnGT(v string) predicate.Reign {
	return predicate.Reign(sql.FieldGT(FieldSn, v))
}

// SnGTE applies the GTE predicate on the "sn" field.
func SnGTE(v string) predicate.Reign {
	return predicate.Reign(sql.FieldGTE(FieldSn, v))
}

// SnLT applies the LT predicate on the "sn" field.
func SnLT(v string) predicate.Reign {
	return predicate.Reign(sql.FieldLT(FieldSn, v))
}

// SnLTE applies the LTE predicate on the "sn" field.
func SnLTE(v string) predicate.Reign {
	return predicate.Reign(sql.FieldLTE(FieldSn, v))
}

// SnContains applies the Contains predicate on the "sn" field.
func SnContains(v string) predicate.Reign {
	return predicate.Reign(sql.FieldContains(FieldSn, v))
}

// SnHasPrefix applies the HasPrefix predicate on the "sn" field.
func SnHasPrefix(v string) predicate.Reign {
	return predicate.Reign(sql.FieldHasPrefix(FieldSn, v))
}

// SnHasSuffix applies the HasSuffix predicate on the "sn" field.
func SnHasSuffix(v string) predicate.Reign {
	return predicate.Reign(sql.FieldHasSuffix(FieldSn, v))
}

// SnEqualFold applies the EqualFold predicate on the "sn" field.
func SnEqualFold(v string) predicate.Reign {
	return predicate.Reign(sql.FieldEqualFold(FieldSn, v))
}

// SnContainsFold applies the ContainsFold predicate on the "sn" field.
func SnContainsFold(v string) predicate.Reign {
	return predicate.Reign(sql.FieldContainsFold(FieldSn, v))
}

// BatteryIDEQ applies the EQ predicate on the "battery_id" field.
func BatteryIDEQ(v int) predicate.Reign {
	return predicate.Reign(sql.FieldEQ(FieldBatteryID, v))
}

// BatteryIDNEQ applies the NEQ predicate on the "battery_id" field.
func BatteryIDNEQ(v int) predicate.Reign {
	return predicate.Reign(sql.FieldNEQ(FieldBatteryID, v))
}

// BatteryIDIn applies the In predicate on the "battery_id" field.
func BatteryIDIn(vs ...int) predicate.Reign {
	return predicate.Reign(sql.FieldIn(FieldBatteryID, vs...))
}

// BatteryIDNotIn applies the NotIn predicate on the "battery_id" field.
func BatteryIDNotIn(vs ...int) predicate.Reign {
	return predicate.Reign(sql.FieldNotIn(FieldBatteryID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Reign {
	return predicate.Reign(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Reign {
	return predicate.Reign(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Reign {
	return predicate.Reign(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Reign {
	return predicate.Reign(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Reign {
	return predicate.Reign(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Reign {
	return predicate.Reign(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Reign {
	return predicate.Reign(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Reign {
	return predicate.Reign(sql.FieldLTE(FieldCreatedAt, v))
}

// SerialEQ applies the EQ predicate on the "serial" field.
func SerialEQ(v string) predicate.Reign {
	return predicate.Reign(sql.FieldEQ(FieldSerial, v))
}

// SerialNEQ applies the NEQ predicate on the "serial" field.
func SerialNEQ(v string) predicate.Reign {
	return predicate.Reign(sql.FieldNEQ(FieldSerial, v))
}

// SerialIn applies the In predicate on the "serial" field.
func SerialIn(vs ...string) predicate.Reign {
	return predicate.Reign(sql.FieldIn(FieldSerial, vs...))
}

// SerialNotIn applies the NotIn predicate on the "serial" field.
func SerialNotIn(vs ...string) predicate.Reign {
	return predicate.Reign(sql.FieldNotIn(FieldSerial, vs...))
}

// SerialGT applies the GT predicate on the "serial" field.
func SerialGT(v string) predicate.Reign {
	return predicate.Reign(sql.FieldGT(FieldSerial, v))
}

// SerialGTE applies the GTE predicate on the "serial" field.
func SerialGTE(v string) predicate.Reign {
	return predicate.Reign(sql.FieldGTE(FieldSerial, v))
}

// SerialLT applies the LT predicate on the "serial" field.
func SerialLT(v string) predicate.Reign {
	return predicate.Reign(sql.FieldLT(FieldSerial, v))
}

// SerialLTE applies the LTE predicate on the "serial" field.
func SerialLTE(v string) predicate.Reign {
	return predicate.Reign(sql.FieldLTE(FieldSerial, v))
}

// SerialContains applies the Contains predicate on the "serial" field.
func SerialContains(v string) predicate.Reign {
	return predicate.Reign(sql.FieldContains(FieldSerial, v))
}

// SerialHasPrefix applies the HasPrefix predicate on the "serial" field.
func SerialHasPrefix(v string) predicate.Reign {
	return predicate.Reign(sql.FieldHasPrefix(FieldSerial, v))
}

// SerialHasSuffix applies the HasSuffix predicate on the "serial" field.
func SerialHasSuffix(v string) predicate.Reign {
	return predicate.Reign(sql.FieldHasSuffix(FieldSerial, v))
}

// SerialEqualFold applies the EqualFold predicate on the "serial" field.
func SerialEqualFold(v string) predicate.Reign {
	return predicate.Reign(sql.FieldEqualFold(FieldSerial, v))
}

// SerialContainsFold applies the ContainsFold predicate on the "serial" field.
func SerialContainsFold(v string) predicate.Reign {
	return predicate.Reign(sql.FieldContainsFold(FieldSerial, v))
}

// OrdinalEQ applies the EQ predicate on the "ordinal" field.
func OrdinalEQ(v int) predicate.Reign {
	return predicate.Reign(sql.FieldEQ(FieldOrdinal, v))
}

// OrdinalNEQ applies the NEQ predicate on the "ordinal" field.
func OrdinalNEQ(v int) predicate.Reign {
	return predicate.Reign(sql.FieldNEQ(FieldOrdinal, v))
}

// OrdinalIn applies the In predicate on the "ordinal" field.
func OrdinalIn(vs ...int) predicate.Reign {
	return predicate.Reign(sql.FieldIn(FieldOrdinal, vs...))
}

// OrdinalNotIn applies the NotIn predicate on the "ordinal" field.
func OrdinalNotIn(vs ...int) predicate.Reign {
	return predicate.Reign(sql.FieldNotIn(FieldOrdinal, vs...))
}

// OrdinalGT applies the GT predicate on the "ordinal" field.
func OrdinalGT(v int) predicate.Reign {
	return predicate.Reign(sql.FieldGT(FieldOrdinal, v))
}

// OrdinalGTE applies the GTE predicate on the "ordinal" field.
func OrdinalGTE(v int) predicate.Reign {
	return predicate.Reign(sql.FieldGTE(FieldOrdinal, v))
}

// OrdinalLT applies the LT predicate on the "ordinal" field.
func OrdinalLT(v int) predicate.Reign {
	return predicate.Reign(sql.FieldLT(FieldOrdinal, v))
}

// OrdinalLTE applies the LTE predicate on the "ordinal" field.
func OrdinalLTE(v int) predicate.Reign {
	return predicate.Reign(sql.FieldLTE(FieldOrdinal, v))
}

// CabinetNameEQ applies the EQ predicate on the "cabinet_name" field.
func CabinetNameEQ(v string) predicate.Reign {
	return predicate.Reign(sql.FieldEQ(FieldCabinetName, v))
}

// CabinetNameNEQ applies the NEQ predicate on the "cabinet_name" field.
func CabinetNameNEQ(v string) predicate.Reign {
	return predicate.Reign(sql.FieldNEQ(FieldCabinetName, v))
}

// CabinetNameIn applies the In predicate on the "cabinet_name" field.
func CabinetNameIn(vs ...string) predicate.Reign {
	return predicate.Reign(sql.FieldIn(FieldCabinetName, vs...))
}

// CabinetNameNotIn applies the NotIn predicate on the "cabinet_name" field.
func CabinetNameNotIn(vs ...string) predicate.Reign {
	return predicate.Reign(sql.FieldNotIn(FieldCabinetName, vs...))
}

// CabinetNameGT applies the GT predicate on the "cabinet_name" field.
func CabinetNameGT(v string) predicate.Reign {
	return predicate.Reign(sql.FieldGT(FieldCabinetName, v))
}

// CabinetNameGTE applies the GTE predicate on the "cabinet_name" field.
func CabinetNameGTE(v string) predicate.Reign {
	return predicate.Reign(sql.FieldGTE(FieldCabinetName, v))
}

// CabinetNameLT applies the LT predicate on the "cabinet_name" field.
func CabinetNameLT(v string) predicate.Reign {
	return predicate.Reign(sql.FieldLT(FieldCabinetName, v))
}

// CabinetNameLTE applies the LTE predicate on the "cabinet_name" field.
func CabinetNameLTE(v string) predicate.Reign {
	return predicate.Reign(sql.FieldLTE(FieldCabinetName, v))
}

// CabinetNameContains applies the Contains predicate on the "cabinet_name" field.
func CabinetNameContains(v string) predicate.Reign {
	return predicate.Reign(sql.FieldContains(FieldCabinetName, v))
}

// CabinetNameHasPrefix applies the HasPrefix predicate on the "cabinet_name" field.
func CabinetNameHasPrefix(v string) predicate.Reign {
	return predicate.Reign(sql.FieldHasPrefix(FieldCabinetName, v))
}

// CabinetNameHasSuffix applies the HasSuffix predicate on the "cabinet_name" field.
func CabinetNameHasSuffix(v string) predicate.Reign {
	return predicate.Reign(sql.FieldHasSuffix(FieldCabinetName, v))
}

// CabinetNameIsNil applies the IsNil predicate on the "cabinet_name" field.
func CabinetNameIsNil() predicate.Reign {
	return predicate.Reign(sql.FieldIsNull(FieldCabinetName))
}

// CabinetNameNotNil applies the NotNil predicate on the "cabinet_name" field.
func CabinetNameNotNil() predicate.Reign {
	return predicate.Reign(sql.FieldNotNull(FieldCabinetName))
}

// CabinetNameEqualFold applies the EqualFold predicate on the "cabinet_name" field.
func CabinetNameEqualFold(v string) predicate.Reign {
	return predicate.Reign(sql.FieldEqualFold(FieldCabinetName, v))
}

// CabinetNameContainsFold applies the ContainsFold predicate on the "cabinet_name" field.
func CabinetNameContainsFold(v string) predicate.Reign {
	return predicate.Reign(sql.FieldContainsFold(FieldCabinetName, v))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.Reign {
	return predicate.Reign(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.Reign {
	return predicate.Reign(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.Reign {
	return predicate.Reign(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.Reign {
	return predicate.Reign(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.Reign {
	return predicate.Reign(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.Reign {
	return predicate.Reign(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.Reign {
	return predicate.Reign(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.Reign {
	return predicate.Reign(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.Reign {
	return predicate.Reign(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.Reign {
	return predicate.Reign(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.Reign {
	return predicate.Reign(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.Reign {
	return predicate.Reign(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.Reign {
	return predicate.Reign(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.Reign {
	return predicate.Reign(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.Reign {
	return predicate.Reign(sql.FieldContainsFold(FieldRemark, v))
}

// GeomEQ applies the EQ predicate on the "geom" field.
func GeomEQ(v *adapter.Geometry) predicate.Reign {
	return predicate.Reign(sql.FieldEQ(FieldGeom, v))
}

// GeomNEQ applies the NEQ predicate on the "geom" field.
func GeomNEQ(v *adapter.Geometry) predicate.Reign {
	return predicate.Reign(sql.FieldNEQ(FieldGeom, v))
}

// GeomIn applies the In predicate on the "geom" field.
func GeomIn(vs ...*adapter.Geometry) predicate.Reign {
	return predicate.Reign(sql.FieldIn(FieldGeom, vs...))
}

// GeomNotIn applies the NotIn predicate on the "geom" field.
func GeomNotIn(vs ...*adapter.Geometry) predicate.Reign {
	return predicate.Reign(sql.FieldNotIn(FieldGeom, vs...))
}

// GeomGT applies the GT predicate on the "geom" field.
func GeomGT(v *adapter.Geometry) predicate.Reign {
	return predicate.Reign(sql.FieldGT(FieldGeom, v))
}

// GeomGTE applies the GTE predicate on the "geom" field.
func GeomGTE(v *adapter.Geometry) predicate.Reign {
	return predicate.Reign(sql.FieldGTE(FieldGeom, v))
}

// GeomLT applies the LT predicate on the "geom" field.
func GeomLT(v *adapter.Geometry) predicate.Reign {
	return predicate.Reign(sql.FieldLT(FieldGeom, v))
}

// GeomLTE applies the LTE predicate on the "geom" field.
func GeomLTE(v *adapter.Geometry) predicate.Reign {
	return predicate.Reign(sql.FieldLTE(FieldGeom, v))
}

// HasBattery applies the HasEdge predicate on the "battery" edge.
func HasBattery() predicate.Reign {
	return predicate.Reign(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BatteryTable, BatteryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBatteryWith applies the HasEdge predicate on the "battery" edge with a given conditions (other predicates).
func HasBatteryWith(preds ...predicate.Battery) predicate.Reign {
	return predicate.Reign(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BatteryInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BatteryTable, BatteryColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Reign) predicate.Reign {
	return predicate.Reign(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Reign) predicate.Reign {
	return predicate.Reign(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Reign) predicate.Reign {
	return predicate.Reign(func(s *sql.Selector) {
		p(s.Not())
	})
}
