// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/adapter/defs/xcdef"
	"github.com/auroraride/adapter/defs/xcdef/ent/battery"
	"github.com/auroraride/adapter/defs/xcdef/ent/fault"
)

// Fault is the model entity for the Fault schema.
type Fault struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 电池编号
	Sn string `json:"sn,omitempty"`
	// 电池ID
	BatteryID int `json:"battery_id,omitempty"`
	// 故障信息
	Fault xcdef.Fault `json:"fault,omitempty"`
	// 开始时间
	BeginAt time.Time `json:"begin_at,omitempty"`
	// 结束时间
	EndAt time.Time `json:"end_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FaultQuery when eager-loading is set.
	Edges FaultEdges `json:"edges"`
}

// FaultEdges holds the relations/edges for other nodes in the graph.
type FaultEdges struct {
	// 所属电池
	Battery *Battery `json:"battery,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BatteryOrErr returns the Battery value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FaultEdges) BatteryOrErr() (*Battery, error) {
	if e.loadedTypes[0] {
		if e.Battery == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: battery.Label}
		}
		return e.Battery, nil
	}
	return nil, &NotLoadedError{edge: "battery"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Fault) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case fault.FieldID, fault.FieldBatteryID:
			values[i] = new(sql.NullInt64)
		case fault.FieldSn:
			values[i] = new(sql.NullString)
		case fault.FieldBeginAt, fault.FieldEndAt:
			values[i] = new(sql.NullTime)
		case fault.FieldFault:
			values[i] = new(xcdef.Fault)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Fault", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Fault fields.
func (f *Fault) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fault.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		case fault.FieldSn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sn", values[i])
			} else if value.Valid {
				f.Sn = value.String
			}
		case fault.FieldBatteryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field battery_id", values[i])
			} else if value.Valid {
				f.BatteryID = int(value.Int64)
			}
		case fault.FieldFault:
			if value, ok := values[i].(*xcdef.Fault); !ok {
				return fmt.Errorf("unexpected type %T for field fault", values[i])
			} else if value != nil {
				f.Fault = *value
			}
		case fault.FieldBeginAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field begin_at", values[i])
			} else if value.Valid {
				f.BeginAt = value.Time
			}
		case fault.FieldEndAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_at", values[i])
			} else if value.Valid {
				f.EndAt = value.Time
			}
		}
	}
	return nil
}

// QueryBattery queries the "battery" edge of the Fault entity.
func (f *Fault) QueryBattery() *BatteryQuery {
	return NewFaultClient(f.config).QueryBattery(f)
}

// Update returns a builder for updating this Fault.
// Note that you need to call Fault.Unwrap() before calling this method if this Fault
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Fault) Update() *FaultUpdateOne {
	return NewFaultClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Fault entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Fault) Unwrap() *Fault {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Fault is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Fault) String() string {
	var builder strings.Builder
	builder.WriteString("Fault(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("sn=")
	builder.WriteString(f.Sn)
	builder.WriteString(", ")
	builder.WriteString("battery_id=")
	builder.WriteString(fmt.Sprintf("%v", f.BatteryID))
	builder.WriteString(", ")
	builder.WriteString("fault=")
	builder.WriteString(fmt.Sprintf("%v", f.Fault))
	builder.WriteString(", ")
	builder.WriteString("begin_at=")
	builder.WriteString(f.BeginAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_at=")
	builder.WriteString(f.EndAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Faults is a parsable slice of Fault.
type Faults []*Fault

func (f Faults) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}
