// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/auroraride/adapter/defs/xcdef/ent/migrate"

	"github.com/auroraride/adapter/defs/xcdef/ent/battery"
	"github.com/auroraride/adapter/defs/xcdef/ent/fault"
	"github.com/auroraride/adapter/defs/xcdef/ent/heartbeat"
	"github.com/auroraride/adapter/defs/xcdef/ent/reign"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Battery is the client for interacting with the Battery builders.
	Battery *BatteryClient
	// Fault is the client for interacting with the Fault builders.
	Fault *FaultClient
	// Heartbeat is the client for interacting with the Heartbeat builders.
	Heartbeat *HeartbeatClient
	// Reign is the client for interacting with the Reign builders.
	Reign *ReignClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Battery = NewBatteryClient(c.config)
	c.Fault = NewFaultClient(c.config)
	c.Heartbeat = NewHeartbeatClient(c.config)
	c.Reign = NewReignClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		Battery:   NewBatteryClient(cfg),
		Fault:     NewFaultClient(cfg),
		Heartbeat: NewHeartbeatClient(cfg),
		Reign:     NewReignClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		Battery:   NewBatteryClient(cfg),
		Fault:     NewFaultClient(cfg),
		Heartbeat: NewHeartbeatClient(cfg),
		Reign:     NewReignClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Battery.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Battery.Use(hooks...)
	c.Fault.Use(hooks...)
	c.Heartbeat.Use(hooks...)
	c.Reign.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Battery.Intercept(interceptors...)
	c.Fault.Intercept(interceptors...)
	c.Heartbeat.Intercept(interceptors...)
	c.Reign.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *BatteryMutation:
		return c.Battery.mutate(ctx, m)
	case *FaultMutation:
		return c.Fault.mutate(ctx, m)
	case *HeartbeatMutation:
		return c.Heartbeat.mutate(ctx, m)
	case *ReignMutation:
		return c.Reign.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// BatteryClient is a client for the Battery schema.
type BatteryClient struct {
	config
}

// NewBatteryClient returns a client for the Battery from the given config.
func NewBatteryClient(c config) *BatteryClient {
	return &BatteryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `battery.Hooks(f(g(h())))`.
func (c *BatteryClient) Use(hooks ...Hook) {
	c.hooks.Battery = append(c.hooks.Battery, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `battery.Intercept(f(g(h())))`.
func (c *BatteryClient) Intercept(interceptors ...Interceptor) {
	c.inters.Battery = append(c.inters.Battery, interceptors...)
}

// Create returns a builder for creating a Battery entity.
func (c *BatteryClient) Create() *BatteryCreate {
	mutation := newBatteryMutation(c.config, OpCreate)
	return &BatteryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Battery entities.
func (c *BatteryClient) CreateBulk(builders ...*BatteryCreate) *BatteryCreateBulk {
	return &BatteryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Battery.
func (c *BatteryClient) Update() *BatteryUpdate {
	mutation := newBatteryMutation(c.config, OpUpdate)
	return &BatteryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BatteryClient) UpdateOne(b *Battery) *BatteryUpdateOne {
	mutation := newBatteryMutation(c.config, OpUpdateOne, withBattery(b))
	return &BatteryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BatteryClient) UpdateOneID(id int) *BatteryUpdateOne {
	mutation := newBatteryMutation(c.config, OpUpdateOne, withBatteryID(id))
	return &BatteryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Battery.
func (c *BatteryClient) Delete() *BatteryDelete {
	mutation := newBatteryMutation(c.config, OpDelete)
	return &BatteryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BatteryClient) DeleteOne(b *Battery) *BatteryDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BatteryClient) DeleteOneID(id int) *BatteryDeleteOne {
	builder := c.Delete().Where(battery.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BatteryDeleteOne{builder}
}

// Query returns a query builder for Battery.
func (c *BatteryClient) Query() *BatteryQuery {
	return &BatteryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBattery},
		inters: c.Interceptors(),
	}
}

// Get returns a Battery entity by its id.
func (c *BatteryClient) Get(ctx context.Context, id int) (*Battery, error) {
	return c.Query().Where(battery.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BatteryClient) GetX(ctx context.Context, id int) *Battery {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHeartbeats queries the heartbeats edge of a Battery.
func (c *BatteryClient) QueryHeartbeats(b *Battery) *HeartbeatQuery {
	query := (&HeartbeatClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(battery.Table, battery.FieldID, id),
			sqlgraph.To(heartbeat.Table, heartbeat.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, battery.HeartbeatsTable, battery.HeartbeatsColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReigns queries the reigns edge of a Battery.
func (c *BatteryClient) QueryReigns(b *Battery) *ReignQuery {
	query := (&ReignClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(battery.Table, battery.FieldID, id),
			sqlgraph.To(reign.Table, reign.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, battery.ReignsTable, battery.ReignsColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFaultLog queries the fault_log edge of a Battery.
func (c *BatteryClient) QueryFaultLog(b *Battery) *FaultQuery {
	query := (&FaultClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(battery.Table, battery.FieldID, id),
			sqlgraph.To(fault.Table, fault.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, battery.FaultLogTable, battery.FaultLogColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BatteryClient) Hooks() []Hook {
	return c.hooks.Battery
}

// Interceptors returns the client interceptors.
func (c *BatteryClient) Interceptors() []Interceptor {
	return c.inters.Battery
}

func (c *BatteryClient) mutate(ctx context.Context, m *BatteryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BatteryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BatteryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BatteryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BatteryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Battery mutation op: %q", m.Op())
	}
}

// FaultClient is a client for the Fault schema.
type FaultClient struct {
	config
}

// NewFaultClient returns a client for the Fault from the given config.
func NewFaultClient(c config) *FaultClient {
	return &FaultClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `fault.Hooks(f(g(h())))`.
func (c *FaultClient) Use(hooks ...Hook) {
	c.hooks.Fault = append(c.hooks.Fault, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `fault.Intercept(f(g(h())))`.
func (c *FaultClient) Intercept(interceptors ...Interceptor) {
	c.inters.Fault = append(c.inters.Fault, interceptors...)
}

// Create returns a builder for creating a Fault entity.
func (c *FaultClient) Create() *FaultCreate {
	mutation := newFaultMutation(c.config, OpCreate)
	return &FaultCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Fault entities.
func (c *FaultClient) CreateBulk(builders ...*FaultCreate) *FaultCreateBulk {
	return &FaultCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Fault.
func (c *FaultClient) Update() *FaultUpdate {
	mutation := newFaultMutation(c.config, OpUpdate)
	return &FaultUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FaultClient) UpdateOne(f *Fault) *FaultUpdateOne {
	mutation := newFaultMutation(c.config, OpUpdateOne, withFault(f))
	return &FaultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FaultClient) UpdateOneID(id int) *FaultUpdateOne {
	mutation := newFaultMutation(c.config, OpUpdateOne, withFaultID(id))
	return &FaultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Fault.
func (c *FaultClient) Delete() *FaultDelete {
	mutation := newFaultMutation(c.config, OpDelete)
	return &FaultDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FaultClient) DeleteOne(f *Fault) *FaultDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FaultClient) DeleteOneID(id int) *FaultDeleteOne {
	builder := c.Delete().Where(fault.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FaultDeleteOne{builder}
}

// Query returns a query builder for Fault.
func (c *FaultClient) Query() *FaultQuery {
	return &FaultQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFault},
		inters: c.Interceptors(),
	}
}

// Get returns a Fault entity by its id.
func (c *FaultClient) Get(ctx context.Context, id int) (*Fault, error) {
	return c.Query().Where(fault.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FaultClient) GetX(ctx context.Context, id int) *Fault {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBattery queries the battery edge of a Fault.
func (c *FaultClient) QueryBattery(f *Fault) *BatteryQuery {
	query := (&BatteryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fault.Table, fault.FieldID, id),
			sqlgraph.To(battery.Table, battery.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, fault.BatteryTable, fault.BatteryColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FaultClient) Hooks() []Hook {
	return c.hooks.Fault
}

// Interceptors returns the client interceptors.
func (c *FaultClient) Interceptors() []Interceptor {
	return c.inters.Fault
}

func (c *FaultClient) mutate(ctx context.Context, m *FaultMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FaultCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FaultUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FaultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FaultDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Fault mutation op: %q", m.Op())
	}
}

// HeartbeatClient is a client for the Heartbeat schema.
type HeartbeatClient struct {
	config
}

// NewHeartbeatClient returns a client for the Heartbeat from the given config.
func NewHeartbeatClient(c config) *HeartbeatClient {
	return &HeartbeatClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `heartbeat.Hooks(f(g(h())))`.
func (c *HeartbeatClient) Use(hooks ...Hook) {
	c.hooks.Heartbeat = append(c.hooks.Heartbeat, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `heartbeat.Intercept(f(g(h())))`.
func (c *HeartbeatClient) Intercept(interceptors ...Interceptor) {
	c.inters.Heartbeat = append(c.inters.Heartbeat, interceptors...)
}

// Create returns a builder for creating a Heartbeat entity.
func (c *HeartbeatClient) Create() *HeartbeatCreate {
	mutation := newHeartbeatMutation(c.config, OpCreate)
	return &HeartbeatCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Heartbeat entities.
func (c *HeartbeatClient) CreateBulk(builders ...*HeartbeatCreate) *HeartbeatCreateBulk {
	return &HeartbeatCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Heartbeat.
func (c *HeartbeatClient) Update() *HeartbeatUpdate {
	mutation := newHeartbeatMutation(c.config, OpUpdate)
	return &HeartbeatUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HeartbeatClient) UpdateOne(h *Heartbeat) *HeartbeatUpdateOne {
	mutation := newHeartbeatMutation(c.config, OpUpdateOne, withHeartbeat(h))
	return &HeartbeatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HeartbeatClient) UpdateOneID(id int) *HeartbeatUpdateOne {
	mutation := newHeartbeatMutation(c.config, OpUpdateOne, withHeartbeatID(id))
	return &HeartbeatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Heartbeat.
func (c *HeartbeatClient) Delete() *HeartbeatDelete {
	mutation := newHeartbeatMutation(c.config, OpDelete)
	return &HeartbeatDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HeartbeatClient) DeleteOne(h *Heartbeat) *HeartbeatDeleteOne {
	return c.DeleteOneID(h.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HeartbeatClient) DeleteOneID(id int) *HeartbeatDeleteOne {
	builder := c.Delete().Where(heartbeat.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HeartbeatDeleteOne{builder}
}

// Query returns a query builder for Heartbeat.
func (c *HeartbeatClient) Query() *HeartbeatQuery {
	return &HeartbeatQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHeartbeat},
		inters: c.Interceptors(),
	}
}

// Get returns a Heartbeat entity by its id.
func (c *HeartbeatClient) Get(ctx context.Context, id int) (*Heartbeat, error) {
	return c.Query().Where(heartbeat.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HeartbeatClient) GetX(ctx context.Context, id int) *Heartbeat {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBattery queries the battery edge of a Heartbeat.
func (c *HeartbeatClient) QueryBattery(h *Heartbeat) *BatteryQuery {
	query := (&BatteryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(heartbeat.Table, heartbeat.FieldID, id),
			sqlgraph.To(battery.Table, battery.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, heartbeat.BatteryTable, heartbeat.BatteryColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HeartbeatClient) Hooks() []Hook {
	return c.hooks.Heartbeat
}

// Interceptors returns the client interceptors.
func (c *HeartbeatClient) Interceptors() []Interceptor {
	return c.inters.Heartbeat
}

func (c *HeartbeatClient) mutate(ctx context.Context, m *HeartbeatMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HeartbeatCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HeartbeatUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HeartbeatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HeartbeatDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Heartbeat mutation op: %q", m.Op())
	}
}

// ReignClient is a client for the Reign schema.
type ReignClient struct {
	config
}

// NewReignClient returns a client for the Reign from the given config.
func NewReignClient(c config) *ReignClient {
	return &ReignClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `reign.Hooks(f(g(h())))`.
func (c *ReignClient) Use(hooks ...Hook) {
	c.hooks.Reign = append(c.hooks.Reign, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `reign.Intercept(f(g(h())))`.
func (c *ReignClient) Intercept(interceptors ...Interceptor) {
	c.inters.Reign = append(c.inters.Reign, interceptors...)
}

// Create returns a builder for creating a Reign entity.
func (c *ReignClient) Create() *ReignCreate {
	mutation := newReignMutation(c.config, OpCreate)
	return &ReignCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Reign entities.
func (c *ReignClient) CreateBulk(builders ...*ReignCreate) *ReignCreateBulk {
	return &ReignCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Reign.
func (c *ReignClient) Update() *ReignUpdate {
	mutation := newReignMutation(c.config, OpUpdate)
	return &ReignUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReignClient) UpdateOne(r *Reign) *ReignUpdateOne {
	mutation := newReignMutation(c.config, OpUpdateOne, withReign(r))
	return &ReignUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ReignClient) UpdateOneID(id int) *ReignUpdateOne {
	mutation := newReignMutation(c.config, OpUpdateOne, withReignID(id))
	return &ReignUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Reign.
func (c *ReignClient) Delete() *ReignDelete {
	mutation := newReignMutation(c.config, OpDelete)
	return &ReignDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ReignClient) DeleteOne(r *Reign) *ReignDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ReignClient) DeleteOneID(id int) *ReignDeleteOne {
	builder := c.Delete().Where(reign.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ReignDeleteOne{builder}
}

// Query returns a query builder for Reign.
func (c *ReignClient) Query() *ReignQuery {
	return &ReignQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeReign},
		inters: c.Interceptors(),
	}
}

// Get returns a Reign entity by its id.
func (c *ReignClient) Get(ctx context.Context, id int) (*Reign, error) {
	return c.Query().Where(reign.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReignClient) GetX(ctx context.Context, id int) *Reign {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBattery queries the battery edge of a Reign.
func (c *ReignClient) QueryBattery(r *Reign) *BatteryQuery {
	query := (&BatteryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(reign.Table, reign.FieldID, id),
			sqlgraph.To(battery.Table, battery.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, reign.BatteryTable, reign.BatteryColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ReignClient) Hooks() []Hook {
	return c.hooks.Reign
}

// Interceptors returns the client interceptors.
func (c *ReignClient) Interceptors() []Interceptor {
	return c.inters.Reign
}

func (c *ReignClient) mutate(ctx context.Context, m *ReignMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ReignCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ReignUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ReignUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ReignDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Reign mutation op: %q", m.Op())
	}
}
