// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/adapter"
	"github.com/auroraride/adapter/defs/xcdef"
	"github.com/auroraride/adapter/defs/xcdef/ent/battery"
	"github.com/auroraride/adapter/defs/xcdef/ent/heartbeat"
)

// HeartbeatCreate is the builder for creating a Heartbeat entity.
type HeartbeatCreate struct {
	config
	mutation *HeartbeatMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSn sets the "sn" field.
func (hc *HeartbeatCreate) SetSn(s string) *HeartbeatCreate {
	hc.mutation.SetSn(s)
	return hc
}

// SetBatteryID sets the "battery_id" field.
func (hc *HeartbeatCreate) SetBatteryID(i int) *HeartbeatCreate {
	hc.mutation.SetBatteryID(i)
	return hc
}

// SetCreatedAt sets the "created_at" field.
func (hc *HeartbeatCreate) SetCreatedAt(t time.Time) *HeartbeatCreate {
	hc.mutation.SetCreatedAt(t)
	return hc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hc *HeartbeatCreate) SetNillableCreatedAt(t *time.Time) *HeartbeatCreate {
	if t != nil {
		hc.SetCreatedAt(*t)
	}
	return hc
}

// SetVoltage sets the "voltage" field.
func (hc *HeartbeatCreate) SetVoltage(f float64) *HeartbeatCreate {
	hc.mutation.SetVoltage(f)
	return hc
}

// SetCurrent sets the "current" field.
func (hc *HeartbeatCreate) SetCurrent(f float64) *HeartbeatCreate {
	hc.mutation.SetCurrent(f)
	return hc
}

// SetSoc sets the "soc" field.
func (hc *HeartbeatCreate) SetSoc(u uint8) *HeartbeatCreate {
	hc.mutation.SetSoc(u)
	return hc
}

// SetSoh sets the "soh" field.
func (hc *HeartbeatCreate) SetSoh(u uint8) *HeartbeatCreate {
	hc.mutation.SetSoh(u)
	return hc
}

// SetInCabinet sets the "in_cabinet" field.
func (hc *HeartbeatCreate) SetInCabinet(b bool) *HeartbeatCreate {
	hc.mutation.SetInCabinet(b)
	return hc
}

// SetCapacity sets the "capacity" field.
func (hc *HeartbeatCreate) SetCapacity(f float64) *HeartbeatCreate {
	hc.mutation.SetCapacity(f)
	return hc
}

// SetMonMaxVoltage sets the "mon_max_voltage" field.
func (hc *HeartbeatCreate) SetMonMaxVoltage(u uint16) *HeartbeatCreate {
	hc.mutation.SetMonMaxVoltage(u)
	return hc
}

// SetMonMaxVoltagePos sets the "mon_max_voltage_pos" field.
func (hc *HeartbeatCreate) SetMonMaxVoltagePos(u uint8) *HeartbeatCreate {
	hc.mutation.SetMonMaxVoltagePos(u)
	return hc
}

// SetMonMinVoltage sets the "mon_min_voltage" field.
func (hc *HeartbeatCreate) SetMonMinVoltage(u uint16) *HeartbeatCreate {
	hc.mutation.SetMonMinVoltage(u)
	return hc
}

// SetMonMinVoltagePos sets the "mon_min_voltage_pos" field.
func (hc *HeartbeatCreate) SetMonMinVoltagePos(u uint8) *HeartbeatCreate {
	hc.mutation.SetMonMinVoltagePos(u)
	return hc
}

// SetMaxTemp sets the "max_temp" field.
func (hc *HeartbeatCreate) SetMaxTemp(u uint16) *HeartbeatCreate {
	hc.mutation.SetMaxTemp(u)
	return hc
}

// SetMinTemp sets the "min_temp" field.
func (hc *HeartbeatCreate) SetMinTemp(u uint16) *HeartbeatCreate {
	hc.mutation.SetMinTemp(u)
	return hc
}

// SetFaults sets the "faults" field.
func (hc *HeartbeatCreate) SetFaults(x *xcdef.Faults) *HeartbeatCreate {
	hc.mutation.SetFaults(x)
	return hc
}

// SetMosStatus sets the "mos_status" field.
func (hc *HeartbeatCreate) SetMosStatus(xs *xcdef.MosStatus) *HeartbeatCreate {
	hc.mutation.SetMosStatus(xs)
	return hc
}

// SetMonVoltage sets the "mon_voltage" field.
func (hc *HeartbeatCreate) SetMonVoltage(xv *xcdef.MonVoltage) *HeartbeatCreate {
	hc.mutation.SetMonVoltage(xv)
	return hc
}

// SetTemp sets the "temp" field.
func (hc *HeartbeatCreate) SetTemp(x *xcdef.Temperature) *HeartbeatCreate {
	hc.mutation.SetTemp(x)
	return hc
}

// SetMosTemp sets the "mos_temp" field.
func (hc *HeartbeatCreate) SetMosTemp(u uint16) *HeartbeatCreate {
	hc.mutation.SetMosTemp(u)
	return hc
}

// SetEnvTemp sets the "env_temp" field.
func (hc *HeartbeatCreate) SetEnvTemp(u uint16) *HeartbeatCreate {
	hc.mutation.SetEnvTemp(u)
	return hc
}

// SetGeom sets the "geom" field.
func (hc *HeartbeatCreate) SetGeom(a *adapter.Geometry) *HeartbeatCreate {
	hc.mutation.SetGeom(a)
	return hc
}

// SetGps sets the "gps" field.
func (hc *HeartbeatCreate) SetGps(xs xcdef.GPSStatus) *HeartbeatCreate {
	hc.mutation.SetGps(xs)
	return hc
}

// SetNillableGps sets the "gps" field if the given value is not nil.
func (hc *HeartbeatCreate) SetNillableGps(xs *xcdef.GPSStatus) *HeartbeatCreate {
	if xs != nil {
		hc.SetGps(*xs)
	}
	return hc
}

// SetStrength sets the "strength" field.
func (hc *HeartbeatCreate) SetStrength(u uint8) *HeartbeatCreate {
	hc.mutation.SetStrength(u)
	return hc
}

// SetCycles sets the "cycles" field.
func (hc *HeartbeatCreate) SetCycles(u uint16) *HeartbeatCreate {
	hc.mutation.SetCycles(u)
	return hc
}

// SetChargingTime sets the "charging_time" field.
func (hc *HeartbeatCreate) SetChargingTime(u uint32) *HeartbeatCreate {
	hc.mutation.SetChargingTime(u)
	return hc
}

// SetDisChargingTime sets the "dis_charging_time" field.
func (hc *HeartbeatCreate) SetDisChargingTime(u uint32) *HeartbeatCreate {
	hc.mutation.SetDisChargingTime(u)
	return hc
}

// SetUsingTime sets the "using_time" field.
func (hc *HeartbeatCreate) SetUsingTime(u uint32) *HeartbeatCreate {
	hc.mutation.SetUsingTime(u)
	return hc
}

// SetTotalChargingTime sets the "total_charging_time" field.
func (hc *HeartbeatCreate) SetTotalChargingTime(u uint32) *HeartbeatCreate {
	hc.mutation.SetTotalChargingTime(u)
	return hc
}

// SetTotalDisChargingTime sets the "total_dis_charging_time" field.
func (hc *HeartbeatCreate) SetTotalDisChargingTime(u uint32) *HeartbeatCreate {
	hc.mutation.SetTotalDisChargingTime(u)
	return hc
}

// SetTotalUsingTime sets the "total_using_time" field.
func (hc *HeartbeatCreate) SetTotalUsingTime(u uint32) *HeartbeatCreate {
	hc.mutation.SetTotalUsingTime(u)
	return hc
}

// SetBattery sets the "battery" edge to the Battery entity.
func (hc *HeartbeatCreate) SetBattery(b *Battery) *HeartbeatCreate {
	return hc.SetBatteryID(b.ID)
}

// Mutation returns the HeartbeatMutation object of the builder.
func (hc *HeartbeatCreate) Mutation() *HeartbeatMutation {
	return hc.mutation
}

// Save creates the Heartbeat in the database.
func (hc *HeartbeatCreate) Save(ctx context.Context) (*Heartbeat, error) {
	hc.defaults()
	return withHooks[*Heartbeat, HeartbeatMutation](ctx, hc.sqlSave, hc.mutation, hc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hc *HeartbeatCreate) SaveX(ctx context.Context) *Heartbeat {
	v, err := hc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hc *HeartbeatCreate) Exec(ctx context.Context) error {
	_, err := hc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hc *HeartbeatCreate) ExecX(ctx context.Context) {
	if err := hc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hc *HeartbeatCreate) defaults() {
	if _, ok := hc.mutation.CreatedAt(); !ok {
		v := heartbeat.DefaultCreatedAt()
		hc.mutation.SetCreatedAt(v)
	}
	if _, ok := hc.mutation.Gps(); !ok {
		v := heartbeat.DefaultGps
		hc.mutation.SetGps(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hc *HeartbeatCreate) check() error {
	if _, ok := hc.mutation.Sn(); !ok {
		return &ValidationError{Name: "sn", err: errors.New(`ent: missing required field "Heartbeat.sn"`)}
	}
	if _, ok := hc.mutation.BatteryID(); !ok {
		return &ValidationError{Name: "battery_id", err: errors.New(`ent: missing required field "Heartbeat.battery_id"`)}
	}
	if _, ok := hc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Heartbeat.created_at"`)}
	}
	if _, ok := hc.mutation.Voltage(); !ok {
		return &ValidationError{Name: "voltage", err: errors.New(`ent: missing required field "Heartbeat.voltage"`)}
	}
	if _, ok := hc.mutation.Current(); !ok {
		return &ValidationError{Name: "current", err: errors.New(`ent: missing required field "Heartbeat.current"`)}
	}
	if _, ok := hc.mutation.Soc(); !ok {
		return &ValidationError{Name: "soc", err: errors.New(`ent: missing required field "Heartbeat.soc"`)}
	}
	if _, ok := hc.mutation.Soh(); !ok {
		return &ValidationError{Name: "soh", err: errors.New(`ent: missing required field "Heartbeat.soh"`)}
	}
	if _, ok := hc.mutation.InCabinet(); !ok {
		return &ValidationError{Name: "in_cabinet", err: errors.New(`ent: missing required field "Heartbeat.in_cabinet"`)}
	}
	if _, ok := hc.mutation.Capacity(); !ok {
		return &ValidationError{Name: "capacity", err: errors.New(`ent: missing required field "Heartbeat.capacity"`)}
	}
	if _, ok := hc.mutation.MonMaxVoltage(); !ok {
		return &ValidationError{Name: "mon_max_voltage", err: errors.New(`ent: missing required field "Heartbeat.mon_max_voltage"`)}
	}
	if _, ok := hc.mutation.MonMaxVoltagePos(); !ok {
		return &ValidationError{Name: "mon_max_voltage_pos", err: errors.New(`ent: missing required field "Heartbeat.mon_max_voltage_pos"`)}
	}
	if _, ok := hc.mutation.MonMinVoltage(); !ok {
		return &ValidationError{Name: "mon_min_voltage", err: errors.New(`ent: missing required field "Heartbeat.mon_min_voltage"`)}
	}
	if _, ok := hc.mutation.MonMinVoltagePos(); !ok {
		return &ValidationError{Name: "mon_min_voltage_pos", err: errors.New(`ent: missing required field "Heartbeat.mon_min_voltage_pos"`)}
	}
	if _, ok := hc.mutation.MaxTemp(); !ok {
		return &ValidationError{Name: "max_temp", err: errors.New(`ent: missing required field "Heartbeat.max_temp"`)}
	}
	if _, ok := hc.mutation.MinTemp(); !ok {
		return &ValidationError{Name: "min_temp", err: errors.New(`ent: missing required field "Heartbeat.min_temp"`)}
	}
	if _, ok := hc.mutation.MosStatus(); !ok {
		return &ValidationError{Name: "mos_status", err: errors.New(`ent: missing required field "Heartbeat.mos_status"`)}
	}
	if _, ok := hc.mutation.MonVoltage(); !ok {
		return &ValidationError{Name: "mon_voltage", err: errors.New(`ent: missing required field "Heartbeat.mon_voltage"`)}
	}
	if _, ok := hc.mutation.Temp(); !ok {
		return &ValidationError{Name: "temp", err: errors.New(`ent: missing required field "Heartbeat.temp"`)}
	}
	if _, ok := hc.mutation.MosTemp(); !ok {
		return &ValidationError{Name: "mos_temp", err: errors.New(`ent: missing required field "Heartbeat.mos_temp"`)}
	}
	if _, ok := hc.mutation.EnvTemp(); !ok {
		return &ValidationError{Name: "env_temp", err: errors.New(`ent: missing required field "Heartbeat.env_temp"`)}
	}
	if _, ok := hc.mutation.Geom(); !ok {
		return &ValidationError{Name: "geom", err: errors.New(`ent: missing required field "Heartbeat.geom"`)}
	}
	if _, ok := hc.mutation.Gps(); !ok {
		return &ValidationError{Name: "gps", err: errors.New(`ent: missing required field "Heartbeat.gps"`)}
	}
	if _, ok := hc.mutation.Strength(); !ok {
		return &ValidationError{Name: "strength", err: errors.New(`ent: missing required field "Heartbeat.strength"`)}
	}
	if _, ok := hc.mutation.Cycles(); !ok {
		return &ValidationError{Name: "cycles", err: errors.New(`ent: missing required field "Heartbeat.cycles"`)}
	}
	if _, ok := hc.mutation.ChargingTime(); !ok {
		return &ValidationError{Name: "charging_time", err: errors.New(`ent: missing required field "Heartbeat.charging_time"`)}
	}
	if _, ok := hc.mutation.DisChargingTime(); !ok {
		return &ValidationError{Name: "dis_charging_time", err: errors.New(`ent: missing required field "Heartbeat.dis_charging_time"`)}
	}
	if _, ok := hc.mutation.UsingTime(); !ok {
		return &ValidationError{Name: "using_time", err: errors.New(`ent: missing required field "Heartbeat.using_time"`)}
	}
	if _, ok := hc.mutation.TotalChargingTime(); !ok {
		return &ValidationError{Name: "total_charging_time", err: errors.New(`ent: missing required field "Heartbeat.total_charging_time"`)}
	}
	if _, ok := hc.mutation.TotalDisChargingTime(); !ok {
		return &ValidationError{Name: "total_dis_charging_time", err: errors.New(`ent: missing required field "Heartbeat.total_dis_charging_time"`)}
	}
	if _, ok := hc.mutation.TotalUsingTime(); !ok {
		return &ValidationError{Name: "total_using_time", err: errors.New(`ent: missing required field "Heartbeat.total_using_time"`)}
	}
	if _, ok := hc.mutation.BatteryID(); !ok {
		return &ValidationError{Name: "battery", err: errors.New(`ent: missing required edge "Heartbeat.battery"`)}
	}
	return nil
}

func (hc *HeartbeatCreate) sqlSave(ctx context.Context) (*Heartbeat, error) {
	if err := hc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	hc.mutation.id = &_node.ID
	hc.mutation.done = true
	return _node, nil
}

func (hc *HeartbeatCreate) createSpec() (*Heartbeat, *sqlgraph.CreateSpec) {
	var (
		_node = &Heartbeat{config: hc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: heartbeat.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: heartbeat.FieldID,
			},
		}
	)
	_spec.OnConflict = hc.conflict
	if value, ok := hc.mutation.Sn(); ok {
		_spec.SetField(heartbeat.FieldSn, field.TypeString, value)
		_node.Sn = value
	}
	if value, ok := hc.mutation.CreatedAt(); ok {
		_spec.SetField(heartbeat.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := hc.mutation.Voltage(); ok {
		_spec.SetField(heartbeat.FieldVoltage, field.TypeFloat64, value)
		_node.Voltage = value
	}
	if value, ok := hc.mutation.Current(); ok {
		_spec.SetField(heartbeat.FieldCurrent, field.TypeFloat64, value)
		_node.Current = value
	}
	if value, ok := hc.mutation.Soc(); ok {
		_spec.SetField(heartbeat.FieldSoc, field.TypeUint8, value)
		_node.Soc = value
	}
	if value, ok := hc.mutation.Soh(); ok {
		_spec.SetField(heartbeat.FieldSoh, field.TypeUint8, value)
		_node.Soh = value
	}
	if value, ok := hc.mutation.InCabinet(); ok {
		_spec.SetField(heartbeat.FieldInCabinet, field.TypeBool, value)
		_node.InCabinet = value
	}
	if value, ok := hc.mutation.Capacity(); ok {
		_spec.SetField(heartbeat.FieldCapacity, field.TypeFloat64, value)
		_node.Capacity = value
	}
	if value, ok := hc.mutation.MonMaxVoltage(); ok {
		_spec.SetField(heartbeat.FieldMonMaxVoltage, field.TypeUint16, value)
		_node.MonMaxVoltage = value
	}
	if value, ok := hc.mutation.MonMaxVoltagePos(); ok {
		_spec.SetField(heartbeat.FieldMonMaxVoltagePos, field.TypeUint8, value)
		_node.MonMaxVoltagePos = value
	}
	if value, ok := hc.mutation.MonMinVoltage(); ok {
		_spec.SetField(heartbeat.FieldMonMinVoltage, field.TypeUint16, value)
		_node.MonMinVoltage = value
	}
	if value, ok := hc.mutation.MonMinVoltagePos(); ok {
		_spec.SetField(heartbeat.FieldMonMinVoltagePos, field.TypeUint8, value)
		_node.MonMinVoltagePos = value
	}
	if value, ok := hc.mutation.MaxTemp(); ok {
		_spec.SetField(heartbeat.FieldMaxTemp, field.TypeUint16, value)
		_node.MaxTemp = value
	}
	if value, ok := hc.mutation.MinTemp(); ok {
		_spec.SetField(heartbeat.FieldMinTemp, field.TypeUint16, value)
		_node.MinTemp = value
	}
	if value, ok := hc.mutation.Faults(); ok {
		_spec.SetField(heartbeat.FieldFaults, field.TypeJSON, value)
		_node.Faults = value
	}
	if value, ok := hc.mutation.MosStatus(); ok {
		_spec.SetField(heartbeat.FieldMosStatus, field.TypeJSON, value)
		_node.MosStatus = value
	}
	if value, ok := hc.mutation.MonVoltage(); ok {
		_spec.SetField(heartbeat.FieldMonVoltage, field.TypeJSON, value)
		_node.MonVoltage = value
	}
	if value, ok := hc.mutation.Temp(); ok {
		_spec.SetField(heartbeat.FieldTemp, field.TypeJSON, value)
		_node.Temp = value
	}
	if value, ok := hc.mutation.MosTemp(); ok {
		_spec.SetField(heartbeat.FieldMosTemp, field.TypeUint16, value)
		_node.MosTemp = value
	}
	if value, ok := hc.mutation.EnvTemp(); ok {
		_spec.SetField(heartbeat.FieldEnvTemp, field.TypeUint16, value)
		_node.EnvTemp = value
	}
	if value, ok := hc.mutation.Geom(); ok {
		_spec.SetField(heartbeat.FieldGeom, field.TypeOther, value)
		_node.Geom = value
	}
	if value, ok := hc.mutation.Gps(); ok {
		_spec.SetField(heartbeat.FieldGps, field.TypeOther, value)
		_node.Gps = value
	}
	if value, ok := hc.mutation.Strength(); ok {
		_spec.SetField(heartbeat.FieldStrength, field.TypeUint8, value)
		_node.Strength = value
	}
	if value, ok := hc.mutation.Cycles(); ok {
		_spec.SetField(heartbeat.FieldCycles, field.TypeUint16, value)
		_node.Cycles = value
	}
	if value, ok := hc.mutation.ChargingTime(); ok {
		_spec.SetField(heartbeat.FieldChargingTime, field.TypeUint32, value)
		_node.ChargingTime = value
	}
	if value, ok := hc.mutation.DisChargingTime(); ok {
		_spec.SetField(heartbeat.FieldDisChargingTime, field.TypeUint32, value)
		_node.DisChargingTime = value
	}
	if value, ok := hc.mutation.UsingTime(); ok {
		_spec.SetField(heartbeat.FieldUsingTime, field.TypeUint32, value)
		_node.UsingTime = value
	}
	if value, ok := hc.mutation.TotalChargingTime(); ok {
		_spec.SetField(heartbeat.FieldTotalChargingTime, field.TypeUint32, value)
		_node.TotalChargingTime = value
	}
	if value, ok := hc.mutation.TotalDisChargingTime(); ok {
		_spec.SetField(heartbeat.FieldTotalDisChargingTime, field.TypeUint32, value)
		_node.TotalDisChargingTime = value
	}
	if value, ok := hc.mutation.TotalUsingTime(); ok {
		_spec.SetField(heartbeat.FieldTotalUsingTime, field.TypeUint32, value)
		_node.TotalUsingTime = value
	}
	if nodes := hc.mutation.BatteryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   heartbeat.BatteryTable,
			Columns: []string{heartbeat.BatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: battery.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BatteryID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Heartbeat.Create().
//		SetSn(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HeartbeatUpsert) {
//			SetSn(v+v).
//		}).
//		Exec(ctx)
func (hc *HeartbeatCreate) OnConflict(opts ...sql.ConflictOption) *HeartbeatUpsertOne {
	hc.conflict = opts
	return &HeartbeatUpsertOne{
		create: hc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Heartbeat.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hc *HeartbeatCreate) OnConflictColumns(columns ...string) *HeartbeatUpsertOne {
	hc.conflict = append(hc.conflict, sql.ConflictColumns(columns...))
	return &HeartbeatUpsertOne{
		create: hc,
	}
}

type (
	// HeartbeatUpsertOne is the builder for "upsert"-ing
	//  one Heartbeat node.
	HeartbeatUpsertOne struct {
		create *HeartbeatCreate
	}

	// HeartbeatUpsert is the "OnConflict" setter.
	HeartbeatUpsert struct {
		*sql.UpdateSet
	}
)

// SetSn sets the "sn" field.
func (u *HeartbeatUpsert) SetSn(v string) *HeartbeatUpsert {
	u.Set(heartbeat.FieldSn, v)
	return u
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *HeartbeatUpsert) UpdateSn() *HeartbeatUpsert {
	u.SetExcluded(heartbeat.FieldSn)
	return u
}

// SetBatteryID sets the "battery_id" field.
func (u *HeartbeatUpsert) SetBatteryID(v int) *HeartbeatUpsert {
	u.Set(heartbeat.FieldBatteryID, v)
	return u
}

// UpdateBatteryID sets the "battery_id" field to the value that was provided on create.
func (u *HeartbeatUpsert) UpdateBatteryID() *HeartbeatUpsert {
	u.SetExcluded(heartbeat.FieldBatteryID)
	return u
}

// SetVoltage sets the "voltage" field.
func (u *HeartbeatUpsert) SetVoltage(v float64) *HeartbeatUpsert {
	u.Set(heartbeat.FieldVoltage, v)
	return u
}

// UpdateVoltage sets the "voltage" field to the value that was provided on create.
func (u *HeartbeatUpsert) UpdateVoltage() *HeartbeatUpsert {
	u.SetExcluded(heartbeat.FieldVoltage)
	return u
}

// AddVoltage adds v to the "voltage" field.
func (u *HeartbeatUpsert) AddVoltage(v float64) *HeartbeatUpsert {
	u.Add(heartbeat.FieldVoltage, v)
	return u
}

// SetCurrent sets the "current" field.
func (u *HeartbeatUpsert) SetCurrent(v float64) *HeartbeatUpsert {
	u.Set(heartbeat.FieldCurrent, v)
	return u
}

// UpdateCurrent sets the "current" field to the value that was provided on create.
func (u *HeartbeatUpsert) UpdateCurrent() *HeartbeatUpsert {
	u.SetExcluded(heartbeat.FieldCurrent)
	return u
}

// AddCurrent adds v to the "current" field.
func (u *HeartbeatUpsert) AddCurrent(v float64) *HeartbeatUpsert {
	u.Add(heartbeat.FieldCurrent, v)
	return u
}

// SetSoc sets the "soc" field.
func (u *HeartbeatUpsert) SetSoc(v uint8) *HeartbeatUpsert {
	u.Set(heartbeat.FieldSoc, v)
	return u
}

// UpdateSoc sets the "soc" field to the value that was provided on create.
func (u *HeartbeatUpsert) UpdateSoc() *HeartbeatUpsert {
	u.SetExcluded(heartbeat.FieldSoc)
	return u
}

// AddSoc adds v to the "soc" field.
func (u *HeartbeatUpsert) AddSoc(v uint8) *HeartbeatUpsert {
	u.Add(heartbeat.FieldSoc, v)
	return u
}

// SetSoh sets the "soh" field.
func (u *HeartbeatUpsert) SetSoh(v uint8) *HeartbeatUpsert {
	u.Set(heartbeat.FieldSoh, v)
	return u
}

// UpdateSoh sets the "soh" field to the value that was provided on create.
func (u *HeartbeatUpsert) UpdateSoh() *HeartbeatUpsert {
	u.SetExcluded(heartbeat.FieldSoh)
	return u
}

// AddSoh adds v to the "soh" field.
func (u *HeartbeatUpsert) AddSoh(v uint8) *HeartbeatUpsert {
	u.Add(heartbeat.FieldSoh, v)
	return u
}

// SetInCabinet sets the "in_cabinet" field.
func (u *HeartbeatUpsert) SetInCabinet(v bool) *HeartbeatUpsert {
	u.Set(heartbeat.FieldInCabinet, v)
	return u
}

// UpdateInCabinet sets the "in_cabinet" field to the value that was provided on create.
func (u *HeartbeatUpsert) UpdateInCabinet() *HeartbeatUpsert {
	u.SetExcluded(heartbeat.FieldInCabinet)
	return u
}

// SetCapacity sets the "capacity" field.
func (u *HeartbeatUpsert) SetCapacity(v float64) *HeartbeatUpsert {
	u.Set(heartbeat.FieldCapacity, v)
	return u
}

// UpdateCapacity sets the "capacity" field to the value that was provided on create.
func (u *HeartbeatUpsert) UpdateCapacity() *HeartbeatUpsert {
	u.SetExcluded(heartbeat.FieldCapacity)
	return u
}

// AddCapacity adds v to the "capacity" field.
func (u *HeartbeatUpsert) AddCapacity(v float64) *HeartbeatUpsert {
	u.Add(heartbeat.FieldCapacity, v)
	return u
}

// SetMonMaxVoltage sets the "mon_max_voltage" field.
func (u *HeartbeatUpsert) SetMonMaxVoltage(v uint16) *HeartbeatUpsert {
	u.Set(heartbeat.FieldMonMaxVoltage, v)
	return u
}

// UpdateMonMaxVoltage sets the "mon_max_voltage" field to the value that was provided on create.
func (u *HeartbeatUpsert) UpdateMonMaxVoltage() *HeartbeatUpsert {
	u.SetExcluded(heartbeat.FieldMonMaxVoltage)
	return u
}

// AddMonMaxVoltage adds v to the "mon_max_voltage" field.
func (u *HeartbeatUpsert) AddMonMaxVoltage(v uint16) *HeartbeatUpsert {
	u.Add(heartbeat.FieldMonMaxVoltage, v)
	return u
}

// SetMonMaxVoltagePos sets the "mon_max_voltage_pos" field.
func (u *HeartbeatUpsert) SetMonMaxVoltagePos(v uint8) *HeartbeatUpsert {
	u.Set(heartbeat.FieldMonMaxVoltagePos, v)
	return u
}

// UpdateMonMaxVoltagePos sets the "mon_max_voltage_pos" field to the value that was provided on create.
func (u *HeartbeatUpsert) UpdateMonMaxVoltagePos() *HeartbeatUpsert {
	u.SetExcluded(heartbeat.FieldMonMaxVoltagePos)
	return u
}

// AddMonMaxVoltagePos adds v to the "mon_max_voltage_pos" field.
func (u *HeartbeatUpsert) AddMonMaxVoltagePos(v uint8) *HeartbeatUpsert {
	u.Add(heartbeat.FieldMonMaxVoltagePos, v)
	return u
}

// SetMonMinVoltage sets the "mon_min_voltage" field.
func (u *HeartbeatUpsert) SetMonMinVoltage(v uint16) *HeartbeatUpsert {
	u.Set(heartbeat.FieldMonMinVoltage, v)
	return u
}

// UpdateMonMinVoltage sets the "mon_min_voltage" field to the value that was provided on create.
func (u *HeartbeatUpsert) UpdateMonMinVoltage() *HeartbeatUpsert {
	u.SetExcluded(heartbeat.FieldMonMinVoltage)
	return u
}

// AddMonMinVoltage adds v to the "mon_min_voltage" field.
func (u *HeartbeatUpsert) AddMonMinVoltage(v uint16) *HeartbeatUpsert {
	u.Add(heartbeat.FieldMonMinVoltage, v)
	return u
}

// SetMonMinVoltagePos sets the "mon_min_voltage_pos" field.
func (u *HeartbeatUpsert) SetMonMinVoltagePos(v uint8) *HeartbeatUpsert {
	u.Set(heartbeat.FieldMonMinVoltagePos, v)
	return u
}

// UpdateMonMinVoltagePos sets the "mon_min_voltage_pos" field to the value that was provided on create.
func (u *HeartbeatUpsert) UpdateMonMinVoltagePos() *HeartbeatUpsert {
	u.SetExcluded(heartbeat.FieldMonMinVoltagePos)
	return u
}

// AddMonMinVoltagePos adds v to the "mon_min_voltage_pos" field.
func (u *HeartbeatUpsert) AddMonMinVoltagePos(v uint8) *HeartbeatUpsert {
	u.Add(heartbeat.FieldMonMinVoltagePos, v)
	return u
}

// SetMaxTemp sets the "max_temp" field.
func (u *HeartbeatUpsert) SetMaxTemp(v uint16) *HeartbeatUpsert {
	u.Set(heartbeat.FieldMaxTemp, v)
	return u
}

// UpdateMaxTemp sets the "max_temp" field to the value that was provided on create.
func (u *HeartbeatUpsert) UpdateMaxTemp() *HeartbeatUpsert {
	u.SetExcluded(heartbeat.FieldMaxTemp)
	return u
}

// AddMaxTemp adds v to the "max_temp" field.
func (u *HeartbeatUpsert) AddMaxTemp(v uint16) *HeartbeatUpsert {
	u.Add(heartbeat.FieldMaxTemp, v)
	return u
}

// SetMinTemp sets the "min_temp" field.
func (u *HeartbeatUpsert) SetMinTemp(v uint16) *HeartbeatUpsert {
	u.Set(heartbeat.FieldMinTemp, v)
	return u
}

// UpdateMinTemp sets the "min_temp" field to the value that was provided on create.
func (u *HeartbeatUpsert) UpdateMinTemp() *HeartbeatUpsert {
	u.SetExcluded(heartbeat.FieldMinTemp)
	return u
}

// AddMinTemp adds v to the "min_temp" field.
func (u *HeartbeatUpsert) AddMinTemp(v uint16) *HeartbeatUpsert {
	u.Add(heartbeat.FieldMinTemp, v)
	return u
}

// SetFaults sets the "faults" field.
func (u *HeartbeatUpsert) SetFaults(v *xcdef.Faults) *HeartbeatUpsert {
	u.Set(heartbeat.FieldFaults, v)
	return u
}

// UpdateFaults sets the "faults" field to the value that was provided on create.
func (u *HeartbeatUpsert) UpdateFaults() *HeartbeatUpsert {
	u.SetExcluded(heartbeat.FieldFaults)
	return u
}

// ClearFaults clears the value of the "faults" field.
func (u *HeartbeatUpsert) ClearFaults() *HeartbeatUpsert {
	u.SetNull(heartbeat.FieldFaults)
	return u
}

// SetMosStatus sets the "mos_status" field.
func (u *HeartbeatUpsert) SetMosStatus(v *xcdef.MosStatus) *HeartbeatUpsert {
	u.Set(heartbeat.FieldMosStatus, v)
	return u
}

// UpdateMosStatus sets the "mos_status" field to the value that was provided on create.
func (u *HeartbeatUpsert) UpdateMosStatus() *HeartbeatUpsert {
	u.SetExcluded(heartbeat.FieldMosStatus)
	return u
}

// SetMonVoltage sets the "mon_voltage" field.
func (u *HeartbeatUpsert) SetMonVoltage(v *xcdef.MonVoltage) *HeartbeatUpsert {
	u.Set(heartbeat.FieldMonVoltage, v)
	return u
}

// UpdateMonVoltage sets the "mon_voltage" field to the value that was provided on create.
func (u *HeartbeatUpsert) UpdateMonVoltage() *HeartbeatUpsert {
	u.SetExcluded(heartbeat.FieldMonVoltage)
	return u
}

// SetTemp sets the "temp" field.
func (u *HeartbeatUpsert) SetTemp(v *xcdef.Temperature) *HeartbeatUpsert {
	u.Set(heartbeat.FieldTemp, v)
	return u
}

// UpdateTemp sets the "temp" field to the value that was provided on create.
func (u *HeartbeatUpsert) UpdateTemp() *HeartbeatUpsert {
	u.SetExcluded(heartbeat.FieldTemp)
	return u
}

// SetMosTemp sets the "mos_temp" field.
func (u *HeartbeatUpsert) SetMosTemp(v uint16) *HeartbeatUpsert {
	u.Set(heartbeat.FieldMosTemp, v)
	return u
}

// UpdateMosTemp sets the "mos_temp" field to the value that was provided on create.
func (u *HeartbeatUpsert) UpdateMosTemp() *HeartbeatUpsert {
	u.SetExcluded(heartbeat.FieldMosTemp)
	return u
}

// AddMosTemp adds v to the "mos_temp" field.
func (u *HeartbeatUpsert) AddMosTemp(v uint16) *HeartbeatUpsert {
	u.Add(heartbeat.FieldMosTemp, v)
	return u
}

// SetEnvTemp sets the "env_temp" field.
func (u *HeartbeatUpsert) SetEnvTemp(v uint16) *HeartbeatUpsert {
	u.Set(heartbeat.FieldEnvTemp, v)
	return u
}

// UpdateEnvTemp sets the "env_temp" field to the value that was provided on create.
func (u *HeartbeatUpsert) UpdateEnvTemp() *HeartbeatUpsert {
	u.SetExcluded(heartbeat.FieldEnvTemp)
	return u
}

// AddEnvTemp adds v to the "env_temp" field.
func (u *HeartbeatUpsert) AddEnvTemp(v uint16) *HeartbeatUpsert {
	u.Add(heartbeat.FieldEnvTemp, v)
	return u
}

// SetGeom sets the "geom" field.
func (u *HeartbeatUpsert) SetGeom(v *adapter.Geometry) *HeartbeatUpsert {
	u.Set(heartbeat.FieldGeom, v)
	return u
}

// UpdateGeom sets the "geom" field to the value that was provided on create.
func (u *HeartbeatUpsert) UpdateGeom() *HeartbeatUpsert {
	u.SetExcluded(heartbeat.FieldGeom)
	return u
}

// SetGps sets the "gps" field.
func (u *HeartbeatUpsert) SetGps(v xcdef.GPSStatus) *HeartbeatUpsert {
	u.Set(heartbeat.FieldGps, v)
	return u
}

// UpdateGps sets the "gps" field to the value that was provided on create.
func (u *HeartbeatUpsert) UpdateGps() *HeartbeatUpsert {
	u.SetExcluded(heartbeat.FieldGps)
	return u
}

// SetStrength sets the "strength" field.
func (u *HeartbeatUpsert) SetStrength(v uint8) *HeartbeatUpsert {
	u.Set(heartbeat.FieldStrength, v)
	return u
}

// UpdateStrength sets the "strength" field to the value that was provided on create.
func (u *HeartbeatUpsert) UpdateStrength() *HeartbeatUpsert {
	u.SetExcluded(heartbeat.FieldStrength)
	return u
}

// AddStrength adds v to the "strength" field.
func (u *HeartbeatUpsert) AddStrength(v uint8) *HeartbeatUpsert {
	u.Add(heartbeat.FieldStrength, v)
	return u
}

// SetCycles sets the "cycles" field.
func (u *HeartbeatUpsert) SetCycles(v uint16) *HeartbeatUpsert {
	u.Set(heartbeat.FieldCycles, v)
	return u
}

// UpdateCycles sets the "cycles" field to the value that was provided on create.
func (u *HeartbeatUpsert) UpdateCycles() *HeartbeatUpsert {
	u.SetExcluded(heartbeat.FieldCycles)
	return u
}

// AddCycles adds v to the "cycles" field.
func (u *HeartbeatUpsert) AddCycles(v uint16) *HeartbeatUpsert {
	u.Add(heartbeat.FieldCycles, v)
	return u
}

// SetChargingTime sets the "charging_time" field.
func (u *HeartbeatUpsert) SetChargingTime(v uint32) *HeartbeatUpsert {
	u.Set(heartbeat.FieldChargingTime, v)
	return u
}

// UpdateChargingTime sets the "charging_time" field to the value that was provided on create.
func (u *HeartbeatUpsert) UpdateChargingTime() *HeartbeatUpsert {
	u.SetExcluded(heartbeat.FieldChargingTime)
	return u
}

// AddChargingTime adds v to the "charging_time" field.
func (u *HeartbeatUpsert) AddChargingTime(v uint32) *HeartbeatUpsert {
	u.Add(heartbeat.FieldChargingTime, v)
	return u
}

// SetDisChargingTime sets the "dis_charging_time" field.
func (u *HeartbeatUpsert) SetDisChargingTime(v uint32) *HeartbeatUpsert {
	u.Set(heartbeat.FieldDisChargingTime, v)
	return u
}

// UpdateDisChargingTime sets the "dis_charging_time" field to the value that was provided on create.
func (u *HeartbeatUpsert) UpdateDisChargingTime() *HeartbeatUpsert {
	u.SetExcluded(heartbeat.FieldDisChargingTime)
	return u
}

// AddDisChargingTime adds v to the "dis_charging_time" field.
func (u *HeartbeatUpsert) AddDisChargingTime(v uint32) *HeartbeatUpsert {
	u.Add(heartbeat.FieldDisChargingTime, v)
	return u
}

// SetUsingTime sets the "using_time" field.
func (u *HeartbeatUpsert) SetUsingTime(v uint32) *HeartbeatUpsert {
	u.Set(heartbeat.FieldUsingTime, v)
	return u
}

// UpdateUsingTime sets the "using_time" field to the value that was provided on create.
func (u *HeartbeatUpsert) UpdateUsingTime() *HeartbeatUpsert {
	u.SetExcluded(heartbeat.FieldUsingTime)
	return u
}

// AddUsingTime adds v to the "using_time" field.
func (u *HeartbeatUpsert) AddUsingTime(v uint32) *HeartbeatUpsert {
	u.Add(heartbeat.FieldUsingTime, v)
	return u
}

// SetTotalChargingTime sets the "total_charging_time" field.
func (u *HeartbeatUpsert) SetTotalChargingTime(v uint32) *HeartbeatUpsert {
	u.Set(heartbeat.FieldTotalChargingTime, v)
	return u
}

// UpdateTotalChargingTime sets the "total_charging_time" field to the value that was provided on create.
func (u *HeartbeatUpsert) UpdateTotalChargingTime() *HeartbeatUpsert {
	u.SetExcluded(heartbeat.FieldTotalChargingTime)
	return u
}

// AddTotalChargingTime adds v to the "total_charging_time" field.
func (u *HeartbeatUpsert) AddTotalChargingTime(v uint32) *HeartbeatUpsert {
	u.Add(heartbeat.FieldTotalChargingTime, v)
	return u
}

// SetTotalDisChargingTime sets the "total_dis_charging_time" field.
func (u *HeartbeatUpsert) SetTotalDisChargingTime(v uint32) *HeartbeatUpsert {
	u.Set(heartbeat.FieldTotalDisChargingTime, v)
	return u
}

// UpdateTotalDisChargingTime sets the "total_dis_charging_time" field to the value that was provided on create.
func (u *HeartbeatUpsert) UpdateTotalDisChargingTime() *HeartbeatUpsert {
	u.SetExcluded(heartbeat.FieldTotalDisChargingTime)
	return u
}

// AddTotalDisChargingTime adds v to the "total_dis_charging_time" field.
func (u *HeartbeatUpsert) AddTotalDisChargingTime(v uint32) *HeartbeatUpsert {
	u.Add(heartbeat.FieldTotalDisChargingTime, v)
	return u
}

// SetTotalUsingTime sets the "total_using_time" field.
func (u *HeartbeatUpsert) SetTotalUsingTime(v uint32) *HeartbeatUpsert {
	u.Set(heartbeat.FieldTotalUsingTime, v)
	return u
}

// UpdateTotalUsingTime sets the "total_using_time" field to the value that was provided on create.
func (u *HeartbeatUpsert) UpdateTotalUsingTime() *HeartbeatUpsert {
	u.SetExcluded(heartbeat.FieldTotalUsingTime)
	return u
}

// AddTotalUsingTime adds v to the "total_using_time" field.
func (u *HeartbeatUpsert) AddTotalUsingTime(v uint32) *HeartbeatUpsert {
	u.Add(heartbeat.FieldTotalUsingTime, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Heartbeat.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *HeartbeatUpsertOne) UpdateNewValues() *HeartbeatUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(heartbeat.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Heartbeat.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *HeartbeatUpsertOne) Ignore() *HeartbeatUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HeartbeatUpsertOne) DoNothing() *HeartbeatUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HeartbeatCreate.OnConflict
// documentation for more info.
func (u *HeartbeatUpsertOne) Update(set func(*HeartbeatUpsert)) *HeartbeatUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HeartbeatUpsert{UpdateSet: update})
	}))
	return u
}

// SetSn sets the "sn" field.
func (u *HeartbeatUpsertOne) SetSn(v string) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetSn(v)
	})
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *HeartbeatUpsertOne) UpdateSn() *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateSn()
	})
}

// SetBatteryID sets the "battery_id" field.
func (u *HeartbeatUpsertOne) SetBatteryID(v int) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetBatteryID(v)
	})
}

// UpdateBatteryID sets the "battery_id" field to the value that was provided on create.
func (u *HeartbeatUpsertOne) UpdateBatteryID() *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateBatteryID()
	})
}

// SetVoltage sets the "voltage" field.
func (u *HeartbeatUpsertOne) SetVoltage(v float64) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetVoltage(v)
	})
}

// AddVoltage adds v to the "voltage" field.
func (u *HeartbeatUpsertOne) AddVoltage(v float64) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddVoltage(v)
	})
}

// UpdateVoltage sets the "voltage" field to the value that was provided on create.
func (u *HeartbeatUpsertOne) UpdateVoltage() *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateVoltage()
	})
}

// SetCurrent sets the "current" field.
func (u *HeartbeatUpsertOne) SetCurrent(v float64) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetCurrent(v)
	})
}

// AddCurrent adds v to the "current" field.
func (u *HeartbeatUpsertOne) AddCurrent(v float64) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddCurrent(v)
	})
}

// UpdateCurrent sets the "current" field to the value that was provided on create.
func (u *HeartbeatUpsertOne) UpdateCurrent() *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateCurrent()
	})
}

// SetSoc sets the "soc" field.
func (u *HeartbeatUpsertOne) SetSoc(v uint8) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetSoc(v)
	})
}

// AddSoc adds v to the "soc" field.
func (u *HeartbeatUpsertOne) AddSoc(v uint8) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddSoc(v)
	})
}

// UpdateSoc sets the "soc" field to the value that was provided on create.
func (u *HeartbeatUpsertOne) UpdateSoc() *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateSoc()
	})
}

// SetSoh sets the "soh" field.
func (u *HeartbeatUpsertOne) SetSoh(v uint8) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetSoh(v)
	})
}

// AddSoh adds v to the "soh" field.
func (u *HeartbeatUpsertOne) AddSoh(v uint8) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddSoh(v)
	})
}

// UpdateSoh sets the "soh" field to the value that was provided on create.
func (u *HeartbeatUpsertOne) UpdateSoh() *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateSoh()
	})
}

// SetInCabinet sets the "in_cabinet" field.
func (u *HeartbeatUpsertOne) SetInCabinet(v bool) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetInCabinet(v)
	})
}

// UpdateInCabinet sets the "in_cabinet" field to the value that was provided on create.
func (u *HeartbeatUpsertOne) UpdateInCabinet() *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateInCabinet()
	})
}

// SetCapacity sets the "capacity" field.
func (u *HeartbeatUpsertOne) SetCapacity(v float64) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetCapacity(v)
	})
}

// AddCapacity adds v to the "capacity" field.
func (u *HeartbeatUpsertOne) AddCapacity(v float64) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddCapacity(v)
	})
}

// UpdateCapacity sets the "capacity" field to the value that was provided on create.
func (u *HeartbeatUpsertOne) UpdateCapacity() *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateCapacity()
	})
}

// SetMonMaxVoltage sets the "mon_max_voltage" field.
func (u *HeartbeatUpsertOne) SetMonMaxVoltage(v uint16) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetMonMaxVoltage(v)
	})
}

// AddMonMaxVoltage adds v to the "mon_max_voltage" field.
func (u *HeartbeatUpsertOne) AddMonMaxVoltage(v uint16) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddMonMaxVoltage(v)
	})
}

// UpdateMonMaxVoltage sets the "mon_max_voltage" field to the value that was provided on create.
func (u *HeartbeatUpsertOne) UpdateMonMaxVoltage() *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateMonMaxVoltage()
	})
}

// SetMonMaxVoltagePos sets the "mon_max_voltage_pos" field.
func (u *HeartbeatUpsertOne) SetMonMaxVoltagePos(v uint8) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetMonMaxVoltagePos(v)
	})
}

// AddMonMaxVoltagePos adds v to the "mon_max_voltage_pos" field.
func (u *HeartbeatUpsertOne) AddMonMaxVoltagePos(v uint8) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddMonMaxVoltagePos(v)
	})
}

// UpdateMonMaxVoltagePos sets the "mon_max_voltage_pos" field to the value that was provided on create.
func (u *HeartbeatUpsertOne) UpdateMonMaxVoltagePos() *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateMonMaxVoltagePos()
	})
}

// SetMonMinVoltage sets the "mon_min_voltage" field.
func (u *HeartbeatUpsertOne) SetMonMinVoltage(v uint16) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetMonMinVoltage(v)
	})
}

// AddMonMinVoltage adds v to the "mon_min_voltage" field.
func (u *HeartbeatUpsertOne) AddMonMinVoltage(v uint16) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddMonMinVoltage(v)
	})
}

// UpdateMonMinVoltage sets the "mon_min_voltage" field to the value that was provided on create.
func (u *HeartbeatUpsertOne) UpdateMonMinVoltage() *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateMonMinVoltage()
	})
}

// SetMonMinVoltagePos sets the "mon_min_voltage_pos" field.
func (u *HeartbeatUpsertOne) SetMonMinVoltagePos(v uint8) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetMonMinVoltagePos(v)
	})
}

// AddMonMinVoltagePos adds v to the "mon_min_voltage_pos" field.
func (u *HeartbeatUpsertOne) AddMonMinVoltagePos(v uint8) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddMonMinVoltagePos(v)
	})
}

// UpdateMonMinVoltagePos sets the "mon_min_voltage_pos" field to the value that was provided on create.
func (u *HeartbeatUpsertOne) UpdateMonMinVoltagePos() *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateMonMinVoltagePos()
	})
}

// SetMaxTemp sets the "max_temp" field.
func (u *HeartbeatUpsertOne) SetMaxTemp(v uint16) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetMaxTemp(v)
	})
}

// AddMaxTemp adds v to the "max_temp" field.
func (u *HeartbeatUpsertOne) AddMaxTemp(v uint16) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddMaxTemp(v)
	})
}

// UpdateMaxTemp sets the "max_temp" field to the value that was provided on create.
func (u *HeartbeatUpsertOne) UpdateMaxTemp() *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateMaxTemp()
	})
}

// SetMinTemp sets the "min_temp" field.
func (u *HeartbeatUpsertOne) SetMinTemp(v uint16) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetMinTemp(v)
	})
}

// AddMinTemp adds v to the "min_temp" field.
func (u *HeartbeatUpsertOne) AddMinTemp(v uint16) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddMinTemp(v)
	})
}

// UpdateMinTemp sets the "min_temp" field to the value that was provided on create.
func (u *HeartbeatUpsertOne) UpdateMinTemp() *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateMinTemp()
	})
}

// SetFaults sets the "faults" field.
func (u *HeartbeatUpsertOne) SetFaults(v *xcdef.Faults) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetFaults(v)
	})
}

// UpdateFaults sets the "faults" field to the value that was provided on create.
func (u *HeartbeatUpsertOne) UpdateFaults() *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateFaults()
	})
}

// ClearFaults clears the value of the "faults" field.
func (u *HeartbeatUpsertOne) ClearFaults() *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.ClearFaults()
	})
}

// SetMosStatus sets the "mos_status" field.
func (u *HeartbeatUpsertOne) SetMosStatus(v *xcdef.MosStatus) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetMosStatus(v)
	})
}

// UpdateMosStatus sets the "mos_status" field to the value that was provided on create.
func (u *HeartbeatUpsertOne) UpdateMosStatus() *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateMosStatus()
	})
}

// SetMonVoltage sets the "mon_voltage" field.
func (u *HeartbeatUpsertOne) SetMonVoltage(v *xcdef.MonVoltage) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetMonVoltage(v)
	})
}

// UpdateMonVoltage sets the "mon_voltage" field to the value that was provided on create.
func (u *HeartbeatUpsertOne) UpdateMonVoltage() *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateMonVoltage()
	})
}

// SetTemp sets the "temp" field.
func (u *HeartbeatUpsertOne) SetTemp(v *xcdef.Temperature) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetTemp(v)
	})
}

// UpdateTemp sets the "temp" field to the value that was provided on create.
func (u *HeartbeatUpsertOne) UpdateTemp() *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateTemp()
	})
}

// SetMosTemp sets the "mos_temp" field.
func (u *HeartbeatUpsertOne) SetMosTemp(v uint16) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetMosTemp(v)
	})
}

// AddMosTemp adds v to the "mos_temp" field.
func (u *HeartbeatUpsertOne) AddMosTemp(v uint16) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddMosTemp(v)
	})
}

// UpdateMosTemp sets the "mos_temp" field to the value that was provided on create.
func (u *HeartbeatUpsertOne) UpdateMosTemp() *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateMosTemp()
	})
}

// SetEnvTemp sets the "env_temp" field.
func (u *HeartbeatUpsertOne) SetEnvTemp(v uint16) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetEnvTemp(v)
	})
}

// AddEnvTemp adds v to the "env_temp" field.
func (u *HeartbeatUpsertOne) AddEnvTemp(v uint16) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddEnvTemp(v)
	})
}

// UpdateEnvTemp sets the "env_temp" field to the value that was provided on create.
func (u *HeartbeatUpsertOne) UpdateEnvTemp() *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateEnvTemp()
	})
}

// SetGeom sets the "geom" field.
func (u *HeartbeatUpsertOne) SetGeom(v *adapter.Geometry) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetGeom(v)
	})
}

// UpdateGeom sets the "geom" field to the value that was provided on create.
func (u *HeartbeatUpsertOne) UpdateGeom() *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateGeom()
	})
}

// SetGps sets the "gps" field.
func (u *HeartbeatUpsertOne) SetGps(v xcdef.GPSStatus) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetGps(v)
	})
}

// UpdateGps sets the "gps" field to the value that was provided on create.
func (u *HeartbeatUpsertOne) UpdateGps() *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateGps()
	})
}

// SetStrength sets the "strength" field.
func (u *HeartbeatUpsertOne) SetStrength(v uint8) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetStrength(v)
	})
}

// AddStrength adds v to the "strength" field.
func (u *HeartbeatUpsertOne) AddStrength(v uint8) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddStrength(v)
	})
}

// UpdateStrength sets the "strength" field to the value that was provided on create.
func (u *HeartbeatUpsertOne) UpdateStrength() *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateStrength()
	})
}

// SetCycles sets the "cycles" field.
func (u *HeartbeatUpsertOne) SetCycles(v uint16) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetCycles(v)
	})
}

// AddCycles adds v to the "cycles" field.
func (u *HeartbeatUpsertOne) AddCycles(v uint16) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddCycles(v)
	})
}

// UpdateCycles sets the "cycles" field to the value that was provided on create.
func (u *HeartbeatUpsertOne) UpdateCycles() *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateCycles()
	})
}

// SetChargingTime sets the "charging_time" field.
func (u *HeartbeatUpsertOne) SetChargingTime(v uint32) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetChargingTime(v)
	})
}

// AddChargingTime adds v to the "charging_time" field.
func (u *HeartbeatUpsertOne) AddChargingTime(v uint32) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddChargingTime(v)
	})
}

// UpdateChargingTime sets the "charging_time" field to the value that was provided on create.
func (u *HeartbeatUpsertOne) UpdateChargingTime() *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateChargingTime()
	})
}

// SetDisChargingTime sets the "dis_charging_time" field.
func (u *HeartbeatUpsertOne) SetDisChargingTime(v uint32) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetDisChargingTime(v)
	})
}

// AddDisChargingTime adds v to the "dis_charging_time" field.
func (u *HeartbeatUpsertOne) AddDisChargingTime(v uint32) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddDisChargingTime(v)
	})
}

// UpdateDisChargingTime sets the "dis_charging_time" field to the value that was provided on create.
func (u *HeartbeatUpsertOne) UpdateDisChargingTime() *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateDisChargingTime()
	})
}

// SetUsingTime sets the "using_time" field.
func (u *HeartbeatUpsertOne) SetUsingTime(v uint32) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetUsingTime(v)
	})
}

// AddUsingTime adds v to the "using_time" field.
func (u *HeartbeatUpsertOne) AddUsingTime(v uint32) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddUsingTime(v)
	})
}

// UpdateUsingTime sets the "using_time" field to the value that was provided on create.
func (u *HeartbeatUpsertOne) UpdateUsingTime() *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateUsingTime()
	})
}

// SetTotalChargingTime sets the "total_charging_time" field.
func (u *HeartbeatUpsertOne) SetTotalChargingTime(v uint32) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetTotalChargingTime(v)
	})
}

// AddTotalChargingTime adds v to the "total_charging_time" field.
func (u *HeartbeatUpsertOne) AddTotalChargingTime(v uint32) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddTotalChargingTime(v)
	})
}

// UpdateTotalChargingTime sets the "total_charging_time" field to the value that was provided on create.
func (u *HeartbeatUpsertOne) UpdateTotalChargingTime() *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateTotalChargingTime()
	})
}

// SetTotalDisChargingTime sets the "total_dis_charging_time" field.
func (u *HeartbeatUpsertOne) SetTotalDisChargingTime(v uint32) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetTotalDisChargingTime(v)
	})
}

// AddTotalDisChargingTime adds v to the "total_dis_charging_time" field.
func (u *HeartbeatUpsertOne) AddTotalDisChargingTime(v uint32) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddTotalDisChargingTime(v)
	})
}

// UpdateTotalDisChargingTime sets the "total_dis_charging_time" field to the value that was provided on create.
func (u *HeartbeatUpsertOne) UpdateTotalDisChargingTime() *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateTotalDisChargingTime()
	})
}

// SetTotalUsingTime sets the "total_using_time" field.
func (u *HeartbeatUpsertOne) SetTotalUsingTime(v uint32) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetTotalUsingTime(v)
	})
}

// AddTotalUsingTime adds v to the "total_using_time" field.
func (u *HeartbeatUpsertOne) AddTotalUsingTime(v uint32) *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddTotalUsingTime(v)
	})
}

// UpdateTotalUsingTime sets the "total_using_time" field to the value that was provided on create.
func (u *HeartbeatUpsertOne) UpdateTotalUsingTime() *HeartbeatUpsertOne {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateTotalUsingTime()
	})
}

// Exec executes the query.
func (u *HeartbeatUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HeartbeatCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HeartbeatUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *HeartbeatUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *HeartbeatUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// HeartbeatCreateBulk is the builder for creating many Heartbeat entities in bulk.
type HeartbeatCreateBulk struct {
	config
	builders []*HeartbeatCreate
	conflict []sql.ConflictOption
}

// Save creates the Heartbeat entities in the database.
func (hcb *HeartbeatCreateBulk) Save(ctx context.Context) ([]*Heartbeat, error) {
	specs := make([]*sqlgraph.CreateSpec, len(hcb.builders))
	nodes := make([]*Heartbeat, len(hcb.builders))
	mutators := make([]Mutator, len(hcb.builders))
	for i := range hcb.builders {
		func(i int, root context.Context) {
			builder := hcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HeartbeatMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = hcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hcb *HeartbeatCreateBulk) SaveX(ctx context.Context) []*Heartbeat {
	v, err := hcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hcb *HeartbeatCreateBulk) Exec(ctx context.Context) error {
	_, err := hcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hcb *HeartbeatCreateBulk) ExecX(ctx context.Context) {
	if err := hcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Heartbeat.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HeartbeatUpsert) {
//			SetSn(v+v).
//		}).
//		Exec(ctx)
func (hcb *HeartbeatCreateBulk) OnConflict(opts ...sql.ConflictOption) *HeartbeatUpsertBulk {
	hcb.conflict = opts
	return &HeartbeatUpsertBulk{
		create: hcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Heartbeat.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hcb *HeartbeatCreateBulk) OnConflictColumns(columns ...string) *HeartbeatUpsertBulk {
	hcb.conflict = append(hcb.conflict, sql.ConflictColumns(columns...))
	return &HeartbeatUpsertBulk{
		create: hcb,
	}
}

// HeartbeatUpsertBulk is the builder for "upsert"-ing
// a bulk of Heartbeat nodes.
type HeartbeatUpsertBulk struct {
	create *HeartbeatCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Heartbeat.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *HeartbeatUpsertBulk) UpdateNewValues() *HeartbeatUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(heartbeat.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Heartbeat.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *HeartbeatUpsertBulk) Ignore() *HeartbeatUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HeartbeatUpsertBulk) DoNothing() *HeartbeatUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HeartbeatCreateBulk.OnConflict
// documentation for more info.
func (u *HeartbeatUpsertBulk) Update(set func(*HeartbeatUpsert)) *HeartbeatUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HeartbeatUpsert{UpdateSet: update})
	}))
	return u
}

// SetSn sets the "sn" field.
func (u *HeartbeatUpsertBulk) SetSn(v string) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetSn(v)
	})
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *HeartbeatUpsertBulk) UpdateSn() *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateSn()
	})
}

// SetBatteryID sets the "battery_id" field.
func (u *HeartbeatUpsertBulk) SetBatteryID(v int) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetBatteryID(v)
	})
}

// UpdateBatteryID sets the "battery_id" field to the value that was provided on create.
func (u *HeartbeatUpsertBulk) UpdateBatteryID() *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateBatteryID()
	})
}

// SetVoltage sets the "voltage" field.
func (u *HeartbeatUpsertBulk) SetVoltage(v float64) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetVoltage(v)
	})
}

// AddVoltage adds v to the "voltage" field.
func (u *HeartbeatUpsertBulk) AddVoltage(v float64) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddVoltage(v)
	})
}

// UpdateVoltage sets the "voltage" field to the value that was provided on create.
func (u *HeartbeatUpsertBulk) UpdateVoltage() *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateVoltage()
	})
}

// SetCurrent sets the "current" field.
func (u *HeartbeatUpsertBulk) SetCurrent(v float64) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetCurrent(v)
	})
}

// AddCurrent adds v to the "current" field.
func (u *HeartbeatUpsertBulk) AddCurrent(v float64) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddCurrent(v)
	})
}

// UpdateCurrent sets the "current" field to the value that was provided on create.
func (u *HeartbeatUpsertBulk) UpdateCurrent() *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateCurrent()
	})
}

// SetSoc sets the "soc" field.
func (u *HeartbeatUpsertBulk) SetSoc(v uint8) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetSoc(v)
	})
}

// AddSoc adds v to the "soc" field.
func (u *HeartbeatUpsertBulk) AddSoc(v uint8) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddSoc(v)
	})
}

// UpdateSoc sets the "soc" field to the value that was provided on create.
func (u *HeartbeatUpsertBulk) UpdateSoc() *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateSoc()
	})
}

// SetSoh sets the "soh" field.
func (u *HeartbeatUpsertBulk) SetSoh(v uint8) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetSoh(v)
	})
}

// AddSoh adds v to the "soh" field.
func (u *HeartbeatUpsertBulk) AddSoh(v uint8) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddSoh(v)
	})
}

// UpdateSoh sets the "soh" field to the value that was provided on create.
func (u *HeartbeatUpsertBulk) UpdateSoh() *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateSoh()
	})
}

// SetInCabinet sets the "in_cabinet" field.
func (u *HeartbeatUpsertBulk) SetInCabinet(v bool) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetInCabinet(v)
	})
}

// UpdateInCabinet sets the "in_cabinet" field to the value that was provided on create.
func (u *HeartbeatUpsertBulk) UpdateInCabinet() *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateInCabinet()
	})
}

// SetCapacity sets the "capacity" field.
func (u *HeartbeatUpsertBulk) SetCapacity(v float64) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetCapacity(v)
	})
}

// AddCapacity adds v to the "capacity" field.
func (u *HeartbeatUpsertBulk) AddCapacity(v float64) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddCapacity(v)
	})
}

// UpdateCapacity sets the "capacity" field to the value that was provided on create.
func (u *HeartbeatUpsertBulk) UpdateCapacity() *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateCapacity()
	})
}

// SetMonMaxVoltage sets the "mon_max_voltage" field.
func (u *HeartbeatUpsertBulk) SetMonMaxVoltage(v uint16) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetMonMaxVoltage(v)
	})
}

// AddMonMaxVoltage adds v to the "mon_max_voltage" field.
func (u *HeartbeatUpsertBulk) AddMonMaxVoltage(v uint16) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddMonMaxVoltage(v)
	})
}

// UpdateMonMaxVoltage sets the "mon_max_voltage" field to the value that was provided on create.
func (u *HeartbeatUpsertBulk) UpdateMonMaxVoltage() *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateMonMaxVoltage()
	})
}

// SetMonMaxVoltagePos sets the "mon_max_voltage_pos" field.
func (u *HeartbeatUpsertBulk) SetMonMaxVoltagePos(v uint8) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetMonMaxVoltagePos(v)
	})
}

// AddMonMaxVoltagePos adds v to the "mon_max_voltage_pos" field.
func (u *HeartbeatUpsertBulk) AddMonMaxVoltagePos(v uint8) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddMonMaxVoltagePos(v)
	})
}

// UpdateMonMaxVoltagePos sets the "mon_max_voltage_pos" field to the value that was provided on create.
func (u *HeartbeatUpsertBulk) UpdateMonMaxVoltagePos() *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateMonMaxVoltagePos()
	})
}

// SetMonMinVoltage sets the "mon_min_voltage" field.
func (u *HeartbeatUpsertBulk) SetMonMinVoltage(v uint16) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetMonMinVoltage(v)
	})
}

// AddMonMinVoltage adds v to the "mon_min_voltage" field.
func (u *HeartbeatUpsertBulk) AddMonMinVoltage(v uint16) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddMonMinVoltage(v)
	})
}

// UpdateMonMinVoltage sets the "mon_min_voltage" field to the value that was provided on create.
func (u *HeartbeatUpsertBulk) UpdateMonMinVoltage() *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateMonMinVoltage()
	})
}

// SetMonMinVoltagePos sets the "mon_min_voltage_pos" field.
func (u *HeartbeatUpsertBulk) SetMonMinVoltagePos(v uint8) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetMonMinVoltagePos(v)
	})
}

// AddMonMinVoltagePos adds v to the "mon_min_voltage_pos" field.
func (u *HeartbeatUpsertBulk) AddMonMinVoltagePos(v uint8) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddMonMinVoltagePos(v)
	})
}

// UpdateMonMinVoltagePos sets the "mon_min_voltage_pos" field to the value that was provided on create.
func (u *HeartbeatUpsertBulk) UpdateMonMinVoltagePos() *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateMonMinVoltagePos()
	})
}

// SetMaxTemp sets the "max_temp" field.
func (u *HeartbeatUpsertBulk) SetMaxTemp(v uint16) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetMaxTemp(v)
	})
}

// AddMaxTemp adds v to the "max_temp" field.
func (u *HeartbeatUpsertBulk) AddMaxTemp(v uint16) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddMaxTemp(v)
	})
}

// UpdateMaxTemp sets the "max_temp" field to the value that was provided on create.
func (u *HeartbeatUpsertBulk) UpdateMaxTemp() *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateMaxTemp()
	})
}

// SetMinTemp sets the "min_temp" field.
func (u *HeartbeatUpsertBulk) SetMinTemp(v uint16) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetMinTemp(v)
	})
}

// AddMinTemp adds v to the "min_temp" field.
func (u *HeartbeatUpsertBulk) AddMinTemp(v uint16) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddMinTemp(v)
	})
}

// UpdateMinTemp sets the "min_temp" field to the value that was provided on create.
func (u *HeartbeatUpsertBulk) UpdateMinTemp() *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateMinTemp()
	})
}

// SetFaults sets the "faults" field.
func (u *HeartbeatUpsertBulk) SetFaults(v *xcdef.Faults) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetFaults(v)
	})
}

// UpdateFaults sets the "faults" field to the value that was provided on create.
func (u *HeartbeatUpsertBulk) UpdateFaults() *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateFaults()
	})
}

// ClearFaults clears the value of the "faults" field.
func (u *HeartbeatUpsertBulk) ClearFaults() *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.ClearFaults()
	})
}

// SetMosStatus sets the "mos_status" field.
func (u *HeartbeatUpsertBulk) SetMosStatus(v *xcdef.MosStatus) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetMosStatus(v)
	})
}

// UpdateMosStatus sets the "mos_status" field to the value that was provided on create.
func (u *HeartbeatUpsertBulk) UpdateMosStatus() *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateMosStatus()
	})
}

// SetMonVoltage sets the "mon_voltage" field.
func (u *HeartbeatUpsertBulk) SetMonVoltage(v *xcdef.MonVoltage) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetMonVoltage(v)
	})
}

// UpdateMonVoltage sets the "mon_voltage" field to the value that was provided on create.
func (u *HeartbeatUpsertBulk) UpdateMonVoltage() *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateMonVoltage()
	})
}

// SetTemp sets the "temp" field.
func (u *HeartbeatUpsertBulk) SetTemp(v *xcdef.Temperature) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetTemp(v)
	})
}

// UpdateTemp sets the "temp" field to the value that was provided on create.
func (u *HeartbeatUpsertBulk) UpdateTemp() *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateTemp()
	})
}

// SetMosTemp sets the "mos_temp" field.
func (u *HeartbeatUpsertBulk) SetMosTemp(v uint16) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetMosTemp(v)
	})
}

// AddMosTemp adds v to the "mos_temp" field.
func (u *HeartbeatUpsertBulk) AddMosTemp(v uint16) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddMosTemp(v)
	})
}

// UpdateMosTemp sets the "mos_temp" field to the value that was provided on create.
func (u *HeartbeatUpsertBulk) UpdateMosTemp() *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateMosTemp()
	})
}

// SetEnvTemp sets the "env_temp" field.
func (u *HeartbeatUpsertBulk) SetEnvTemp(v uint16) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetEnvTemp(v)
	})
}

// AddEnvTemp adds v to the "env_temp" field.
func (u *HeartbeatUpsertBulk) AddEnvTemp(v uint16) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddEnvTemp(v)
	})
}

// UpdateEnvTemp sets the "env_temp" field to the value that was provided on create.
func (u *HeartbeatUpsertBulk) UpdateEnvTemp() *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateEnvTemp()
	})
}

// SetGeom sets the "geom" field.
func (u *HeartbeatUpsertBulk) SetGeom(v *adapter.Geometry) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetGeom(v)
	})
}

// UpdateGeom sets the "geom" field to the value that was provided on create.
func (u *HeartbeatUpsertBulk) UpdateGeom() *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateGeom()
	})
}

// SetGps sets the "gps" field.
func (u *HeartbeatUpsertBulk) SetGps(v xcdef.GPSStatus) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetGps(v)
	})
}

// UpdateGps sets the "gps" field to the value that was provided on create.
func (u *HeartbeatUpsertBulk) UpdateGps() *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateGps()
	})
}

// SetStrength sets the "strength" field.
func (u *HeartbeatUpsertBulk) SetStrength(v uint8) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetStrength(v)
	})
}

// AddStrength adds v to the "strength" field.
func (u *HeartbeatUpsertBulk) AddStrength(v uint8) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddStrength(v)
	})
}

// UpdateStrength sets the "strength" field to the value that was provided on create.
func (u *HeartbeatUpsertBulk) UpdateStrength() *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateStrength()
	})
}

// SetCycles sets the "cycles" field.
func (u *HeartbeatUpsertBulk) SetCycles(v uint16) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetCycles(v)
	})
}

// AddCycles adds v to the "cycles" field.
func (u *HeartbeatUpsertBulk) AddCycles(v uint16) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddCycles(v)
	})
}

// UpdateCycles sets the "cycles" field to the value that was provided on create.
func (u *HeartbeatUpsertBulk) UpdateCycles() *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateCycles()
	})
}

// SetChargingTime sets the "charging_time" field.
func (u *HeartbeatUpsertBulk) SetChargingTime(v uint32) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetChargingTime(v)
	})
}

// AddChargingTime adds v to the "charging_time" field.
func (u *HeartbeatUpsertBulk) AddChargingTime(v uint32) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddChargingTime(v)
	})
}

// UpdateChargingTime sets the "charging_time" field to the value that was provided on create.
func (u *HeartbeatUpsertBulk) UpdateChargingTime() *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateChargingTime()
	})
}

// SetDisChargingTime sets the "dis_charging_time" field.
func (u *HeartbeatUpsertBulk) SetDisChargingTime(v uint32) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetDisChargingTime(v)
	})
}

// AddDisChargingTime adds v to the "dis_charging_time" field.
func (u *HeartbeatUpsertBulk) AddDisChargingTime(v uint32) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddDisChargingTime(v)
	})
}

// UpdateDisChargingTime sets the "dis_charging_time" field to the value that was provided on create.
func (u *HeartbeatUpsertBulk) UpdateDisChargingTime() *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateDisChargingTime()
	})
}

// SetUsingTime sets the "using_time" field.
func (u *HeartbeatUpsertBulk) SetUsingTime(v uint32) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetUsingTime(v)
	})
}

// AddUsingTime adds v to the "using_time" field.
func (u *HeartbeatUpsertBulk) AddUsingTime(v uint32) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddUsingTime(v)
	})
}

// UpdateUsingTime sets the "using_time" field to the value that was provided on create.
func (u *HeartbeatUpsertBulk) UpdateUsingTime() *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateUsingTime()
	})
}

// SetTotalChargingTime sets the "total_charging_time" field.
func (u *HeartbeatUpsertBulk) SetTotalChargingTime(v uint32) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetTotalChargingTime(v)
	})
}

// AddTotalChargingTime adds v to the "total_charging_time" field.
func (u *HeartbeatUpsertBulk) AddTotalChargingTime(v uint32) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddTotalChargingTime(v)
	})
}

// UpdateTotalChargingTime sets the "total_charging_time" field to the value that was provided on create.
func (u *HeartbeatUpsertBulk) UpdateTotalChargingTime() *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateTotalChargingTime()
	})
}

// SetTotalDisChargingTime sets the "total_dis_charging_time" field.
func (u *HeartbeatUpsertBulk) SetTotalDisChargingTime(v uint32) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetTotalDisChargingTime(v)
	})
}

// AddTotalDisChargingTime adds v to the "total_dis_charging_time" field.
func (u *HeartbeatUpsertBulk) AddTotalDisChargingTime(v uint32) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddTotalDisChargingTime(v)
	})
}

// UpdateTotalDisChargingTime sets the "total_dis_charging_time" field to the value that was provided on create.
func (u *HeartbeatUpsertBulk) UpdateTotalDisChargingTime() *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateTotalDisChargingTime()
	})
}

// SetTotalUsingTime sets the "total_using_time" field.
func (u *HeartbeatUpsertBulk) SetTotalUsingTime(v uint32) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.SetTotalUsingTime(v)
	})
}

// AddTotalUsingTime adds v to the "total_using_time" field.
func (u *HeartbeatUpsertBulk) AddTotalUsingTime(v uint32) *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.AddTotalUsingTime(v)
	})
}

// UpdateTotalUsingTime sets the "total_using_time" field to the value that was provided on create.
func (u *HeartbeatUpsertBulk) UpdateTotalUsingTime() *HeartbeatUpsertBulk {
	return u.Update(func(s *HeartbeatUpsert) {
		s.UpdateTotalUsingTime()
	})
}

// Exec executes the query.
func (u *HeartbeatUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the HeartbeatCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HeartbeatCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HeartbeatUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
