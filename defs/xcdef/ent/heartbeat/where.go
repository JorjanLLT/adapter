// Code generated by ent, DO NOT EDIT.

package heartbeat

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/adapter"
	"github.com/auroraride/adapter/defs/xcdef"
	"github.com/auroraride/adapter/defs/xcdef/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLTE(FieldID, id))
}

// Sn applies equality check predicate on the "sn" field. It's identical to SnEQ.
func Sn(v string) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldSn, v))
}

// BatteryID applies equality check predicate on the "battery_id" field. It's identical to BatteryIDEQ.
func BatteryID(v int) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldBatteryID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldCreatedAt, v))
}

// Voltage applies equality check predicate on the "voltage" field. It's identical to VoltageEQ.
func Voltage(v float64) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldVoltage, v))
}

// Current applies equality check predicate on the "current" field. It's identical to CurrentEQ.
func Current(v float64) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldCurrent, v))
}

// Soc applies equality check predicate on the "soc" field. It's identical to SocEQ.
func Soc(v uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldSoc, v))
}

// Soh applies equality check predicate on the "soh" field. It's identical to SohEQ.
func Soh(v uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldSoh, v))
}

// InCabinet applies equality check predicate on the "in_cabinet" field. It's identical to InCabinetEQ.
func InCabinet(v bool) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldInCabinet, v))
}

// Capacity applies equality check predicate on the "capacity" field. It's identical to CapacityEQ.
func Capacity(v float64) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldCapacity, v))
}

// MonMaxVoltage applies equality check predicate on the "mon_max_voltage" field. It's identical to MonMaxVoltageEQ.
func MonMaxVoltage(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldMonMaxVoltage, v))
}

// MonMaxVoltagePos applies equality check predicate on the "mon_max_voltage_pos" field. It's identical to MonMaxVoltagePosEQ.
func MonMaxVoltagePos(v uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldMonMaxVoltagePos, v))
}

// MonMinVoltage applies equality check predicate on the "mon_min_voltage" field. It's identical to MonMinVoltageEQ.
func MonMinVoltage(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldMonMinVoltage, v))
}

// MonMinVoltagePos applies equality check predicate on the "mon_min_voltage_pos" field. It's identical to MonMinVoltagePosEQ.
func MonMinVoltagePos(v uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldMonMinVoltagePos, v))
}

// MaxTemp applies equality check predicate on the "max_temp" field. It's identical to MaxTempEQ.
func MaxTemp(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldMaxTemp, v))
}

// MinTemp applies equality check predicate on the "min_temp" field. It's identical to MinTempEQ.
func MinTemp(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldMinTemp, v))
}

// MosTemp applies equality check predicate on the "mos_temp" field. It's identical to MosTempEQ.
func MosTemp(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldMosTemp, v))
}

// EnvTemp applies equality check predicate on the "env_temp" field. It's identical to EnvTempEQ.
func EnvTemp(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldEnvTemp, v))
}

// Geom applies equality check predicate on the "geom" field. It's identical to GeomEQ.
func Geom(v *adapter.Geometry) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldGeom, v))
}

// Gps applies equality check predicate on the "gps" field. It's identical to GpsEQ.
func Gps(v xcdef.GPSStatus) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldGps, v))
}

// Strength applies equality check predicate on the "strength" field. It's identical to StrengthEQ.
func Strength(v uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldStrength, v))
}

// Cycles applies equality check predicate on the "cycles" field. It's identical to CyclesEQ.
func Cycles(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldCycles, v))
}

// ChargingTime applies equality check predicate on the "charging_time" field. It's identical to ChargingTimeEQ.
func ChargingTime(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldChargingTime, v))
}

// DisChargingTime applies equality check predicate on the "dis_charging_time" field. It's identical to DisChargingTimeEQ.
func DisChargingTime(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldDisChargingTime, v))
}

// UsingTime applies equality check predicate on the "using_time" field. It's identical to UsingTimeEQ.
func UsingTime(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldUsingTime, v))
}

// TotalChargingTime applies equality check predicate on the "total_charging_time" field. It's identical to TotalChargingTimeEQ.
func TotalChargingTime(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldTotalChargingTime, v))
}

// TotalDisChargingTime applies equality check predicate on the "total_dis_charging_time" field. It's identical to TotalDisChargingTimeEQ.
func TotalDisChargingTime(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldTotalDisChargingTime, v))
}

// TotalUsingTime applies equality check predicate on the "total_using_time" field. It's identical to TotalUsingTimeEQ.
func TotalUsingTime(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldTotalUsingTime, v))
}

// SnEQ applies the EQ predicate on the "sn" field.
func SnEQ(v string) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldSn, v))
}

// SnNEQ applies the NEQ predicate on the "sn" field.
func SnNEQ(v string) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNEQ(FieldSn, v))
}

// SnIn applies the In predicate on the "sn" field.
func SnIn(vs ...string) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldIn(FieldSn, vs...))
}

// SnNotIn applies the NotIn predicate on the "sn" field.
func SnNotIn(vs ...string) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNotIn(FieldSn, vs...))
}

// SnGT applies the GT predicate on the "sn" field.
func SnGT(v string) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGT(FieldSn, v))
}

// SnGTE applies the GTE predicate on the "sn" field.
func SnGTE(v string) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGTE(FieldSn, v))
}

// SnLT applies the LT predicate on the "sn" field.
func SnLT(v string) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLT(FieldSn, v))
}

// SnLTE applies the LTE predicate on the "sn" field.
func SnLTE(v string) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLTE(FieldSn, v))
}

// SnContains applies the Contains predicate on the "sn" field.
func SnContains(v string) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldContains(FieldSn, v))
}

// SnHasPrefix applies the HasPrefix predicate on the "sn" field.
func SnHasPrefix(v string) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldHasPrefix(FieldSn, v))
}

// SnHasSuffix applies the HasSuffix predicate on the "sn" field.
func SnHasSuffix(v string) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldHasSuffix(FieldSn, v))
}

// SnEqualFold applies the EqualFold predicate on the "sn" field.
func SnEqualFold(v string) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEqualFold(FieldSn, v))
}

// SnContainsFold applies the ContainsFold predicate on the "sn" field.
func SnContainsFold(v string) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldContainsFold(FieldSn, v))
}

// BatteryIDEQ applies the EQ predicate on the "battery_id" field.
func BatteryIDEQ(v int) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldBatteryID, v))
}

// BatteryIDNEQ applies the NEQ predicate on the "battery_id" field.
func BatteryIDNEQ(v int) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNEQ(FieldBatteryID, v))
}

// BatteryIDIn applies the In predicate on the "battery_id" field.
func BatteryIDIn(vs ...int) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldIn(FieldBatteryID, vs...))
}

// BatteryIDNotIn applies the NotIn predicate on the "battery_id" field.
func BatteryIDNotIn(vs ...int) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNotIn(FieldBatteryID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLTE(FieldCreatedAt, v))
}

// VoltageEQ applies the EQ predicate on the "voltage" field.
func VoltageEQ(v float64) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldVoltage, v))
}

// VoltageNEQ applies the NEQ predicate on the "voltage" field.
func VoltageNEQ(v float64) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNEQ(FieldVoltage, v))
}

// VoltageIn applies the In predicate on the "voltage" field.
func VoltageIn(vs ...float64) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldIn(FieldVoltage, vs...))
}

// VoltageNotIn applies the NotIn predicate on the "voltage" field.
func VoltageNotIn(vs ...float64) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNotIn(FieldVoltage, vs...))
}

// VoltageGT applies the GT predicate on the "voltage" field.
func VoltageGT(v float64) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGT(FieldVoltage, v))
}

// VoltageGTE applies the GTE predicate on the "voltage" field.
func VoltageGTE(v float64) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGTE(FieldVoltage, v))
}

// VoltageLT applies the LT predicate on the "voltage" field.
func VoltageLT(v float64) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLT(FieldVoltage, v))
}

// VoltageLTE applies the LTE predicate on the "voltage" field.
func VoltageLTE(v float64) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLTE(FieldVoltage, v))
}

// CurrentEQ applies the EQ predicate on the "current" field.
func CurrentEQ(v float64) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldCurrent, v))
}

// CurrentNEQ applies the NEQ predicate on the "current" field.
func CurrentNEQ(v float64) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNEQ(FieldCurrent, v))
}

// CurrentIn applies the In predicate on the "current" field.
func CurrentIn(vs ...float64) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldIn(FieldCurrent, vs...))
}

// CurrentNotIn applies the NotIn predicate on the "current" field.
func CurrentNotIn(vs ...float64) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNotIn(FieldCurrent, vs...))
}

// CurrentGT applies the GT predicate on the "current" field.
func CurrentGT(v float64) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGT(FieldCurrent, v))
}

// CurrentGTE applies the GTE predicate on the "current" field.
func CurrentGTE(v float64) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGTE(FieldCurrent, v))
}

// CurrentLT applies the LT predicate on the "current" field.
func CurrentLT(v float64) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLT(FieldCurrent, v))
}

// CurrentLTE applies the LTE predicate on the "current" field.
func CurrentLTE(v float64) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLTE(FieldCurrent, v))
}

// SocEQ applies the EQ predicate on the "soc" field.
func SocEQ(v uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldSoc, v))
}

// SocNEQ applies the NEQ predicate on the "soc" field.
func SocNEQ(v uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNEQ(FieldSoc, v))
}

// SocIn applies the In predicate on the "soc" field.
func SocIn(vs ...uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldIn(FieldSoc, vs...))
}

// SocNotIn applies the NotIn predicate on the "soc" field.
func SocNotIn(vs ...uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNotIn(FieldSoc, vs...))
}

// SocGT applies the GT predicate on the "soc" field.
func SocGT(v uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGT(FieldSoc, v))
}

// SocGTE applies the GTE predicate on the "soc" field.
func SocGTE(v uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGTE(FieldSoc, v))
}

// SocLT applies the LT predicate on the "soc" field.
func SocLT(v uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLT(FieldSoc, v))
}

// SocLTE applies the LTE predicate on the "soc" field.
func SocLTE(v uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLTE(FieldSoc, v))
}

// SohEQ applies the EQ predicate on the "soh" field.
func SohEQ(v uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldSoh, v))
}

// SohNEQ applies the NEQ predicate on the "soh" field.
func SohNEQ(v uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNEQ(FieldSoh, v))
}

// SohIn applies the In predicate on the "soh" field.
func SohIn(vs ...uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldIn(FieldSoh, vs...))
}

// SohNotIn applies the NotIn predicate on the "soh" field.
func SohNotIn(vs ...uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNotIn(FieldSoh, vs...))
}

// SohGT applies the GT predicate on the "soh" field.
func SohGT(v uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGT(FieldSoh, v))
}

// SohGTE applies the GTE predicate on the "soh" field.
func SohGTE(v uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGTE(FieldSoh, v))
}

// SohLT applies the LT predicate on the "soh" field.
func SohLT(v uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLT(FieldSoh, v))
}

// SohLTE applies the LTE predicate on the "soh" field.
func SohLTE(v uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLTE(FieldSoh, v))
}

// InCabinetEQ applies the EQ predicate on the "in_cabinet" field.
func InCabinetEQ(v bool) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldInCabinet, v))
}

// InCabinetNEQ applies the NEQ predicate on the "in_cabinet" field.
func InCabinetNEQ(v bool) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNEQ(FieldInCabinet, v))
}

// CapacityEQ applies the EQ predicate on the "capacity" field.
func CapacityEQ(v float64) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldCapacity, v))
}

// CapacityNEQ applies the NEQ predicate on the "capacity" field.
func CapacityNEQ(v float64) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNEQ(FieldCapacity, v))
}

// CapacityIn applies the In predicate on the "capacity" field.
func CapacityIn(vs ...float64) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldIn(FieldCapacity, vs...))
}

// CapacityNotIn applies the NotIn predicate on the "capacity" field.
func CapacityNotIn(vs ...float64) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNotIn(FieldCapacity, vs...))
}

// CapacityGT applies the GT predicate on the "capacity" field.
func CapacityGT(v float64) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGT(FieldCapacity, v))
}

// CapacityGTE applies the GTE predicate on the "capacity" field.
func CapacityGTE(v float64) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGTE(FieldCapacity, v))
}

// CapacityLT applies the LT predicate on the "capacity" field.
func CapacityLT(v float64) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLT(FieldCapacity, v))
}

// CapacityLTE applies the LTE predicate on the "capacity" field.
func CapacityLTE(v float64) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLTE(FieldCapacity, v))
}

// MonMaxVoltageEQ applies the EQ predicate on the "mon_max_voltage" field.
func MonMaxVoltageEQ(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldMonMaxVoltage, v))
}

// MonMaxVoltageNEQ applies the NEQ predicate on the "mon_max_voltage" field.
func MonMaxVoltageNEQ(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNEQ(FieldMonMaxVoltage, v))
}

// MonMaxVoltageIn applies the In predicate on the "mon_max_voltage" field.
func MonMaxVoltageIn(vs ...uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldIn(FieldMonMaxVoltage, vs...))
}

// MonMaxVoltageNotIn applies the NotIn predicate on the "mon_max_voltage" field.
func MonMaxVoltageNotIn(vs ...uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNotIn(FieldMonMaxVoltage, vs...))
}

// MonMaxVoltageGT applies the GT predicate on the "mon_max_voltage" field.
func MonMaxVoltageGT(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGT(FieldMonMaxVoltage, v))
}

// MonMaxVoltageGTE applies the GTE predicate on the "mon_max_voltage" field.
func MonMaxVoltageGTE(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGTE(FieldMonMaxVoltage, v))
}

// MonMaxVoltageLT applies the LT predicate on the "mon_max_voltage" field.
func MonMaxVoltageLT(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLT(FieldMonMaxVoltage, v))
}

// MonMaxVoltageLTE applies the LTE predicate on the "mon_max_voltage" field.
func MonMaxVoltageLTE(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLTE(FieldMonMaxVoltage, v))
}

// MonMaxVoltagePosEQ applies the EQ predicate on the "mon_max_voltage_pos" field.
func MonMaxVoltagePosEQ(v uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldMonMaxVoltagePos, v))
}

// MonMaxVoltagePosNEQ applies the NEQ predicate on the "mon_max_voltage_pos" field.
func MonMaxVoltagePosNEQ(v uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNEQ(FieldMonMaxVoltagePos, v))
}

// MonMaxVoltagePosIn applies the In predicate on the "mon_max_voltage_pos" field.
func MonMaxVoltagePosIn(vs ...uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldIn(FieldMonMaxVoltagePos, vs...))
}

// MonMaxVoltagePosNotIn applies the NotIn predicate on the "mon_max_voltage_pos" field.
func MonMaxVoltagePosNotIn(vs ...uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNotIn(FieldMonMaxVoltagePos, vs...))
}

// MonMaxVoltagePosGT applies the GT predicate on the "mon_max_voltage_pos" field.
func MonMaxVoltagePosGT(v uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGT(FieldMonMaxVoltagePos, v))
}

// MonMaxVoltagePosGTE applies the GTE predicate on the "mon_max_voltage_pos" field.
func MonMaxVoltagePosGTE(v uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGTE(FieldMonMaxVoltagePos, v))
}

// MonMaxVoltagePosLT applies the LT predicate on the "mon_max_voltage_pos" field.
func MonMaxVoltagePosLT(v uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLT(FieldMonMaxVoltagePos, v))
}

// MonMaxVoltagePosLTE applies the LTE predicate on the "mon_max_voltage_pos" field.
func MonMaxVoltagePosLTE(v uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLTE(FieldMonMaxVoltagePos, v))
}

// MonMinVoltageEQ applies the EQ predicate on the "mon_min_voltage" field.
func MonMinVoltageEQ(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldMonMinVoltage, v))
}

// MonMinVoltageNEQ applies the NEQ predicate on the "mon_min_voltage" field.
func MonMinVoltageNEQ(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNEQ(FieldMonMinVoltage, v))
}

// MonMinVoltageIn applies the In predicate on the "mon_min_voltage" field.
func MonMinVoltageIn(vs ...uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldIn(FieldMonMinVoltage, vs...))
}

// MonMinVoltageNotIn applies the NotIn predicate on the "mon_min_voltage" field.
func MonMinVoltageNotIn(vs ...uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNotIn(FieldMonMinVoltage, vs...))
}

// MonMinVoltageGT applies the GT predicate on the "mon_min_voltage" field.
func MonMinVoltageGT(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGT(FieldMonMinVoltage, v))
}

// MonMinVoltageGTE applies the GTE predicate on the "mon_min_voltage" field.
func MonMinVoltageGTE(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGTE(FieldMonMinVoltage, v))
}

// MonMinVoltageLT applies the LT predicate on the "mon_min_voltage" field.
func MonMinVoltageLT(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLT(FieldMonMinVoltage, v))
}

// MonMinVoltageLTE applies the LTE predicate on the "mon_min_voltage" field.
func MonMinVoltageLTE(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLTE(FieldMonMinVoltage, v))
}

// MonMinVoltagePosEQ applies the EQ predicate on the "mon_min_voltage_pos" field.
func MonMinVoltagePosEQ(v uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldMonMinVoltagePos, v))
}

// MonMinVoltagePosNEQ applies the NEQ predicate on the "mon_min_voltage_pos" field.
func MonMinVoltagePosNEQ(v uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNEQ(FieldMonMinVoltagePos, v))
}

// MonMinVoltagePosIn applies the In predicate on the "mon_min_voltage_pos" field.
func MonMinVoltagePosIn(vs ...uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldIn(FieldMonMinVoltagePos, vs...))
}

// MonMinVoltagePosNotIn applies the NotIn predicate on the "mon_min_voltage_pos" field.
func MonMinVoltagePosNotIn(vs ...uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNotIn(FieldMonMinVoltagePos, vs...))
}

// MonMinVoltagePosGT applies the GT predicate on the "mon_min_voltage_pos" field.
func MonMinVoltagePosGT(v uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGT(FieldMonMinVoltagePos, v))
}

// MonMinVoltagePosGTE applies the GTE predicate on the "mon_min_voltage_pos" field.
func MonMinVoltagePosGTE(v uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGTE(FieldMonMinVoltagePos, v))
}

// MonMinVoltagePosLT applies the LT predicate on the "mon_min_voltage_pos" field.
func MonMinVoltagePosLT(v uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLT(FieldMonMinVoltagePos, v))
}

// MonMinVoltagePosLTE applies the LTE predicate on the "mon_min_voltage_pos" field.
func MonMinVoltagePosLTE(v uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLTE(FieldMonMinVoltagePos, v))
}

// MaxTempEQ applies the EQ predicate on the "max_temp" field.
func MaxTempEQ(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldMaxTemp, v))
}

// MaxTempNEQ applies the NEQ predicate on the "max_temp" field.
func MaxTempNEQ(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNEQ(FieldMaxTemp, v))
}

// MaxTempIn applies the In predicate on the "max_temp" field.
func MaxTempIn(vs ...uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldIn(FieldMaxTemp, vs...))
}

// MaxTempNotIn applies the NotIn predicate on the "max_temp" field.
func MaxTempNotIn(vs ...uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNotIn(FieldMaxTemp, vs...))
}

// MaxTempGT applies the GT predicate on the "max_temp" field.
func MaxTempGT(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGT(FieldMaxTemp, v))
}

// MaxTempGTE applies the GTE predicate on the "max_temp" field.
func MaxTempGTE(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGTE(FieldMaxTemp, v))
}

// MaxTempLT applies the LT predicate on the "max_temp" field.
func MaxTempLT(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLT(FieldMaxTemp, v))
}

// MaxTempLTE applies the LTE predicate on the "max_temp" field.
func MaxTempLTE(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLTE(FieldMaxTemp, v))
}

// MinTempEQ applies the EQ predicate on the "min_temp" field.
func MinTempEQ(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldMinTemp, v))
}

// MinTempNEQ applies the NEQ predicate on the "min_temp" field.
func MinTempNEQ(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNEQ(FieldMinTemp, v))
}

// MinTempIn applies the In predicate on the "min_temp" field.
func MinTempIn(vs ...uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldIn(FieldMinTemp, vs...))
}

// MinTempNotIn applies the NotIn predicate on the "min_temp" field.
func MinTempNotIn(vs ...uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNotIn(FieldMinTemp, vs...))
}

// MinTempGT applies the GT predicate on the "min_temp" field.
func MinTempGT(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGT(FieldMinTemp, v))
}

// MinTempGTE applies the GTE predicate on the "min_temp" field.
func MinTempGTE(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGTE(FieldMinTemp, v))
}

// MinTempLT applies the LT predicate on the "min_temp" field.
func MinTempLT(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLT(FieldMinTemp, v))
}

// MinTempLTE applies the LTE predicate on the "min_temp" field.
func MinTempLTE(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLTE(FieldMinTemp, v))
}

// FaultsIsNil applies the IsNil predicate on the "faults" field.
func FaultsIsNil() predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldIsNull(FieldFaults))
}

// FaultsNotNil applies the NotNil predicate on the "faults" field.
func FaultsNotNil() predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNotNull(FieldFaults))
}

// MosTempEQ applies the EQ predicate on the "mos_temp" field.
func MosTempEQ(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldMosTemp, v))
}

// MosTempNEQ applies the NEQ predicate on the "mos_temp" field.
func MosTempNEQ(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNEQ(FieldMosTemp, v))
}

// MosTempIn applies the In predicate on the "mos_temp" field.
func MosTempIn(vs ...uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldIn(FieldMosTemp, vs...))
}

// MosTempNotIn applies the NotIn predicate on the "mos_temp" field.
func MosTempNotIn(vs ...uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNotIn(FieldMosTemp, vs...))
}

// MosTempGT applies the GT predicate on the "mos_temp" field.
func MosTempGT(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGT(FieldMosTemp, v))
}

// MosTempGTE applies the GTE predicate on the "mos_temp" field.
func MosTempGTE(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGTE(FieldMosTemp, v))
}

// MosTempLT applies the LT predicate on the "mos_temp" field.
func MosTempLT(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLT(FieldMosTemp, v))
}

// MosTempLTE applies the LTE predicate on the "mos_temp" field.
func MosTempLTE(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLTE(FieldMosTemp, v))
}

// EnvTempEQ applies the EQ predicate on the "env_temp" field.
func EnvTempEQ(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldEnvTemp, v))
}

// EnvTempNEQ applies the NEQ predicate on the "env_temp" field.
func EnvTempNEQ(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNEQ(FieldEnvTemp, v))
}

// EnvTempIn applies the In predicate on the "env_temp" field.
func EnvTempIn(vs ...uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldIn(FieldEnvTemp, vs...))
}

// EnvTempNotIn applies the NotIn predicate on the "env_temp" field.
func EnvTempNotIn(vs ...uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNotIn(FieldEnvTemp, vs...))
}

// EnvTempGT applies the GT predicate on the "env_temp" field.
func EnvTempGT(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGT(FieldEnvTemp, v))
}

// EnvTempGTE applies the GTE predicate on the "env_temp" field.
func EnvTempGTE(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGTE(FieldEnvTemp, v))
}

// EnvTempLT applies the LT predicate on the "env_temp" field.
func EnvTempLT(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLT(FieldEnvTemp, v))
}

// EnvTempLTE applies the LTE predicate on the "env_temp" field.
func EnvTempLTE(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLTE(FieldEnvTemp, v))
}

// GeomEQ applies the EQ predicate on the "geom" field.
func GeomEQ(v *adapter.Geometry) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldGeom, v))
}

// GeomNEQ applies the NEQ predicate on the "geom" field.
func GeomNEQ(v *adapter.Geometry) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNEQ(FieldGeom, v))
}

// GeomIn applies the In predicate on the "geom" field.
func GeomIn(vs ...*adapter.Geometry) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldIn(FieldGeom, vs...))
}

// GeomNotIn applies the NotIn predicate on the "geom" field.
func GeomNotIn(vs ...*adapter.Geometry) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNotIn(FieldGeom, vs...))
}

// GeomGT applies the GT predicate on the "geom" field.
func GeomGT(v *adapter.Geometry) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGT(FieldGeom, v))
}

// GeomGTE applies the GTE predicate on the "geom" field.
func GeomGTE(v *adapter.Geometry) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGTE(FieldGeom, v))
}

// GeomLT applies the LT predicate on the "geom" field.
func GeomLT(v *adapter.Geometry) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLT(FieldGeom, v))
}

// GeomLTE applies the LTE predicate on the "geom" field.
func GeomLTE(v *adapter.Geometry) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLTE(FieldGeom, v))
}

// GpsEQ applies the EQ predicate on the "gps" field.
func GpsEQ(v xcdef.GPSStatus) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldGps, v))
}

// GpsNEQ applies the NEQ predicate on the "gps" field.
func GpsNEQ(v xcdef.GPSStatus) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNEQ(FieldGps, v))
}

// GpsIn applies the In predicate on the "gps" field.
func GpsIn(vs ...xcdef.GPSStatus) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldIn(FieldGps, vs...))
}

// GpsNotIn applies the NotIn predicate on the "gps" field.
func GpsNotIn(vs ...xcdef.GPSStatus) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNotIn(FieldGps, vs...))
}

// GpsGT applies the GT predicate on the "gps" field.
func GpsGT(v xcdef.GPSStatus) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGT(FieldGps, v))
}

// GpsGTE applies the GTE predicate on the "gps" field.
func GpsGTE(v xcdef.GPSStatus) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGTE(FieldGps, v))
}

// GpsLT applies the LT predicate on the "gps" field.
func GpsLT(v xcdef.GPSStatus) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLT(FieldGps, v))
}

// GpsLTE applies the LTE predicate on the "gps" field.
func GpsLTE(v xcdef.GPSStatus) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLTE(FieldGps, v))
}

// StrengthEQ applies the EQ predicate on the "strength" field.
func StrengthEQ(v uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldStrength, v))
}

// StrengthNEQ applies the NEQ predicate on the "strength" field.
func StrengthNEQ(v uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNEQ(FieldStrength, v))
}

// StrengthIn applies the In predicate on the "strength" field.
func StrengthIn(vs ...uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldIn(FieldStrength, vs...))
}

// StrengthNotIn applies the NotIn predicate on the "strength" field.
func StrengthNotIn(vs ...uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNotIn(FieldStrength, vs...))
}

// StrengthGT applies the GT predicate on the "strength" field.
func StrengthGT(v uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGT(FieldStrength, v))
}

// StrengthGTE applies the GTE predicate on the "strength" field.
func StrengthGTE(v uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGTE(FieldStrength, v))
}

// StrengthLT applies the LT predicate on the "strength" field.
func StrengthLT(v uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLT(FieldStrength, v))
}

// StrengthLTE applies the LTE predicate on the "strength" field.
func StrengthLTE(v uint8) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLTE(FieldStrength, v))
}

// CyclesEQ applies the EQ predicate on the "cycles" field.
func CyclesEQ(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldCycles, v))
}

// CyclesNEQ applies the NEQ predicate on the "cycles" field.
func CyclesNEQ(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNEQ(FieldCycles, v))
}

// CyclesIn applies the In predicate on the "cycles" field.
func CyclesIn(vs ...uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldIn(FieldCycles, vs...))
}

// CyclesNotIn applies the NotIn predicate on the "cycles" field.
func CyclesNotIn(vs ...uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNotIn(FieldCycles, vs...))
}

// CyclesGT applies the GT predicate on the "cycles" field.
func CyclesGT(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGT(FieldCycles, v))
}

// CyclesGTE applies the GTE predicate on the "cycles" field.
func CyclesGTE(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGTE(FieldCycles, v))
}

// CyclesLT applies the LT predicate on the "cycles" field.
func CyclesLT(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLT(FieldCycles, v))
}

// CyclesLTE applies the LTE predicate on the "cycles" field.
func CyclesLTE(v uint16) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLTE(FieldCycles, v))
}

// ChargingTimeEQ applies the EQ predicate on the "charging_time" field.
func ChargingTimeEQ(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldChargingTime, v))
}

// ChargingTimeNEQ applies the NEQ predicate on the "charging_time" field.
func ChargingTimeNEQ(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNEQ(FieldChargingTime, v))
}

// ChargingTimeIn applies the In predicate on the "charging_time" field.
func ChargingTimeIn(vs ...uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldIn(FieldChargingTime, vs...))
}

// ChargingTimeNotIn applies the NotIn predicate on the "charging_time" field.
func ChargingTimeNotIn(vs ...uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNotIn(FieldChargingTime, vs...))
}

// ChargingTimeGT applies the GT predicate on the "charging_time" field.
func ChargingTimeGT(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGT(FieldChargingTime, v))
}

// ChargingTimeGTE applies the GTE predicate on the "charging_time" field.
func ChargingTimeGTE(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGTE(FieldChargingTime, v))
}

// ChargingTimeLT applies the LT predicate on the "charging_time" field.
func ChargingTimeLT(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLT(FieldChargingTime, v))
}

// ChargingTimeLTE applies the LTE predicate on the "charging_time" field.
func ChargingTimeLTE(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLTE(FieldChargingTime, v))
}

// DisChargingTimeEQ applies the EQ predicate on the "dis_charging_time" field.
func DisChargingTimeEQ(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldDisChargingTime, v))
}

// DisChargingTimeNEQ applies the NEQ predicate on the "dis_charging_time" field.
func DisChargingTimeNEQ(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNEQ(FieldDisChargingTime, v))
}

// DisChargingTimeIn applies the In predicate on the "dis_charging_time" field.
func DisChargingTimeIn(vs ...uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldIn(FieldDisChargingTime, vs...))
}

// DisChargingTimeNotIn applies the NotIn predicate on the "dis_charging_time" field.
func DisChargingTimeNotIn(vs ...uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNotIn(FieldDisChargingTime, vs...))
}

// DisChargingTimeGT applies the GT predicate on the "dis_charging_time" field.
func DisChargingTimeGT(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGT(FieldDisChargingTime, v))
}

// DisChargingTimeGTE applies the GTE predicate on the "dis_charging_time" field.
func DisChargingTimeGTE(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGTE(FieldDisChargingTime, v))
}

// DisChargingTimeLT applies the LT predicate on the "dis_charging_time" field.
func DisChargingTimeLT(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLT(FieldDisChargingTime, v))
}

// DisChargingTimeLTE applies the LTE predicate on the "dis_charging_time" field.
func DisChargingTimeLTE(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLTE(FieldDisChargingTime, v))
}

// UsingTimeEQ applies the EQ predicate on the "using_time" field.
func UsingTimeEQ(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldUsingTime, v))
}

// UsingTimeNEQ applies the NEQ predicate on the "using_time" field.
func UsingTimeNEQ(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNEQ(FieldUsingTime, v))
}

// UsingTimeIn applies the In predicate on the "using_time" field.
func UsingTimeIn(vs ...uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldIn(FieldUsingTime, vs...))
}

// UsingTimeNotIn applies the NotIn predicate on the "using_time" field.
func UsingTimeNotIn(vs ...uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNotIn(FieldUsingTime, vs...))
}

// UsingTimeGT applies the GT predicate on the "using_time" field.
func UsingTimeGT(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGT(FieldUsingTime, v))
}

// UsingTimeGTE applies the GTE predicate on the "using_time" field.
func UsingTimeGTE(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGTE(FieldUsingTime, v))
}

// UsingTimeLT applies the LT predicate on the "using_time" field.
func UsingTimeLT(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLT(FieldUsingTime, v))
}

// UsingTimeLTE applies the LTE predicate on the "using_time" field.
func UsingTimeLTE(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLTE(FieldUsingTime, v))
}

// TotalChargingTimeEQ applies the EQ predicate on the "total_charging_time" field.
func TotalChargingTimeEQ(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldTotalChargingTime, v))
}

// TotalChargingTimeNEQ applies the NEQ predicate on the "total_charging_time" field.
func TotalChargingTimeNEQ(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNEQ(FieldTotalChargingTime, v))
}

// TotalChargingTimeIn applies the In predicate on the "total_charging_time" field.
func TotalChargingTimeIn(vs ...uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldIn(FieldTotalChargingTime, vs...))
}

// TotalChargingTimeNotIn applies the NotIn predicate on the "total_charging_time" field.
func TotalChargingTimeNotIn(vs ...uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNotIn(FieldTotalChargingTime, vs...))
}

// TotalChargingTimeGT applies the GT predicate on the "total_charging_time" field.
func TotalChargingTimeGT(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGT(FieldTotalChargingTime, v))
}

// TotalChargingTimeGTE applies the GTE predicate on the "total_charging_time" field.
func TotalChargingTimeGTE(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGTE(FieldTotalChargingTime, v))
}

// TotalChargingTimeLT applies the LT predicate on the "total_charging_time" field.
func TotalChargingTimeLT(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLT(FieldTotalChargingTime, v))
}

// TotalChargingTimeLTE applies the LTE predicate on the "total_charging_time" field.
func TotalChargingTimeLTE(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLTE(FieldTotalChargingTime, v))
}

// TotalDisChargingTimeEQ applies the EQ predicate on the "total_dis_charging_time" field.
func TotalDisChargingTimeEQ(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldTotalDisChargingTime, v))
}

// TotalDisChargingTimeNEQ applies the NEQ predicate on the "total_dis_charging_time" field.
func TotalDisChargingTimeNEQ(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNEQ(FieldTotalDisChargingTime, v))
}

// TotalDisChargingTimeIn applies the In predicate on the "total_dis_charging_time" field.
func TotalDisChargingTimeIn(vs ...uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldIn(FieldTotalDisChargingTime, vs...))
}

// TotalDisChargingTimeNotIn applies the NotIn predicate on the "total_dis_charging_time" field.
func TotalDisChargingTimeNotIn(vs ...uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNotIn(FieldTotalDisChargingTime, vs...))
}

// TotalDisChargingTimeGT applies the GT predicate on the "total_dis_charging_time" field.
func TotalDisChargingTimeGT(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGT(FieldTotalDisChargingTime, v))
}

// TotalDisChargingTimeGTE applies the GTE predicate on the "total_dis_charging_time" field.
func TotalDisChargingTimeGTE(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGTE(FieldTotalDisChargingTime, v))
}

// TotalDisChargingTimeLT applies the LT predicate on the "total_dis_charging_time" field.
func TotalDisChargingTimeLT(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLT(FieldTotalDisChargingTime, v))
}

// TotalDisChargingTimeLTE applies the LTE predicate on the "total_dis_charging_time" field.
func TotalDisChargingTimeLTE(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLTE(FieldTotalDisChargingTime, v))
}

// TotalUsingTimeEQ applies the EQ predicate on the "total_using_time" field.
func TotalUsingTimeEQ(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldEQ(FieldTotalUsingTime, v))
}

// TotalUsingTimeNEQ applies the NEQ predicate on the "total_using_time" field.
func TotalUsingTimeNEQ(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNEQ(FieldTotalUsingTime, v))
}

// TotalUsingTimeIn applies the In predicate on the "total_using_time" field.
func TotalUsingTimeIn(vs ...uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldIn(FieldTotalUsingTime, vs...))
}

// TotalUsingTimeNotIn applies the NotIn predicate on the "total_using_time" field.
func TotalUsingTimeNotIn(vs ...uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldNotIn(FieldTotalUsingTime, vs...))
}

// TotalUsingTimeGT applies the GT predicate on the "total_using_time" field.
func TotalUsingTimeGT(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGT(FieldTotalUsingTime, v))
}

// TotalUsingTimeGTE applies the GTE predicate on the "total_using_time" field.
func TotalUsingTimeGTE(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldGTE(FieldTotalUsingTime, v))
}

// TotalUsingTimeLT applies the LT predicate on the "total_using_time" field.
func TotalUsingTimeLT(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLT(FieldTotalUsingTime, v))
}

// TotalUsingTimeLTE applies the LTE predicate on the "total_using_time" field.
func TotalUsingTimeLTE(v uint32) predicate.Heartbeat {
	return predicate.Heartbeat(sql.FieldLTE(FieldTotalUsingTime, v))
}

// HasBattery applies the HasEdge predicate on the "battery" edge.
func HasBattery() predicate.Heartbeat {
	return predicate.Heartbeat(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BatteryTable, BatteryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBatteryWith applies the HasEdge predicate on the "battery" edge with a given conditions (other predicates).
func HasBatteryWith(preds ...predicate.Battery) predicate.Heartbeat {
	return predicate.Heartbeat(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BatteryInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BatteryTable, BatteryColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Heartbeat) predicate.Heartbeat {
	return predicate.Heartbeat(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Heartbeat) predicate.Heartbeat {
	return predicate.Heartbeat(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Heartbeat) predicate.Heartbeat {
	return predicate.Heartbeat(func(s *sql.Selector) {
		p(s.Not())
	})
}
