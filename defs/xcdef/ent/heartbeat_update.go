// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/adapter"
	"github.com/auroraride/adapter/defs/xcdef"
	"github.com/auroraride/adapter/defs/xcdef/ent/battery"
	"github.com/auroraride/adapter/defs/xcdef/ent/heartbeat"
	"github.com/auroraride/adapter/defs/xcdef/ent/predicate"
)

// HeartbeatUpdate is the builder for updating Heartbeat entities.
type HeartbeatUpdate struct {
	config
	hooks     []Hook
	mutation  *HeartbeatMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the HeartbeatUpdate builder.
func (hu *HeartbeatUpdate) Where(ps ...predicate.Heartbeat) *HeartbeatUpdate {
	hu.mutation.Where(ps...)
	return hu
}

// SetSn sets the "sn" field.
func (hu *HeartbeatUpdate) SetSn(s string) *HeartbeatUpdate {
	hu.mutation.SetSn(s)
	return hu
}

// SetBatteryID sets the "battery_id" field.
func (hu *HeartbeatUpdate) SetBatteryID(i int) *HeartbeatUpdate {
	hu.mutation.SetBatteryID(i)
	return hu
}

// SetVoltage sets the "voltage" field.
func (hu *HeartbeatUpdate) SetVoltage(f float64) *HeartbeatUpdate {
	hu.mutation.ResetVoltage()
	hu.mutation.SetVoltage(f)
	return hu
}

// AddVoltage adds f to the "voltage" field.
func (hu *HeartbeatUpdate) AddVoltage(f float64) *HeartbeatUpdate {
	hu.mutation.AddVoltage(f)
	return hu
}

// SetCurrent sets the "current" field.
func (hu *HeartbeatUpdate) SetCurrent(f float64) *HeartbeatUpdate {
	hu.mutation.ResetCurrent()
	hu.mutation.SetCurrent(f)
	return hu
}

// AddCurrent adds f to the "current" field.
func (hu *HeartbeatUpdate) AddCurrent(f float64) *HeartbeatUpdate {
	hu.mutation.AddCurrent(f)
	return hu
}

// SetSoc sets the "soc" field.
func (hu *HeartbeatUpdate) SetSoc(u uint8) *HeartbeatUpdate {
	hu.mutation.ResetSoc()
	hu.mutation.SetSoc(u)
	return hu
}

// AddSoc adds u to the "soc" field.
func (hu *HeartbeatUpdate) AddSoc(u int8) *HeartbeatUpdate {
	hu.mutation.AddSoc(u)
	return hu
}

// SetSoh sets the "soh" field.
func (hu *HeartbeatUpdate) SetSoh(u uint8) *HeartbeatUpdate {
	hu.mutation.ResetSoh()
	hu.mutation.SetSoh(u)
	return hu
}

// AddSoh adds u to the "soh" field.
func (hu *HeartbeatUpdate) AddSoh(u int8) *HeartbeatUpdate {
	hu.mutation.AddSoh(u)
	return hu
}

// SetInCabinet sets the "in_cabinet" field.
func (hu *HeartbeatUpdate) SetInCabinet(b bool) *HeartbeatUpdate {
	hu.mutation.SetInCabinet(b)
	return hu
}

// SetCapacity sets the "capacity" field.
func (hu *HeartbeatUpdate) SetCapacity(f float64) *HeartbeatUpdate {
	hu.mutation.ResetCapacity()
	hu.mutation.SetCapacity(f)
	return hu
}

// AddCapacity adds f to the "capacity" field.
func (hu *HeartbeatUpdate) AddCapacity(f float64) *HeartbeatUpdate {
	hu.mutation.AddCapacity(f)
	return hu
}

// SetMonMaxVoltage sets the "mon_max_voltage" field.
func (hu *HeartbeatUpdate) SetMonMaxVoltage(u uint16) *HeartbeatUpdate {
	hu.mutation.ResetMonMaxVoltage()
	hu.mutation.SetMonMaxVoltage(u)
	return hu
}

// AddMonMaxVoltage adds u to the "mon_max_voltage" field.
func (hu *HeartbeatUpdate) AddMonMaxVoltage(u int16) *HeartbeatUpdate {
	hu.mutation.AddMonMaxVoltage(u)
	return hu
}

// SetMonMaxVoltagePos sets the "mon_max_voltage_pos" field.
func (hu *HeartbeatUpdate) SetMonMaxVoltagePos(u uint8) *HeartbeatUpdate {
	hu.mutation.ResetMonMaxVoltagePos()
	hu.mutation.SetMonMaxVoltagePos(u)
	return hu
}

// AddMonMaxVoltagePos adds u to the "mon_max_voltage_pos" field.
func (hu *HeartbeatUpdate) AddMonMaxVoltagePos(u int8) *HeartbeatUpdate {
	hu.mutation.AddMonMaxVoltagePos(u)
	return hu
}

// SetMonMinVoltage sets the "mon_min_voltage" field.
func (hu *HeartbeatUpdate) SetMonMinVoltage(u uint16) *HeartbeatUpdate {
	hu.mutation.ResetMonMinVoltage()
	hu.mutation.SetMonMinVoltage(u)
	return hu
}

// AddMonMinVoltage adds u to the "mon_min_voltage" field.
func (hu *HeartbeatUpdate) AddMonMinVoltage(u int16) *HeartbeatUpdate {
	hu.mutation.AddMonMinVoltage(u)
	return hu
}

// SetMonMinVoltagePos sets the "mon_min_voltage_pos" field.
func (hu *HeartbeatUpdate) SetMonMinVoltagePos(u uint8) *HeartbeatUpdate {
	hu.mutation.ResetMonMinVoltagePos()
	hu.mutation.SetMonMinVoltagePos(u)
	return hu
}

// AddMonMinVoltagePos adds u to the "mon_min_voltage_pos" field.
func (hu *HeartbeatUpdate) AddMonMinVoltagePos(u int8) *HeartbeatUpdate {
	hu.mutation.AddMonMinVoltagePos(u)
	return hu
}

// SetMaxTemp sets the "max_temp" field.
func (hu *HeartbeatUpdate) SetMaxTemp(u uint16) *HeartbeatUpdate {
	hu.mutation.ResetMaxTemp()
	hu.mutation.SetMaxTemp(u)
	return hu
}

// AddMaxTemp adds u to the "max_temp" field.
func (hu *HeartbeatUpdate) AddMaxTemp(u int16) *HeartbeatUpdate {
	hu.mutation.AddMaxTemp(u)
	return hu
}

// SetMinTemp sets the "min_temp" field.
func (hu *HeartbeatUpdate) SetMinTemp(u uint16) *HeartbeatUpdate {
	hu.mutation.ResetMinTemp()
	hu.mutation.SetMinTemp(u)
	return hu
}

// AddMinTemp adds u to the "min_temp" field.
func (hu *HeartbeatUpdate) AddMinTemp(u int16) *HeartbeatUpdate {
	hu.mutation.AddMinTemp(u)
	return hu
}

// SetFaults sets the "faults" field.
func (hu *HeartbeatUpdate) SetFaults(x *xcdef.Faults) *HeartbeatUpdate {
	hu.mutation.SetFaults(x)
	return hu
}

// ClearFaults clears the value of the "faults" field.
func (hu *HeartbeatUpdate) ClearFaults() *HeartbeatUpdate {
	hu.mutation.ClearFaults()
	return hu
}

// SetMosStatus sets the "mos_status" field.
func (hu *HeartbeatUpdate) SetMosStatus(xs *xcdef.MosStatus) *HeartbeatUpdate {
	hu.mutation.SetMosStatus(xs)
	return hu
}

// SetMonVoltage sets the "mon_voltage" field.
func (hu *HeartbeatUpdate) SetMonVoltage(xv *xcdef.MonVoltage) *HeartbeatUpdate {
	hu.mutation.SetMonVoltage(xv)
	return hu
}

// SetTemp sets the "temp" field.
func (hu *HeartbeatUpdate) SetTemp(x *xcdef.Temperature) *HeartbeatUpdate {
	hu.mutation.SetTemp(x)
	return hu
}

// SetMosTemp sets the "mos_temp" field.
func (hu *HeartbeatUpdate) SetMosTemp(u uint16) *HeartbeatUpdate {
	hu.mutation.ResetMosTemp()
	hu.mutation.SetMosTemp(u)
	return hu
}

// AddMosTemp adds u to the "mos_temp" field.
func (hu *HeartbeatUpdate) AddMosTemp(u int16) *HeartbeatUpdate {
	hu.mutation.AddMosTemp(u)
	return hu
}

// SetEnvTemp sets the "env_temp" field.
func (hu *HeartbeatUpdate) SetEnvTemp(u uint16) *HeartbeatUpdate {
	hu.mutation.ResetEnvTemp()
	hu.mutation.SetEnvTemp(u)
	return hu
}

// AddEnvTemp adds u to the "env_temp" field.
func (hu *HeartbeatUpdate) AddEnvTemp(u int16) *HeartbeatUpdate {
	hu.mutation.AddEnvTemp(u)
	return hu
}

// SetGeom sets the "geom" field.
func (hu *HeartbeatUpdate) SetGeom(a *adapter.Geometry) *HeartbeatUpdate {
	hu.mutation.SetGeom(a)
	return hu
}

// SetGps sets the "gps" field.
func (hu *HeartbeatUpdate) SetGps(xs xcdef.GPSStatus) *HeartbeatUpdate {
	hu.mutation.SetGps(xs)
	return hu
}

// SetNillableGps sets the "gps" field if the given value is not nil.
func (hu *HeartbeatUpdate) SetNillableGps(xs *xcdef.GPSStatus) *HeartbeatUpdate {
	if xs != nil {
		hu.SetGps(*xs)
	}
	return hu
}

// SetStrength sets the "strength" field.
func (hu *HeartbeatUpdate) SetStrength(u uint8) *HeartbeatUpdate {
	hu.mutation.ResetStrength()
	hu.mutation.SetStrength(u)
	return hu
}

// AddStrength adds u to the "strength" field.
func (hu *HeartbeatUpdate) AddStrength(u int8) *HeartbeatUpdate {
	hu.mutation.AddStrength(u)
	return hu
}

// SetCycles sets the "cycles" field.
func (hu *HeartbeatUpdate) SetCycles(u uint16) *HeartbeatUpdate {
	hu.mutation.ResetCycles()
	hu.mutation.SetCycles(u)
	return hu
}

// AddCycles adds u to the "cycles" field.
func (hu *HeartbeatUpdate) AddCycles(u int16) *HeartbeatUpdate {
	hu.mutation.AddCycles(u)
	return hu
}

// SetChargingTime sets the "charging_time" field.
func (hu *HeartbeatUpdate) SetChargingTime(u uint32) *HeartbeatUpdate {
	hu.mutation.ResetChargingTime()
	hu.mutation.SetChargingTime(u)
	return hu
}

// AddChargingTime adds u to the "charging_time" field.
func (hu *HeartbeatUpdate) AddChargingTime(u int32) *HeartbeatUpdate {
	hu.mutation.AddChargingTime(u)
	return hu
}

// SetDisChargingTime sets the "dis_charging_time" field.
func (hu *HeartbeatUpdate) SetDisChargingTime(u uint32) *HeartbeatUpdate {
	hu.mutation.ResetDisChargingTime()
	hu.mutation.SetDisChargingTime(u)
	return hu
}

// AddDisChargingTime adds u to the "dis_charging_time" field.
func (hu *HeartbeatUpdate) AddDisChargingTime(u int32) *HeartbeatUpdate {
	hu.mutation.AddDisChargingTime(u)
	return hu
}

// SetUsingTime sets the "using_time" field.
func (hu *HeartbeatUpdate) SetUsingTime(u uint32) *HeartbeatUpdate {
	hu.mutation.ResetUsingTime()
	hu.mutation.SetUsingTime(u)
	return hu
}

// AddUsingTime adds u to the "using_time" field.
func (hu *HeartbeatUpdate) AddUsingTime(u int32) *HeartbeatUpdate {
	hu.mutation.AddUsingTime(u)
	return hu
}

// SetTotalChargingTime sets the "total_charging_time" field.
func (hu *HeartbeatUpdate) SetTotalChargingTime(u uint32) *HeartbeatUpdate {
	hu.mutation.ResetTotalChargingTime()
	hu.mutation.SetTotalChargingTime(u)
	return hu
}

// AddTotalChargingTime adds u to the "total_charging_time" field.
func (hu *HeartbeatUpdate) AddTotalChargingTime(u int32) *HeartbeatUpdate {
	hu.mutation.AddTotalChargingTime(u)
	return hu
}

// SetTotalDisChargingTime sets the "total_dis_charging_time" field.
func (hu *HeartbeatUpdate) SetTotalDisChargingTime(u uint32) *HeartbeatUpdate {
	hu.mutation.ResetTotalDisChargingTime()
	hu.mutation.SetTotalDisChargingTime(u)
	return hu
}

// AddTotalDisChargingTime adds u to the "total_dis_charging_time" field.
func (hu *HeartbeatUpdate) AddTotalDisChargingTime(u int32) *HeartbeatUpdate {
	hu.mutation.AddTotalDisChargingTime(u)
	return hu
}

// SetTotalUsingTime sets the "total_using_time" field.
func (hu *HeartbeatUpdate) SetTotalUsingTime(u uint32) *HeartbeatUpdate {
	hu.mutation.ResetTotalUsingTime()
	hu.mutation.SetTotalUsingTime(u)
	return hu
}

// AddTotalUsingTime adds u to the "total_using_time" field.
func (hu *HeartbeatUpdate) AddTotalUsingTime(u int32) *HeartbeatUpdate {
	hu.mutation.AddTotalUsingTime(u)
	return hu
}

// SetBattery sets the "battery" edge to the Battery entity.
func (hu *HeartbeatUpdate) SetBattery(b *Battery) *HeartbeatUpdate {
	return hu.SetBatteryID(b.ID)
}

// Mutation returns the HeartbeatMutation object of the builder.
func (hu *HeartbeatUpdate) Mutation() *HeartbeatMutation {
	return hu.mutation
}

// ClearBattery clears the "battery" edge to the Battery entity.
func (hu *HeartbeatUpdate) ClearBattery() *HeartbeatUpdate {
	hu.mutation.ClearBattery()
	return hu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hu *HeartbeatUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, HeartbeatMutation](ctx, hu.sqlSave, hu.mutation, hu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HeartbeatUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HeartbeatUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HeartbeatUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hu *HeartbeatUpdate) check() error {
	if _, ok := hu.mutation.BatteryID(); hu.mutation.BatteryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Heartbeat.battery"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (hu *HeartbeatUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *HeartbeatUpdate {
	hu.modifiers = append(hu.modifiers, modifiers...)
	return hu
}

func (hu *HeartbeatUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := hu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   heartbeat.Table,
			Columns: heartbeat.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: heartbeat.FieldID,
			},
		},
	}
	if ps := hu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hu.mutation.Sn(); ok {
		_spec.SetField(heartbeat.FieldSn, field.TypeString, value)
	}
	if value, ok := hu.mutation.Voltage(); ok {
		_spec.SetField(heartbeat.FieldVoltage, field.TypeFloat64, value)
	}
	if value, ok := hu.mutation.AddedVoltage(); ok {
		_spec.AddField(heartbeat.FieldVoltage, field.TypeFloat64, value)
	}
	if value, ok := hu.mutation.Current(); ok {
		_spec.SetField(heartbeat.FieldCurrent, field.TypeFloat64, value)
	}
	if value, ok := hu.mutation.AddedCurrent(); ok {
		_spec.AddField(heartbeat.FieldCurrent, field.TypeFloat64, value)
	}
	if value, ok := hu.mutation.Soc(); ok {
		_spec.SetField(heartbeat.FieldSoc, field.TypeUint8, value)
	}
	if value, ok := hu.mutation.AddedSoc(); ok {
		_spec.AddField(heartbeat.FieldSoc, field.TypeUint8, value)
	}
	if value, ok := hu.mutation.Soh(); ok {
		_spec.SetField(heartbeat.FieldSoh, field.TypeUint8, value)
	}
	if value, ok := hu.mutation.AddedSoh(); ok {
		_spec.AddField(heartbeat.FieldSoh, field.TypeUint8, value)
	}
	if value, ok := hu.mutation.InCabinet(); ok {
		_spec.SetField(heartbeat.FieldInCabinet, field.TypeBool, value)
	}
	if value, ok := hu.mutation.Capacity(); ok {
		_spec.SetField(heartbeat.FieldCapacity, field.TypeFloat64, value)
	}
	if value, ok := hu.mutation.AddedCapacity(); ok {
		_spec.AddField(heartbeat.FieldCapacity, field.TypeFloat64, value)
	}
	if value, ok := hu.mutation.MonMaxVoltage(); ok {
		_spec.SetField(heartbeat.FieldMonMaxVoltage, field.TypeUint16, value)
	}
	if value, ok := hu.mutation.AddedMonMaxVoltage(); ok {
		_spec.AddField(heartbeat.FieldMonMaxVoltage, field.TypeUint16, value)
	}
	if value, ok := hu.mutation.MonMaxVoltagePos(); ok {
		_spec.SetField(heartbeat.FieldMonMaxVoltagePos, field.TypeUint8, value)
	}
	if value, ok := hu.mutation.AddedMonMaxVoltagePos(); ok {
		_spec.AddField(heartbeat.FieldMonMaxVoltagePos, field.TypeUint8, value)
	}
	if value, ok := hu.mutation.MonMinVoltage(); ok {
		_spec.SetField(heartbeat.FieldMonMinVoltage, field.TypeUint16, value)
	}
	if value, ok := hu.mutation.AddedMonMinVoltage(); ok {
		_spec.AddField(heartbeat.FieldMonMinVoltage, field.TypeUint16, value)
	}
	if value, ok := hu.mutation.MonMinVoltagePos(); ok {
		_spec.SetField(heartbeat.FieldMonMinVoltagePos, field.TypeUint8, value)
	}
	if value, ok := hu.mutation.AddedMonMinVoltagePos(); ok {
		_spec.AddField(heartbeat.FieldMonMinVoltagePos, field.TypeUint8, value)
	}
	if value, ok := hu.mutation.MaxTemp(); ok {
		_spec.SetField(heartbeat.FieldMaxTemp, field.TypeUint16, value)
	}
	if value, ok := hu.mutation.AddedMaxTemp(); ok {
		_spec.AddField(heartbeat.FieldMaxTemp, field.TypeUint16, value)
	}
	if value, ok := hu.mutation.MinTemp(); ok {
		_spec.SetField(heartbeat.FieldMinTemp, field.TypeUint16, value)
	}
	if value, ok := hu.mutation.AddedMinTemp(); ok {
		_spec.AddField(heartbeat.FieldMinTemp, field.TypeUint16, value)
	}
	if value, ok := hu.mutation.Faults(); ok {
		_spec.SetField(heartbeat.FieldFaults, field.TypeJSON, value)
	}
	if hu.mutation.FaultsCleared() {
		_spec.ClearField(heartbeat.FieldFaults, field.TypeJSON)
	}
	if value, ok := hu.mutation.MosStatus(); ok {
		_spec.SetField(heartbeat.FieldMosStatus, field.TypeJSON, value)
	}
	if value, ok := hu.mutation.MonVoltage(); ok {
		_spec.SetField(heartbeat.FieldMonVoltage, field.TypeJSON, value)
	}
	if value, ok := hu.mutation.Temp(); ok {
		_spec.SetField(heartbeat.FieldTemp, field.TypeJSON, value)
	}
	if value, ok := hu.mutation.MosTemp(); ok {
		_spec.SetField(heartbeat.FieldMosTemp, field.TypeUint16, value)
	}
	if value, ok := hu.mutation.AddedMosTemp(); ok {
		_spec.AddField(heartbeat.FieldMosTemp, field.TypeUint16, value)
	}
	if value, ok := hu.mutation.EnvTemp(); ok {
		_spec.SetField(heartbeat.FieldEnvTemp, field.TypeUint16, value)
	}
	if value, ok := hu.mutation.AddedEnvTemp(); ok {
		_spec.AddField(heartbeat.FieldEnvTemp, field.TypeUint16, value)
	}
	if value, ok := hu.mutation.Geom(); ok {
		_spec.SetField(heartbeat.FieldGeom, field.TypeOther, value)
	}
	if value, ok := hu.mutation.Gps(); ok {
		_spec.SetField(heartbeat.FieldGps, field.TypeOther, value)
	}
	if value, ok := hu.mutation.Strength(); ok {
		_spec.SetField(heartbeat.FieldStrength, field.TypeUint8, value)
	}
	if value, ok := hu.mutation.AddedStrength(); ok {
		_spec.AddField(heartbeat.FieldStrength, field.TypeUint8, value)
	}
	if value, ok := hu.mutation.Cycles(); ok {
		_spec.SetField(heartbeat.FieldCycles, field.TypeUint16, value)
	}
	if value, ok := hu.mutation.AddedCycles(); ok {
		_spec.AddField(heartbeat.FieldCycles, field.TypeUint16, value)
	}
	if value, ok := hu.mutation.ChargingTime(); ok {
		_spec.SetField(heartbeat.FieldChargingTime, field.TypeUint32, value)
	}
	if value, ok := hu.mutation.AddedChargingTime(); ok {
		_spec.AddField(heartbeat.FieldChargingTime, field.TypeUint32, value)
	}
	if value, ok := hu.mutation.DisChargingTime(); ok {
		_spec.SetField(heartbeat.FieldDisChargingTime, field.TypeUint32, value)
	}
	if value, ok := hu.mutation.AddedDisChargingTime(); ok {
		_spec.AddField(heartbeat.FieldDisChargingTime, field.TypeUint32, value)
	}
	if value, ok := hu.mutation.UsingTime(); ok {
		_spec.SetField(heartbeat.FieldUsingTime, field.TypeUint32, value)
	}
	if value, ok := hu.mutation.AddedUsingTime(); ok {
		_spec.AddField(heartbeat.FieldUsingTime, field.TypeUint32, value)
	}
	if value, ok := hu.mutation.TotalChargingTime(); ok {
		_spec.SetField(heartbeat.FieldTotalChargingTime, field.TypeUint32, value)
	}
	if value, ok := hu.mutation.AddedTotalChargingTime(); ok {
		_spec.AddField(heartbeat.FieldTotalChargingTime, field.TypeUint32, value)
	}
	if value, ok := hu.mutation.TotalDisChargingTime(); ok {
		_spec.SetField(heartbeat.FieldTotalDisChargingTime, field.TypeUint32, value)
	}
	if value, ok := hu.mutation.AddedTotalDisChargingTime(); ok {
		_spec.AddField(heartbeat.FieldTotalDisChargingTime, field.TypeUint32, value)
	}
	if value, ok := hu.mutation.TotalUsingTime(); ok {
		_spec.SetField(heartbeat.FieldTotalUsingTime, field.TypeUint32, value)
	}
	if value, ok := hu.mutation.AddedTotalUsingTime(); ok {
		_spec.AddField(heartbeat.FieldTotalUsingTime, field.TypeUint32, value)
	}
	if hu.mutation.BatteryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   heartbeat.BatteryTable,
			Columns: []string{heartbeat.BatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: battery.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.BatteryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   heartbeat.BatteryTable,
			Columns: []string{heartbeat.BatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: battery.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(hu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{heartbeat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hu.mutation.done = true
	return n, nil
}

// HeartbeatUpdateOne is the builder for updating a single Heartbeat entity.
type HeartbeatUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *HeartbeatMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetSn sets the "sn" field.
func (huo *HeartbeatUpdateOne) SetSn(s string) *HeartbeatUpdateOne {
	huo.mutation.SetSn(s)
	return huo
}

// SetBatteryID sets the "battery_id" field.
func (huo *HeartbeatUpdateOne) SetBatteryID(i int) *HeartbeatUpdateOne {
	huo.mutation.SetBatteryID(i)
	return huo
}

// SetVoltage sets the "voltage" field.
func (huo *HeartbeatUpdateOne) SetVoltage(f float64) *HeartbeatUpdateOne {
	huo.mutation.ResetVoltage()
	huo.mutation.SetVoltage(f)
	return huo
}

// AddVoltage adds f to the "voltage" field.
func (huo *HeartbeatUpdateOne) AddVoltage(f float64) *HeartbeatUpdateOne {
	huo.mutation.AddVoltage(f)
	return huo
}

// SetCurrent sets the "current" field.
func (huo *HeartbeatUpdateOne) SetCurrent(f float64) *HeartbeatUpdateOne {
	huo.mutation.ResetCurrent()
	huo.mutation.SetCurrent(f)
	return huo
}

// AddCurrent adds f to the "current" field.
func (huo *HeartbeatUpdateOne) AddCurrent(f float64) *HeartbeatUpdateOne {
	huo.mutation.AddCurrent(f)
	return huo
}

// SetSoc sets the "soc" field.
func (huo *HeartbeatUpdateOne) SetSoc(u uint8) *HeartbeatUpdateOne {
	huo.mutation.ResetSoc()
	huo.mutation.SetSoc(u)
	return huo
}

// AddSoc adds u to the "soc" field.
func (huo *HeartbeatUpdateOne) AddSoc(u int8) *HeartbeatUpdateOne {
	huo.mutation.AddSoc(u)
	return huo
}

// SetSoh sets the "soh" field.
func (huo *HeartbeatUpdateOne) SetSoh(u uint8) *HeartbeatUpdateOne {
	huo.mutation.ResetSoh()
	huo.mutation.SetSoh(u)
	return huo
}

// AddSoh adds u to the "soh" field.
func (huo *HeartbeatUpdateOne) AddSoh(u int8) *HeartbeatUpdateOne {
	huo.mutation.AddSoh(u)
	return huo
}

// SetInCabinet sets the "in_cabinet" field.
func (huo *HeartbeatUpdateOne) SetInCabinet(b bool) *HeartbeatUpdateOne {
	huo.mutation.SetInCabinet(b)
	return huo
}

// SetCapacity sets the "capacity" field.
func (huo *HeartbeatUpdateOne) SetCapacity(f float64) *HeartbeatUpdateOne {
	huo.mutation.ResetCapacity()
	huo.mutation.SetCapacity(f)
	return huo
}

// AddCapacity adds f to the "capacity" field.
func (huo *HeartbeatUpdateOne) AddCapacity(f float64) *HeartbeatUpdateOne {
	huo.mutation.AddCapacity(f)
	return huo
}

// SetMonMaxVoltage sets the "mon_max_voltage" field.
func (huo *HeartbeatUpdateOne) SetMonMaxVoltage(u uint16) *HeartbeatUpdateOne {
	huo.mutation.ResetMonMaxVoltage()
	huo.mutation.SetMonMaxVoltage(u)
	return huo
}

// AddMonMaxVoltage adds u to the "mon_max_voltage" field.
func (huo *HeartbeatUpdateOne) AddMonMaxVoltage(u int16) *HeartbeatUpdateOne {
	huo.mutation.AddMonMaxVoltage(u)
	return huo
}

// SetMonMaxVoltagePos sets the "mon_max_voltage_pos" field.
func (huo *HeartbeatUpdateOne) SetMonMaxVoltagePos(u uint8) *HeartbeatUpdateOne {
	huo.mutation.ResetMonMaxVoltagePos()
	huo.mutation.SetMonMaxVoltagePos(u)
	return huo
}

// AddMonMaxVoltagePos adds u to the "mon_max_voltage_pos" field.
func (huo *HeartbeatUpdateOne) AddMonMaxVoltagePos(u int8) *HeartbeatUpdateOne {
	huo.mutation.AddMonMaxVoltagePos(u)
	return huo
}

// SetMonMinVoltage sets the "mon_min_voltage" field.
func (huo *HeartbeatUpdateOne) SetMonMinVoltage(u uint16) *HeartbeatUpdateOne {
	huo.mutation.ResetMonMinVoltage()
	huo.mutation.SetMonMinVoltage(u)
	return huo
}

// AddMonMinVoltage adds u to the "mon_min_voltage" field.
func (huo *HeartbeatUpdateOne) AddMonMinVoltage(u int16) *HeartbeatUpdateOne {
	huo.mutation.AddMonMinVoltage(u)
	return huo
}

// SetMonMinVoltagePos sets the "mon_min_voltage_pos" field.
func (huo *HeartbeatUpdateOne) SetMonMinVoltagePos(u uint8) *HeartbeatUpdateOne {
	huo.mutation.ResetMonMinVoltagePos()
	huo.mutation.SetMonMinVoltagePos(u)
	return huo
}

// AddMonMinVoltagePos adds u to the "mon_min_voltage_pos" field.
func (huo *HeartbeatUpdateOne) AddMonMinVoltagePos(u int8) *HeartbeatUpdateOne {
	huo.mutation.AddMonMinVoltagePos(u)
	return huo
}

// SetMaxTemp sets the "max_temp" field.
func (huo *HeartbeatUpdateOne) SetMaxTemp(u uint16) *HeartbeatUpdateOne {
	huo.mutation.ResetMaxTemp()
	huo.mutation.SetMaxTemp(u)
	return huo
}

// AddMaxTemp adds u to the "max_temp" field.
func (huo *HeartbeatUpdateOne) AddMaxTemp(u int16) *HeartbeatUpdateOne {
	huo.mutation.AddMaxTemp(u)
	return huo
}

// SetMinTemp sets the "min_temp" field.
func (huo *HeartbeatUpdateOne) SetMinTemp(u uint16) *HeartbeatUpdateOne {
	huo.mutation.ResetMinTemp()
	huo.mutation.SetMinTemp(u)
	return huo
}

// AddMinTemp adds u to the "min_temp" field.
func (huo *HeartbeatUpdateOne) AddMinTemp(u int16) *HeartbeatUpdateOne {
	huo.mutation.AddMinTemp(u)
	return huo
}

// SetFaults sets the "faults" field.
func (huo *HeartbeatUpdateOne) SetFaults(x *xcdef.Faults) *HeartbeatUpdateOne {
	huo.mutation.SetFaults(x)
	return huo
}

// ClearFaults clears the value of the "faults" field.
func (huo *HeartbeatUpdateOne) ClearFaults() *HeartbeatUpdateOne {
	huo.mutation.ClearFaults()
	return huo
}

// SetMosStatus sets the "mos_status" field.
func (huo *HeartbeatUpdateOne) SetMosStatus(xs *xcdef.MosStatus) *HeartbeatUpdateOne {
	huo.mutation.SetMosStatus(xs)
	return huo
}

// SetMonVoltage sets the "mon_voltage" field.
func (huo *HeartbeatUpdateOne) SetMonVoltage(xv *xcdef.MonVoltage) *HeartbeatUpdateOne {
	huo.mutation.SetMonVoltage(xv)
	return huo
}

// SetTemp sets the "temp" field.
func (huo *HeartbeatUpdateOne) SetTemp(x *xcdef.Temperature) *HeartbeatUpdateOne {
	huo.mutation.SetTemp(x)
	return huo
}

// SetMosTemp sets the "mos_temp" field.
func (huo *HeartbeatUpdateOne) SetMosTemp(u uint16) *HeartbeatUpdateOne {
	huo.mutation.ResetMosTemp()
	huo.mutation.SetMosTemp(u)
	return huo
}

// AddMosTemp adds u to the "mos_temp" field.
func (huo *HeartbeatUpdateOne) AddMosTemp(u int16) *HeartbeatUpdateOne {
	huo.mutation.AddMosTemp(u)
	return huo
}

// SetEnvTemp sets the "env_temp" field.
func (huo *HeartbeatUpdateOne) SetEnvTemp(u uint16) *HeartbeatUpdateOne {
	huo.mutation.ResetEnvTemp()
	huo.mutation.SetEnvTemp(u)
	return huo
}

// AddEnvTemp adds u to the "env_temp" field.
func (huo *HeartbeatUpdateOne) AddEnvTemp(u int16) *HeartbeatUpdateOne {
	huo.mutation.AddEnvTemp(u)
	return huo
}

// SetGeom sets the "geom" field.
func (huo *HeartbeatUpdateOne) SetGeom(a *adapter.Geometry) *HeartbeatUpdateOne {
	huo.mutation.SetGeom(a)
	return huo
}

// SetGps sets the "gps" field.
func (huo *HeartbeatUpdateOne) SetGps(xs xcdef.GPSStatus) *HeartbeatUpdateOne {
	huo.mutation.SetGps(xs)
	return huo
}

// SetNillableGps sets the "gps" field if the given value is not nil.
func (huo *HeartbeatUpdateOne) SetNillableGps(xs *xcdef.GPSStatus) *HeartbeatUpdateOne {
	if xs != nil {
		huo.SetGps(*xs)
	}
	return huo
}

// SetStrength sets the "strength" field.
func (huo *HeartbeatUpdateOne) SetStrength(u uint8) *HeartbeatUpdateOne {
	huo.mutation.ResetStrength()
	huo.mutation.SetStrength(u)
	return huo
}

// AddStrength adds u to the "strength" field.
func (huo *HeartbeatUpdateOne) AddStrength(u int8) *HeartbeatUpdateOne {
	huo.mutation.AddStrength(u)
	return huo
}

// SetCycles sets the "cycles" field.
func (huo *HeartbeatUpdateOne) SetCycles(u uint16) *HeartbeatUpdateOne {
	huo.mutation.ResetCycles()
	huo.mutation.SetCycles(u)
	return huo
}

// AddCycles adds u to the "cycles" field.
func (huo *HeartbeatUpdateOne) AddCycles(u int16) *HeartbeatUpdateOne {
	huo.mutation.AddCycles(u)
	return huo
}

// SetChargingTime sets the "charging_time" field.
func (huo *HeartbeatUpdateOne) SetChargingTime(u uint32) *HeartbeatUpdateOne {
	huo.mutation.ResetChargingTime()
	huo.mutation.SetChargingTime(u)
	return huo
}

// AddChargingTime adds u to the "charging_time" field.
func (huo *HeartbeatUpdateOne) AddChargingTime(u int32) *HeartbeatUpdateOne {
	huo.mutation.AddChargingTime(u)
	return huo
}

// SetDisChargingTime sets the "dis_charging_time" field.
func (huo *HeartbeatUpdateOne) SetDisChargingTime(u uint32) *HeartbeatUpdateOne {
	huo.mutation.ResetDisChargingTime()
	huo.mutation.SetDisChargingTime(u)
	return huo
}

// AddDisChargingTime adds u to the "dis_charging_time" field.
func (huo *HeartbeatUpdateOne) AddDisChargingTime(u int32) *HeartbeatUpdateOne {
	huo.mutation.AddDisChargingTime(u)
	return huo
}

// SetUsingTime sets the "using_time" field.
func (huo *HeartbeatUpdateOne) SetUsingTime(u uint32) *HeartbeatUpdateOne {
	huo.mutation.ResetUsingTime()
	huo.mutation.SetUsingTime(u)
	return huo
}

// AddUsingTime adds u to the "using_time" field.
func (huo *HeartbeatUpdateOne) AddUsingTime(u int32) *HeartbeatUpdateOne {
	huo.mutation.AddUsingTime(u)
	return huo
}

// SetTotalChargingTime sets the "total_charging_time" field.
func (huo *HeartbeatUpdateOne) SetTotalChargingTime(u uint32) *HeartbeatUpdateOne {
	huo.mutation.ResetTotalChargingTime()
	huo.mutation.SetTotalChargingTime(u)
	return huo
}

// AddTotalChargingTime adds u to the "total_charging_time" field.
func (huo *HeartbeatUpdateOne) AddTotalChargingTime(u int32) *HeartbeatUpdateOne {
	huo.mutation.AddTotalChargingTime(u)
	return huo
}

// SetTotalDisChargingTime sets the "total_dis_charging_time" field.
func (huo *HeartbeatUpdateOne) SetTotalDisChargingTime(u uint32) *HeartbeatUpdateOne {
	huo.mutation.ResetTotalDisChargingTime()
	huo.mutation.SetTotalDisChargingTime(u)
	return huo
}

// AddTotalDisChargingTime adds u to the "total_dis_charging_time" field.
func (huo *HeartbeatUpdateOne) AddTotalDisChargingTime(u int32) *HeartbeatUpdateOne {
	huo.mutation.AddTotalDisChargingTime(u)
	return huo
}

// SetTotalUsingTime sets the "total_using_time" field.
func (huo *HeartbeatUpdateOne) SetTotalUsingTime(u uint32) *HeartbeatUpdateOne {
	huo.mutation.ResetTotalUsingTime()
	huo.mutation.SetTotalUsingTime(u)
	return huo
}

// AddTotalUsingTime adds u to the "total_using_time" field.
func (huo *HeartbeatUpdateOne) AddTotalUsingTime(u int32) *HeartbeatUpdateOne {
	huo.mutation.AddTotalUsingTime(u)
	return huo
}

// SetBattery sets the "battery" edge to the Battery entity.
func (huo *HeartbeatUpdateOne) SetBattery(b *Battery) *HeartbeatUpdateOne {
	return huo.SetBatteryID(b.ID)
}

// Mutation returns the HeartbeatMutation object of the builder.
func (huo *HeartbeatUpdateOne) Mutation() *HeartbeatMutation {
	return huo.mutation
}

// ClearBattery clears the "battery" edge to the Battery entity.
func (huo *HeartbeatUpdateOne) ClearBattery() *HeartbeatUpdateOne {
	huo.mutation.ClearBattery()
	return huo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (huo *HeartbeatUpdateOne) Select(field string, fields ...string) *HeartbeatUpdateOne {
	huo.fields = append([]string{field}, fields...)
	return huo
}

// Save executes the query and returns the updated Heartbeat entity.
func (huo *HeartbeatUpdateOne) Save(ctx context.Context) (*Heartbeat, error) {
	return withHooks[*Heartbeat, HeartbeatMutation](ctx, huo.sqlSave, huo.mutation, huo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HeartbeatUpdateOne) SaveX(ctx context.Context) *Heartbeat {
	node, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (huo *HeartbeatUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HeartbeatUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (huo *HeartbeatUpdateOne) check() error {
	if _, ok := huo.mutation.BatteryID(); huo.mutation.BatteryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Heartbeat.battery"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (huo *HeartbeatUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *HeartbeatUpdateOne {
	huo.modifiers = append(huo.modifiers, modifiers...)
	return huo
}

func (huo *HeartbeatUpdateOne) sqlSave(ctx context.Context) (_node *Heartbeat, err error) {
	if err := huo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   heartbeat.Table,
			Columns: heartbeat.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: heartbeat.FieldID,
			},
		},
	}
	id, ok := huo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Heartbeat.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := huo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, heartbeat.FieldID)
		for _, f := range fields {
			if !heartbeat.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != heartbeat.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := huo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := huo.mutation.Sn(); ok {
		_spec.SetField(heartbeat.FieldSn, field.TypeString, value)
	}
	if value, ok := huo.mutation.Voltage(); ok {
		_spec.SetField(heartbeat.FieldVoltage, field.TypeFloat64, value)
	}
	if value, ok := huo.mutation.AddedVoltage(); ok {
		_spec.AddField(heartbeat.FieldVoltage, field.TypeFloat64, value)
	}
	if value, ok := huo.mutation.Current(); ok {
		_spec.SetField(heartbeat.FieldCurrent, field.TypeFloat64, value)
	}
	if value, ok := huo.mutation.AddedCurrent(); ok {
		_spec.AddField(heartbeat.FieldCurrent, field.TypeFloat64, value)
	}
	if value, ok := huo.mutation.Soc(); ok {
		_spec.SetField(heartbeat.FieldSoc, field.TypeUint8, value)
	}
	if value, ok := huo.mutation.AddedSoc(); ok {
		_spec.AddField(heartbeat.FieldSoc, field.TypeUint8, value)
	}
	if value, ok := huo.mutation.Soh(); ok {
		_spec.SetField(heartbeat.FieldSoh, field.TypeUint8, value)
	}
	if value, ok := huo.mutation.AddedSoh(); ok {
		_spec.AddField(heartbeat.FieldSoh, field.TypeUint8, value)
	}
	if value, ok := huo.mutation.InCabinet(); ok {
		_spec.SetField(heartbeat.FieldInCabinet, field.TypeBool, value)
	}
	if value, ok := huo.mutation.Capacity(); ok {
		_spec.SetField(heartbeat.FieldCapacity, field.TypeFloat64, value)
	}
	if value, ok := huo.mutation.AddedCapacity(); ok {
		_spec.AddField(heartbeat.FieldCapacity, field.TypeFloat64, value)
	}
	if value, ok := huo.mutation.MonMaxVoltage(); ok {
		_spec.SetField(heartbeat.FieldMonMaxVoltage, field.TypeUint16, value)
	}
	if value, ok := huo.mutation.AddedMonMaxVoltage(); ok {
		_spec.AddField(heartbeat.FieldMonMaxVoltage, field.TypeUint16, value)
	}
	if value, ok := huo.mutation.MonMaxVoltagePos(); ok {
		_spec.SetField(heartbeat.FieldMonMaxVoltagePos, field.TypeUint8, value)
	}
	if value, ok := huo.mutation.AddedMonMaxVoltagePos(); ok {
		_spec.AddField(heartbeat.FieldMonMaxVoltagePos, field.TypeUint8, value)
	}
	if value, ok := huo.mutation.MonMinVoltage(); ok {
		_spec.SetField(heartbeat.FieldMonMinVoltage, field.TypeUint16, value)
	}
	if value, ok := huo.mutation.AddedMonMinVoltage(); ok {
		_spec.AddField(heartbeat.FieldMonMinVoltage, field.TypeUint16, value)
	}
	if value, ok := huo.mutation.MonMinVoltagePos(); ok {
		_spec.SetField(heartbeat.FieldMonMinVoltagePos, field.TypeUint8, value)
	}
	if value, ok := huo.mutation.AddedMonMinVoltagePos(); ok {
		_spec.AddField(heartbeat.FieldMonMinVoltagePos, field.TypeUint8, value)
	}
	if value, ok := huo.mutation.MaxTemp(); ok {
		_spec.SetField(heartbeat.FieldMaxTemp, field.TypeUint16, value)
	}
	if value, ok := huo.mutation.AddedMaxTemp(); ok {
		_spec.AddField(heartbeat.FieldMaxTemp, field.TypeUint16, value)
	}
	if value, ok := huo.mutation.MinTemp(); ok {
		_spec.SetField(heartbeat.FieldMinTemp, field.TypeUint16, value)
	}
	if value, ok := huo.mutation.AddedMinTemp(); ok {
		_spec.AddField(heartbeat.FieldMinTemp, field.TypeUint16, value)
	}
	if value, ok := huo.mutation.Faults(); ok {
		_spec.SetField(heartbeat.FieldFaults, field.TypeJSON, value)
	}
	if huo.mutation.FaultsCleared() {
		_spec.ClearField(heartbeat.FieldFaults, field.TypeJSON)
	}
	if value, ok := huo.mutation.MosStatus(); ok {
		_spec.SetField(heartbeat.FieldMosStatus, field.TypeJSON, value)
	}
	if value, ok := huo.mutation.MonVoltage(); ok {
		_spec.SetField(heartbeat.FieldMonVoltage, field.TypeJSON, value)
	}
	if value, ok := huo.mutation.Temp(); ok {
		_spec.SetField(heartbeat.FieldTemp, field.TypeJSON, value)
	}
	if value, ok := huo.mutation.MosTemp(); ok {
		_spec.SetField(heartbeat.FieldMosTemp, field.TypeUint16, value)
	}
	if value, ok := huo.mutation.AddedMosTemp(); ok {
		_spec.AddField(heartbeat.FieldMosTemp, field.TypeUint16, value)
	}
	if value, ok := huo.mutation.EnvTemp(); ok {
		_spec.SetField(heartbeat.FieldEnvTemp, field.TypeUint16, value)
	}
	if value, ok := huo.mutation.AddedEnvTemp(); ok {
		_spec.AddField(heartbeat.FieldEnvTemp, field.TypeUint16, value)
	}
	if value, ok := huo.mutation.Geom(); ok {
		_spec.SetField(heartbeat.FieldGeom, field.TypeOther, value)
	}
	if value, ok := huo.mutation.Gps(); ok {
		_spec.SetField(heartbeat.FieldGps, field.TypeOther, value)
	}
	if value, ok := huo.mutation.Strength(); ok {
		_spec.SetField(heartbeat.FieldStrength, field.TypeUint8, value)
	}
	if value, ok := huo.mutation.AddedStrength(); ok {
		_spec.AddField(heartbeat.FieldStrength, field.TypeUint8, value)
	}
	if value, ok := huo.mutation.Cycles(); ok {
		_spec.SetField(heartbeat.FieldCycles, field.TypeUint16, value)
	}
	if value, ok := huo.mutation.AddedCycles(); ok {
		_spec.AddField(heartbeat.FieldCycles, field.TypeUint16, value)
	}
	if value, ok := huo.mutation.ChargingTime(); ok {
		_spec.SetField(heartbeat.FieldChargingTime, field.TypeUint32, value)
	}
	if value, ok := huo.mutation.AddedChargingTime(); ok {
		_spec.AddField(heartbeat.FieldChargingTime, field.TypeUint32, value)
	}
	if value, ok := huo.mutation.DisChargingTime(); ok {
		_spec.SetField(heartbeat.FieldDisChargingTime, field.TypeUint32, value)
	}
	if value, ok := huo.mutation.AddedDisChargingTime(); ok {
		_spec.AddField(heartbeat.FieldDisChargingTime, field.TypeUint32, value)
	}
	if value, ok := huo.mutation.UsingTime(); ok {
		_spec.SetField(heartbeat.FieldUsingTime, field.TypeUint32, value)
	}
	if value, ok := huo.mutation.AddedUsingTime(); ok {
		_spec.AddField(heartbeat.FieldUsingTime, field.TypeUint32, value)
	}
	if value, ok := huo.mutation.TotalChargingTime(); ok {
		_spec.SetField(heartbeat.FieldTotalChargingTime, field.TypeUint32, value)
	}
	if value, ok := huo.mutation.AddedTotalChargingTime(); ok {
		_spec.AddField(heartbeat.FieldTotalChargingTime, field.TypeUint32, value)
	}
	if value, ok := huo.mutation.TotalDisChargingTime(); ok {
		_spec.SetField(heartbeat.FieldTotalDisChargingTime, field.TypeUint32, value)
	}
	if value, ok := huo.mutation.AddedTotalDisChargingTime(); ok {
		_spec.AddField(heartbeat.FieldTotalDisChargingTime, field.TypeUint32, value)
	}
	if value, ok := huo.mutation.TotalUsingTime(); ok {
		_spec.SetField(heartbeat.FieldTotalUsingTime, field.TypeUint32, value)
	}
	if value, ok := huo.mutation.AddedTotalUsingTime(); ok {
		_spec.AddField(heartbeat.FieldTotalUsingTime, field.TypeUint32, value)
	}
	if huo.mutation.BatteryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   heartbeat.BatteryTable,
			Columns: []string{heartbeat.BatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: battery.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.BatteryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   heartbeat.BatteryTable,
			Columns: []string{heartbeat.BatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: battery.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(huo.modifiers...)
	_node = &Heartbeat{config: huo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{heartbeat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	huo.mutation.done = true
	return _node, nil
}
