// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/adapter"
	"github.com/auroraride/adapter/defs/batdef"
	"github.com/auroraride/adapter/defs/xcdef/ent/battery"
	"github.com/auroraride/adapter/defs/xcdef/ent/reign"
)

// ReignCreate is the builder for creating a Reign entity.
type ReignCreate struct {
	config
	mutation *ReignMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAction sets the "action" field.
func (rc *ReignCreate) SetAction(ba batdef.ReignAction) *ReignCreate {
	rc.mutation.SetAction(ba)
	return rc
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (rc *ReignCreate) SetNillableAction(ba *batdef.ReignAction) *ReignCreate {
	if ba != nil {
		rc.SetAction(*ba)
	}
	return rc
}

// SetSn sets the "sn" field.
func (rc *ReignCreate) SetSn(s string) *ReignCreate {
	rc.mutation.SetSn(s)
	return rc
}

// SetBatteryID sets the "battery_id" field.
func (rc *ReignCreate) SetBatteryID(i int) *ReignCreate {
	rc.mutation.SetBatteryID(i)
	return rc
}

// SetCreatedAt sets the "created_at" field.
func (rc *ReignCreate) SetCreatedAt(t time.Time) *ReignCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *ReignCreate) SetNillableCreatedAt(t *time.Time) *ReignCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetSerial sets the "serial" field.
func (rc *ReignCreate) SetSerial(s string) *ReignCreate {
	rc.mutation.SetSerial(s)
	return rc
}

// SetOrdinal sets the "ordinal" field.
func (rc *ReignCreate) SetOrdinal(i int) *ReignCreate {
	rc.mutation.SetOrdinal(i)
	return rc
}

// SetCabinetName sets the "cabinet_name" field.
func (rc *ReignCreate) SetCabinetName(s string) *ReignCreate {
	rc.mutation.SetCabinetName(s)
	return rc
}

// SetNillableCabinetName sets the "cabinet_name" field if the given value is not nil.
func (rc *ReignCreate) SetNillableCabinetName(s *string) *ReignCreate {
	if s != nil {
		rc.SetCabinetName(*s)
	}
	return rc
}

// SetRemark sets the "remark" field.
func (rc *ReignCreate) SetRemark(s string) *ReignCreate {
	rc.mutation.SetRemark(s)
	return rc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (rc *ReignCreate) SetNillableRemark(s *string) *ReignCreate {
	if s != nil {
		rc.SetRemark(*s)
	}
	return rc
}

// SetGeom sets the "geom" field.
func (rc *ReignCreate) SetGeom(a *adapter.Geometry) *ReignCreate {
	rc.mutation.SetGeom(a)
	return rc
}

// SetBattery sets the "battery" edge to the Battery entity.
func (rc *ReignCreate) SetBattery(b *Battery) *ReignCreate {
	return rc.SetBatteryID(b.ID)
}

// Mutation returns the ReignMutation object of the builder.
func (rc *ReignCreate) Mutation() *ReignMutation {
	return rc.mutation
}

// Save creates the Reign in the database.
func (rc *ReignCreate) Save(ctx context.Context) (*Reign, error) {
	rc.defaults()
	return withHooks[*Reign, ReignMutation](ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ReignCreate) SaveX(ctx context.Context) *Reign {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *ReignCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *ReignCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *ReignCreate) defaults() {
	if _, ok := rc.mutation.Action(); !ok {
		v := reign.DefaultAction
		rc.mutation.SetAction(v)
	}
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := reign.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *ReignCreate) check() error {
	if _, ok := rc.mutation.Action(); !ok {
		return &ValidationError{Name: "action", err: errors.New(`ent: missing required field "Reign.action"`)}
	}
	if _, ok := rc.mutation.Sn(); !ok {
		return &ValidationError{Name: "sn", err: errors.New(`ent: missing required field "Reign.sn"`)}
	}
	if _, ok := rc.mutation.BatteryID(); !ok {
		return &ValidationError{Name: "battery_id", err: errors.New(`ent: missing required field "Reign.battery_id"`)}
	}
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Reign.created_at"`)}
	}
	if _, ok := rc.mutation.Serial(); !ok {
		return &ValidationError{Name: "serial", err: errors.New(`ent: missing required field "Reign.serial"`)}
	}
	if _, ok := rc.mutation.Ordinal(); !ok {
		return &ValidationError{Name: "ordinal", err: errors.New(`ent: missing required field "Reign.ordinal"`)}
	}
	if _, ok := rc.mutation.Geom(); !ok {
		return &ValidationError{Name: "geom", err: errors.New(`ent: missing required field "Reign.geom"`)}
	}
	if _, ok := rc.mutation.BatteryID(); !ok {
		return &ValidationError{Name: "battery", err: errors.New(`ent: missing required edge "Reign.battery"`)}
	}
	return nil
}

func (rc *ReignCreate) sqlSave(ctx context.Context) (*Reign, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *ReignCreate) createSpec() (*Reign, *sqlgraph.CreateSpec) {
	var (
		_node = &Reign{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: reign.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: reign.FieldID,
			},
		}
	)
	_spec.OnConflict = rc.conflict
	if value, ok := rc.mutation.Action(); ok {
		_spec.SetField(reign.FieldAction, field.TypeOther, value)
		_node.Action = value
	}
	if value, ok := rc.mutation.Sn(); ok {
		_spec.SetField(reign.FieldSn, field.TypeString, value)
		_node.Sn = value
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(reign.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.Serial(); ok {
		_spec.SetField(reign.FieldSerial, field.TypeString, value)
		_node.Serial = value
	}
	if value, ok := rc.mutation.Ordinal(); ok {
		_spec.SetField(reign.FieldOrdinal, field.TypeInt, value)
		_node.Ordinal = value
	}
	if value, ok := rc.mutation.CabinetName(); ok {
		_spec.SetField(reign.FieldCabinetName, field.TypeString, value)
		_node.CabinetName = &value
	}
	if value, ok := rc.mutation.Remark(); ok {
		_spec.SetField(reign.FieldRemark, field.TypeString, value)
		_node.Remark = &value
	}
	if value, ok := rc.mutation.Geom(); ok {
		_spec.SetField(reign.FieldGeom, field.TypeOther, value)
		_node.Geom = value
	}
	if nodes := rc.mutation.BatteryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reign.BatteryTable,
			Columns: []string{reign.BatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: battery.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BatteryID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Reign.Create().
//		SetAction(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReignUpsert) {
//			SetAction(v+v).
//		}).
//		Exec(ctx)
func (rc *ReignCreate) OnConflict(opts ...sql.ConflictOption) *ReignUpsertOne {
	rc.conflict = opts
	return &ReignUpsertOne{
		create: rc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Reign.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rc *ReignCreate) OnConflictColumns(columns ...string) *ReignUpsertOne {
	rc.conflict = append(rc.conflict, sql.ConflictColumns(columns...))
	return &ReignUpsertOne{
		create: rc,
	}
}

type (
	// ReignUpsertOne is the builder for "upsert"-ing
	//  one Reign node.
	ReignUpsertOne struct {
		create *ReignCreate
	}

	// ReignUpsert is the "OnConflict" setter.
	ReignUpsert struct {
		*sql.UpdateSet
	}
)

// SetAction sets the "action" field.
func (u *ReignUpsert) SetAction(v batdef.ReignAction) *ReignUpsert {
	u.Set(reign.FieldAction, v)
	return u
}

// UpdateAction sets the "action" field to the value that was provided on create.
func (u *ReignUpsert) UpdateAction() *ReignUpsert {
	u.SetExcluded(reign.FieldAction)
	return u
}

// SetSn sets the "sn" field.
func (u *ReignUpsert) SetSn(v string) *ReignUpsert {
	u.Set(reign.FieldSn, v)
	return u
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *ReignUpsert) UpdateSn() *ReignUpsert {
	u.SetExcluded(reign.FieldSn)
	return u
}

// SetBatteryID sets the "battery_id" field.
func (u *ReignUpsert) SetBatteryID(v int) *ReignUpsert {
	u.Set(reign.FieldBatteryID, v)
	return u
}

// UpdateBatteryID sets the "battery_id" field to the value that was provided on create.
func (u *ReignUpsert) UpdateBatteryID() *ReignUpsert {
	u.SetExcluded(reign.FieldBatteryID)
	return u
}

// SetSerial sets the "serial" field.
func (u *ReignUpsert) SetSerial(v string) *ReignUpsert {
	u.Set(reign.FieldSerial, v)
	return u
}

// UpdateSerial sets the "serial" field to the value that was provided on create.
func (u *ReignUpsert) UpdateSerial() *ReignUpsert {
	u.SetExcluded(reign.FieldSerial)
	return u
}

// SetOrdinal sets the "ordinal" field.
func (u *ReignUpsert) SetOrdinal(v int) *ReignUpsert {
	u.Set(reign.FieldOrdinal, v)
	return u
}

// UpdateOrdinal sets the "ordinal" field to the value that was provided on create.
func (u *ReignUpsert) UpdateOrdinal() *ReignUpsert {
	u.SetExcluded(reign.FieldOrdinal)
	return u
}

// AddOrdinal adds v to the "ordinal" field.
func (u *ReignUpsert) AddOrdinal(v int) *ReignUpsert {
	u.Add(reign.FieldOrdinal, v)
	return u
}

// SetCabinetName sets the "cabinet_name" field.
func (u *ReignUpsert) SetCabinetName(v string) *ReignUpsert {
	u.Set(reign.FieldCabinetName, v)
	return u
}

// UpdateCabinetName sets the "cabinet_name" field to the value that was provided on create.
func (u *ReignUpsert) UpdateCabinetName() *ReignUpsert {
	u.SetExcluded(reign.FieldCabinetName)
	return u
}

// ClearCabinetName clears the value of the "cabinet_name" field.
func (u *ReignUpsert) ClearCabinetName() *ReignUpsert {
	u.SetNull(reign.FieldCabinetName)
	return u
}

// SetRemark sets the "remark" field.
func (u *ReignUpsert) SetRemark(v string) *ReignUpsert {
	u.Set(reign.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *ReignUpsert) UpdateRemark() *ReignUpsert {
	u.SetExcluded(reign.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *ReignUpsert) ClearRemark() *ReignUpsert {
	u.SetNull(reign.FieldRemark)
	return u
}

// SetGeom sets the "geom" field.
func (u *ReignUpsert) SetGeom(v *adapter.Geometry) *ReignUpsert {
	u.Set(reign.FieldGeom, v)
	return u
}

// UpdateGeom sets the "geom" field to the value that was provided on create.
func (u *ReignUpsert) UpdateGeom() *ReignUpsert {
	u.SetExcluded(reign.FieldGeom)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Reign.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ReignUpsertOne) UpdateNewValues() *ReignUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(reign.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Reign.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ReignUpsertOne) Ignore() *ReignUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReignUpsertOne) DoNothing() *ReignUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReignCreate.OnConflict
// documentation for more info.
func (u *ReignUpsertOne) Update(set func(*ReignUpsert)) *ReignUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReignUpsert{UpdateSet: update})
	}))
	return u
}

// SetAction sets the "action" field.
func (u *ReignUpsertOne) SetAction(v batdef.ReignAction) *ReignUpsertOne {
	return u.Update(func(s *ReignUpsert) {
		s.SetAction(v)
	})
}

// UpdateAction sets the "action" field to the value that was provided on create.
func (u *ReignUpsertOne) UpdateAction() *ReignUpsertOne {
	return u.Update(func(s *ReignUpsert) {
		s.UpdateAction()
	})
}

// SetSn sets the "sn" field.
func (u *ReignUpsertOne) SetSn(v string) *ReignUpsertOne {
	return u.Update(func(s *ReignUpsert) {
		s.SetSn(v)
	})
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *ReignUpsertOne) UpdateSn() *ReignUpsertOne {
	return u.Update(func(s *ReignUpsert) {
		s.UpdateSn()
	})
}

// SetBatteryID sets the "battery_id" field.
func (u *ReignUpsertOne) SetBatteryID(v int) *ReignUpsertOne {
	return u.Update(func(s *ReignUpsert) {
		s.SetBatteryID(v)
	})
}

// UpdateBatteryID sets the "battery_id" field to the value that was provided on create.
func (u *ReignUpsertOne) UpdateBatteryID() *ReignUpsertOne {
	return u.Update(func(s *ReignUpsert) {
		s.UpdateBatteryID()
	})
}

// SetSerial sets the "serial" field.
func (u *ReignUpsertOne) SetSerial(v string) *ReignUpsertOne {
	return u.Update(func(s *ReignUpsert) {
		s.SetSerial(v)
	})
}

// UpdateSerial sets the "serial" field to the value that was provided on create.
func (u *ReignUpsertOne) UpdateSerial() *ReignUpsertOne {
	return u.Update(func(s *ReignUpsert) {
		s.UpdateSerial()
	})
}

// SetOrdinal sets the "ordinal" field.
func (u *ReignUpsertOne) SetOrdinal(v int) *ReignUpsertOne {
	return u.Update(func(s *ReignUpsert) {
		s.SetOrdinal(v)
	})
}

// AddOrdinal adds v to the "ordinal" field.
func (u *ReignUpsertOne) AddOrdinal(v int) *ReignUpsertOne {
	return u.Update(func(s *ReignUpsert) {
		s.AddOrdinal(v)
	})
}

// UpdateOrdinal sets the "ordinal" field to the value that was provided on create.
func (u *ReignUpsertOne) UpdateOrdinal() *ReignUpsertOne {
	return u.Update(func(s *ReignUpsert) {
		s.UpdateOrdinal()
	})
}

// SetCabinetName sets the "cabinet_name" field.
func (u *ReignUpsertOne) SetCabinetName(v string) *ReignUpsertOne {
	return u.Update(func(s *ReignUpsert) {
		s.SetCabinetName(v)
	})
}

// UpdateCabinetName sets the "cabinet_name" field to the value that was provided on create.
func (u *ReignUpsertOne) UpdateCabinetName() *ReignUpsertOne {
	return u.Update(func(s *ReignUpsert) {
		s.UpdateCabinetName()
	})
}

// ClearCabinetName clears the value of the "cabinet_name" field.
func (u *ReignUpsertOne) ClearCabinetName() *ReignUpsertOne {
	return u.Update(func(s *ReignUpsert) {
		s.ClearCabinetName()
	})
}

// SetRemark sets the "remark" field.
func (u *ReignUpsertOne) SetRemark(v string) *ReignUpsertOne {
	return u.Update(func(s *ReignUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *ReignUpsertOne) UpdateRemark() *ReignUpsertOne {
	return u.Update(func(s *ReignUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *ReignUpsertOne) ClearRemark() *ReignUpsertOne {
	return u.Update(func(s *ReignUpsert) {
		s.ClearRemark()
	})
}

// SetGeom sets the "geom" field.
func (u *ReignUpsertOne) SetGeom(v *adapter.Geometry) *ReignUpsertOne {
	return u.Update(func(s *ReignUpsert) {
		s.SetGeom(v)
	})
}

// UpdateGeom sets the "geom" field to the value that was provided on create.
func (u *ReignUpsertOne) UpdateGeom() *ReignUpsertOne {
	return u.Update(func(s *ReignUpsert) {
		s.UpdateGeom()
	})
}

// Exec executes the query.
func (u *ReignUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReignCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReignUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ReignUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ReignUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ReignCreateBulk is the builder for creating many Reign entities in bulk.
type ReignCreateBulk struct {
	config
	builders []*ReignCreate
	conflict []sql.ConflictOption
}

// Save creates the Reign entities in the database.
func (rcb *ReignCreateBulk) Save(ctx context.Context) ([]*Reign, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Reign, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReignMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ReignCreateBulk) SaveX(ctx context.Context) []*Reign {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *ReignCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *ReignCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Reign.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReignUpsert) {
//			SetAction(v+v).
//		}).
//		Exec(ctx)
func (rcb *ReignCreateBulk) OnConflict(opts ...sql.ConflictOption) *ReignUpsertBulk {
	rcb.conflict = opts
	return &ReignUpsertBulk{
		create: rcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Reign.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcb *ReignCreateBulk) OnConflictColumns(columns ...string) *ReignUpsertBulk {
	rcb.conflict = append(rcb.conflict, sql.ConflictColumns(columns...))
	return &ReignUpsertBulk{
		create: rcb,
	}
}

// ReignUpsertBulk is the builder for "upsert"-ing
// a bulk of Reign nodes.
type ReignUpsertBulk struct {
	create *ReignCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Reign.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ReignUpsertBulk) UpdateNewValues() *ReignUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(reign.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Reign.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ReignUpsertBulk) Ignore() *ReignUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReignUpsertBulk) DoNothing() *ReignUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReignCreateBulk.OnConflict
// documentation for more info.
func (u *ReignUpsertBulk) Update(set func(*ReignUpsert)) *ReignUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReignUpsert{UpdateSet: update})
	}))
	return u
}

// SetAction sets the "action" field.
func (u *ReignUpsertBulk) SetAction(v batdef.ReignAction) *ReignUpsertBulk {
	return u.Update(func(s *ReignUpsert) {
		s.SetAction(v)
	})
}

// UpdateAction sets the "action" field to the value that was provided on create.
func (u *ReignUpsertBulk) UpdateAction() *ReignUpsertBulk {
	return u.Update(func(s *ReignUpsert) {
		s.UpdateAction()
	})
}

// SetSn sets the "sn" field.
func (u *ReignUpsertBulk) SetSn(v string) *ReignUpsertBulk {
	return u.Update(func(s *ReignUpsert) {
		s.SetSn(v)
	})
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *ReignUpsertBulk) UpdateSn() *ReignUpsertBulk {
	return u.Update(func(s *ReignUpsert) {
		s.UpdateSn()
	})
}

// SetBatteryID sets the "battery_id" field.
func (u *ReignUpsertBulk) SetBatteryID(v int) *ReignUpsertBulk {
	return u.Update(func(s *ReignUpsert) {
		s.SetBatteryID(v)
	})
}

// UpdateBatteryID sets the "battery_id" field to the value that was provided on create.
func (u *ReignUpsertBulk) UpdateBatteryID() *ReignUpsertBulk {
	return u.Update(func(s *ReignUpsert) {
		s.UpdateBatteryID()
	})
}

// SetSerial sets the "serial" field.
func (u *ReignUpsertBulk) SetSerial(v string) *ReignUpsertBulk {
	return u.Update(func(s *ReignUpsert) {
		s.SetSerial(v)
	})
}

// UpdateSerial sets the "serial" field to the value that was provided on create.
func (u *ReignUpsertBulk) UpdateSerial() *ReignUpsertBulk {
	return u.Update(func(s *ReignUpsert) {
		s.UpdateSerial()
	})
}

// SetOrdinal sets the "ordinal" field.
func (u *ReignUpsertBulk) SetOrdinal(v int) *ReignUpsertBulk {
	return u.Update(func(s *ReignUpsert) {
		s.SetOrdinal(v)
	})
}

// AddOrdinal adds v to the "ordinal" field.
func (u *ReignUpsertBulk) AddOrdinal(v int) *ReignUpsertBulk {
	return u.Update(func(s *ReignUpsert) {
		s.AddOrdinal(v)
	})
}

// UpdateOrdinal sets the "ordinal" field to the value that was provided on create.
func (u *ReignUpsertBulk) UpdateOrdinal() *ReignUpsertBulk {
	return u.Update(func(s *ReignUpsert) {
		s.UpdateOrdinal()
	})
}

// SetCabinetName sets the "cabinet_name" field.
func (u *ReignUpsertBulk) SetCabinetName(v string) *ReignUpsertBulk {
	return u.Update(func(s *ReignUpsert) {
		s.SetCabinetName(v)
	})
}

// UpdateCabinetName sets the "cabinet_name" field to the value that was provided on create.
func (u *ReignUpsertBulk) UpdateCabinetName() *ReignUpsertBulk {
	return u.Update(func(s *ReignUpsert) {
		s.UpdateCabinetName()
	})
}

// ClearCabinetName clears the value of the "cabinet_name" field.
func (u *ReignUpsertBulk) ClearCabinetName() *ReignUpsertBulk {
	return u.Update(func(s *ReignUpsert) {
		s.ClearCabinetName()
	})
}

// SetRemark sets the "remark" field.
func (u *ReignUpsertBulk) SetRemark(v string) *ReignUpsertBulk {
	return u.Update(func(s *ReignUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *ReignUpsertBulk) UpdateRemark() *ReignUpsertBulk {
	return u.Update(func(s *ReignUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *ReignUpsertBulk) ClearRemark() *ReignUpsertBulk {
	return u.Update(func(s *ReignUpsert) {
		s.ClearRemark()
	})
}

// SetGeom sets the "geom" field.
func (u *ReignUpsertBulk) SetGeom(v *adapter.Geometry) *ReignUpsertBulk {
	return u.Update(func(s *ReignUpsert) {
		s.SetGeom(v)
	})
}

// UpdateGeom sets the "geom" field to the value that was provided on create.
func (u *ReignUpsertBulk) UpdateGeom() *ReignUpsertBulk {
	return u.Update(func(s *ReignUpsert) {
		s.UpdateGeom()
	})
}

// Exec executes the query.
func (u *ReignUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ReignCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReignCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReignUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
