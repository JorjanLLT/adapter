// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/adapter/defs/xcdef"
	"github.com/auroraride/adapter/defs/xcdef/ent/battery"
	"github.com/auroraride/adapter/defs/xcdef/ent/fault"
)

// FaultCreate is the builder for creating a Fault entity.
type FaultCreate struct {
	config
	mutation *FaultMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSn sets the "sn" field.
func (fc *FaultCreate) SetSn(s string) *FaultCreate {
	fc.mutation.SetSn(s)
	return fc
}

// SetBatteryID sets the "battery_id" field.
func (fc *FaultCreate) SetBatteryID(i int) *FaultCreate {
	fc.mutation.SetBatteryID(i)
	return fc
}

// SetFault sets the "fault" field.
func (fc *FaultCreate) SetFault(x xcdef.Fault) *FaultCreate {
	fc.mutation.SetFault(x)
	return fc
}

// SetBeginAt sets the "begin_at" field.
func (fc *FaultCreate) SetBeginAt(t time.Time) *FaultCreate {
	fc.mutation.SetBeginAt(t)
	return fc
}

// SetNillableBeginAt sets the "begin_at" field if the given value is not nil.
func (fc *FaultCreate) SetNillableBeginAt(t *time.Time) *FaultCreate {
	if t != nil {
		fc.SetBeginAt(*t)
	}
	return fc
}

// SetEndAt sets the "end_at" field.
func (fc *FaultCreate) SetEndAt(t time.Time) *FaultCreate {
	fc.mutation.SetEndAt(t)
	return fc
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (fc *FaultCreate) SetNillableEndAt(t *time.Time) *FaultCreate {
	if t != nil {
		fc.SetEndAt(*t)
	}
	return fc
}

// SetBattery sets the "battery" edge to the Battery entity.
func (fc *FaultCreate) SetBattery(b *Battery) *FaultCreate {
	return fc.SetBatteryID(b.ID)
}

// Mutation returns the FaultMutation object of the builder.
func (fc *FaultCreate) Mutation() *FaultMutation {
	return fc.mutation
}

// Save creates the Fault in the database.
func (fc *FaultCreate) Save(ctx context.Context) (*Fault, error) {
	fc.defaults()
	return withHooks[*Fault, FaultMutation](ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FaultCreate) SaveX(ctx context.Context) *Fault {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FaultCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FaultCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FaultCreate) defaults() {
	if _, ok := fc.mutation.BeginAt(); !ok {
		v := fault.DefaultBeginAt()
		fc.mutation.SetBeginAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FaultCreate) check() error {
	if _, ok := fc.mutation.Sn(); !ok {
		return &ValidationError{Name: "sn", err: errors.New(`ent: missing required field "Fault.sn"`)}
	}
	if _, ok := fc.mutation.BatteryID(); !ok {
		return &ValidationError{Name: "battery_id", err: errors.New(`ent: missing required field "Fault.battery_id"`)}
	}
	if _, ok := fc.mutation.Fault(); !ok {
		return &ValidationError{Name: "fault", err: errors.New(`ent: missing required field "Fault.fault"`)}
	}
	if _, ok := fc.mutation.BeginAt(); !ok {
		return &ValidationError{Name: "begin_at", err: errors.New(`ent: missing required field "Fault.begin_at"`)}
	}
	if _, ok := fc.mutation.BatteryID(); !ok {
		return &ValidationError{Name: "battery", err: errors.New(`ent: missing required edge "Fault.battery"`)}
	}
	return nil
}

func (fc *FaultCreate) sqlSave(ctx context.Context) (*Fault, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FaultCreate) createSpec() (*Fault, *sqlgraph.CreateSpec) {
	var (
		_node = &Fault{config: fc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: fault.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: fault.FieldID,
			},
		}
	)
	_spec.OnConflict = fc.conflict
	if value, ok := fc.mutation.Sn(); ok {
		_spec.SetField(fault.FieldSn, field.TypeString, value)
		_node.Sn = value
	}
	if value, ok := fc.mutation.Fault(); ok {
		_spec.SetField(fault.FieldFault, field.TypeOther, value)
		_node.Fault = value
	}
	if value, ok := fc.mutation.BeginAt(); ok {
		_spec.SetField(fault.FieldBeginAt, field.TypeTime, value)
		_node.BeginAt = value
	}
	if value, ok := fc.mutation.EndAt(); ok {
		_spec.SetField(fault.FieldEndAt, field.TypeTime, value)
		_node.EndAt = value
	}
	if nodes := fc.mutation.BatteryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fault.BatteryTable,
			Columns: []string{fault.BatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: battery.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BatteryID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Fault.Create().
//		SetSn(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FaultUpsert) {
//			SetSn(v+v).
//		}).
//		Exec(ctx)
func (fc *FaultCreate) OnConflict(opts ...sql.ConflictOption) *FaultUpsertOne {
	fc.conflict = opts
	return &FaultUpsertOne{
		create: fc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Fault.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fc *FaultCreate) OnConflictColumns(columns ...string) *FaultUpsertOne {
	fc.conflict = append(fc.conflict, sql.ConflictColumns(columns...))
	return &FaultUpsertOne{
		create: fc,
	}
}

type (
	// FaultUpsertOne is the builder for "upsert"-ing
	//  one Fault node.
	FaultUpsertOne struct {
		create *FaultCreate
	}

	// FaultUpsert is the "OnConflict" setter.
	FaultUpsert struct {
		*sql.UpdateSet
	}
)

// SetSn sets the "sn" field.
func (u *FaultUpsert) SetSn(v string) *FaultUpsert {
	u.Set(fault.FieldSn, v)
	return u
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *FaultUpsert) UpdateSn() *FaultUpsert {
	u.SetExcluded(fault.FieldSn)
	return u
}

// SetBatteryID sets the "battery_id" field.
func (u *FaultUpsert) SetBatteryID(v int) *FaultUpsert {
	u.Set(fault.FieldBatteryID, v)
	return u
}

// UpdateBatteryID sets the "battery_id" field to the value that was provided on create.
func (u *FaultUpsert) UpdateBatteryID() *FaultUpsert {
	u.SetExcluded(fault.FieldBatteryID)
	return u
}

// SetFault sets the "fault" field.
func (u *FaultUpsert) SetFault(v xcdef.Fault) *FaultUpsert {
	u.Set(fault.FieldFault, v)
	return u
}

// UpdateFault sets the "fault" field to the value that was provided on create.
func (u *FaultUpsert) UpdateFault() *FaultUpsert {
	u.SetExcluded(fault.FieldFault)
	return u
}

// SetEndAt sets the "end_at" field.
func (u *FaultUpsert) SetEndAt(v time.Time) *FaultUpsert {
	u.Set(fault.FieldEndAt, v)
	return u
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *FaultUpsert) UpdateEndAt() *FaultUpsert {
	u.SetExcluded(fault.FieldEndAt)
	return u
}

// ClearEndAt clears the value of the "end_at" field.
func (u *FaultUpsert) ClearEndAt() *FaultUpsert {
	u.SetNull(fault.FieldEndAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Fault.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FaultUpsertOne) UpdateNewValues() *FaultUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.BeginAt(); exists {
			s.SetIgnore(fault.FieldBeginAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Fault.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FaultUpsertOne) Ignore() *FaultUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FaultUpsertOne) DoNothing() *FaultUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FaultCreate.OnConflict
// documentation for more info.
func (u *FaultUpsertOne) Update(set func(*FaultUpsert)) *FaultUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FaultUpsert{UpdateSet: update})
	}))
	return u
}

// SetSn sets the "sn" field.
func (u *FaultUpsertOne) SetSn(v string) *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.SetSn(v)
	})
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *FaultUpsertOne) UpdateSn() *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.UpdateSn()
	})
}

// SetBatteryID sets the "battery_id" field.
func (u *FaultUpsertOne) SetBatteryID(v int) *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.SetBatteryID(v)
	})
}

// UpdateBatteryID sets the "battery_id" field to the value that was provided on create.
func (u *FaultUpsertOne) UpdateBatteryID() *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.UpdateBatteryID()
	})
}

// SetFault sets the "fault" field.
func (u *FaultUpsertOne) SetFault(v xcdef.Fault) *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.SetFault(v)
	})
}

// UpdateFault sets the "fault" field to the value that was provided on create.
func (u *FaultUpsertOne) UpdateFault() *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.UpdateFault()
	})
}

// SetEndAt sets the "end_at" field.
func (u *FaultUpsertOne) SetEndAt(v time.Time) *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.SetEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *FaultUpsertOne) UpdateEndAt() *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *FaultUpsertOne) ClearEndAt() *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.ClearEndAt()
	})
}

// Exec executes the query.
func (u *FaultUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FaultCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FaultUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FaultUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FaultUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FaultCreateBulk is the builder for creating many Fault entities in bulk.
type FaultCreateBulk struct {
	config
	builders []*FaultCreate
	conflict []sql.ConflictOption
}

// Save creates the Fault entities in the database.
func (fcb *FaultCreateBulk) Save(ctx context.Context) ([]*Fault, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Fault, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FaultMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FaultCreateBulk) SaveX(ctx context.Context) []*Fault {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FaultCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FaultCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Fault.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FaultUpsert) {
//			SetSn(v+v).
//		}).
//		Exec(ctx)
func (fcb *FaultCreateBulk) OnConflict(opts ...sql.ConflictOption) *FaultUpsertBulk {
	fcb.conflict = opts
	return &FaultUpsertBulk{
		create: fcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Fault.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fcb *FaultCreateBulk) OnConflictColumns(columns ...string) *FaultUpsertBulk {
	fcb.conflict = append(fcb.conflict, sql.ConflictColumns(columns...))
	return &FaultUpsertBulk{
		create: fcb,
	}
}

// FaultUpsertBulk is the builder for "upsert"-ing
// a bulk of Fault nodes.
type FaultUpsertBulk struct {
	create *FaultCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Fault.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FaultUpsertBulk) UpdateNewValues() *FaultUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.BeginAt(); exists {
				s.SetIgnore(fault.FieldBeginAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Fault.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FaultUpsertBulk) Ignore() *FaultUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FaultUpsertBulk) DoNothing() *FaultUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FaultCreateBulk.OnConflict
// documentation for more info.
func (u *FaultUpsertBulk) Update(set func(*FaultUpsert)) *FaultUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FaultUpsert{UpdateSet: update})
	}))
	return u
}

// SetSn sets the "sn" field.
func (u *FaultUpsertBulk) SetSn(v string) *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.SetSn(v)
	})
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *FaultUpsertBulk) UpdateSn() *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.UpdateSn()
	})
}

// SetBatteryID sets the "battery_id" field.
func (u *FaultUpsertBulk) SetBatteryID(v int) *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.SetBatteryID(v)
	})
}

// UpdateBatteryID sets the "battery_id" field to the value that was provided on create.
func (u *FaultUpsertBulk) UpdateBatteryID() *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.UpdateBatteryID()
	})
}

// SetFault sets the "fault" field.
func (u *FaultUpsertBulk) SetFault(v xcdef.Fault) *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.SetFault(v)
	})
}

// UpdateFault sets the "fault" field to the value that was provided on create.
func (u *FaultUpsertBulk) UpdateFault() *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.UpdateFault()
	})
}

// SetEndAt sets the "end_at" field.
func (u *FaultUpsertBulk) SetEndAt(v time.Time) *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.SetEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *FaultUpsertBulk) UpdateEndAt() *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *FaultUpsertBulk) ClearEndAt() *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.ClearEndAt()
	})
}

// Exec executes the query.
func (u *FaultUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FaultCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FaultCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FaultUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
