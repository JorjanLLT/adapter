// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: business.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Business_Exchange_FullMethodName = "/pb.Business/Exchange"
)

// BusinessClient is the client API for Business service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BusinessClient interface {
	// 电柜换电
	Exchange(ctx context.Context, in *BusinessExchangeRequest, opts ...grpc.CallOption) (Business_ExchangeClient, error)
}

type businessClient struct {
	cc grpc.ClientConnInterface
}

func NewBusinessClient(cc grpc.ClientConnInterface) BusinessClient {
	return &businessClient{cc}
}

func (c *businessClient) Exchange(ctx context.Context, in *BusinessExchangeRequest, opts ...grpc.CallOption) (Business_ExchangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Business_ServiceDesc.Streams[0], Business_Exchange_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &businessExchangeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Business_ExchangeClient interface {
	Recv() (*BusinessExchangeResponse, error)
	grpc.ClientStream
}

type businessExchangeClient struct {
	grpc.ClientStream
}

func (x *businessExchangeClient) Recv() (*BusinessExchangeResponse, error) {
	m := new(BusinessExchangeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BusinessServer is the server API for Business service.
// All implementations must embed UnimplementedBusinessServer
// for forward compatibility
type BusinessServer interface {
	// 电柜换电
	Exchange(*BusinessExchangeRequest, Business_ExchangeServer) error
	mustEmbedUnimplementedBusinessServer()
}

// UnimplementedBusinessServer must be embedded to have forward compatible implementations.
type UnimplementedBusinessServer struct {
}

func (UnimplementedBusinessServer) Exchange(*BusinessExchangeRequest, Business_ExchangeServer) error {
	return status.Errorf(codes.Unimplemented, "method Exchange not implemented")
}
func (UnimplementedBusinessServer) mustEmbedUnimplementedBusinessServer() {}

// UnsafeBusinessServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BusinessServer will
// result in compilation errors.
type UnsafeBusinessServer interface {
	mustEmbedUnimplementedBusinessServer()
}

func RegisterBusinessServer(s grpc.ServiceRegistrar, srv BusinessServer) {
	s.RegisterService(&Business_ServiceDesc, srv)
}

func _Business_Exchange_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BusinessExchangeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BusinessServer).Exchange(m, &businessExchangeServer{stream})
}

type Business_ExchangeServer interface {
	Send(*BusinessExchangeResponse) error
	grpc.ServerStream
}

type businessExchangeServer struct {
	grpc.ServerStream
}

func (x *businessExchangeServer) Send(m *BusinessExchangeResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Business_ServiceDesc is the grpc.ServiceDesc for Business service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Business_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Business",
	HandlerType: (*BusinessServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Exchange",
			Handler:       _Business_Exchange_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "business.proto",
}
