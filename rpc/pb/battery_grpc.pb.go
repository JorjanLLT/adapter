// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: battery.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Battery_Batch_FullMethodName         = "/pb.Battery/Batch"
	Battery_Sample_FullMethodName        = "/pb.Battery/Sample"
	Battery_FaultList_FullMethodName     = "/pb.Battery/FaultList"
	Battery_FaultOverview_FullMethodName = "/pb.Battery/FaultOverview"
	Battery_Statistics_FullMethodName    = "/pb.Battery/Statistics"
	Battery_Position_FullMethodName      = "/pb.Battery/Position"
)

// BatteryClient is the client API for Battery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BatteryClient interface {
	Batch(ctx context.Context, in *BatteryBatchRequest, opts ...grpc.CallOption) (*BatteryBatchResponse, error)
	Sample(ctx context.Context, in *BatterySnRequest, opts ...grpc.CallOption) (*BatterySampleResponse, error)
	FaultList(ctx context.Context, in *BatteryFaultListRequest, opts ...grpc.CallOption) (*BatteryFaultListResponse, error)
	FaultOverview(ctx context.Context, in *BatterySnRequest, opts ...grpc.CallOption) (*BatteryFaultOverviewResponse, error)
	Statistics(ctx context.Context, in *BatterySnRequest, opts ...grpc.CallOption) (*BatteryStatisticsResponse, error)
	Position(ctx context.Context, in *BatteryPositionRequest, opts ...grpc.CallOption) (*BatteryPositionResponse, error)
}

type batteryClient struct {
	cc grpc.ClientConnInterface
}

func NewBatteryClient(cc grpc.ClientConnInterface) BatteryClient {
	return &batteryClient{cc}
}

func (c *batteryClient) Batch(ctx context.Context, in *BatteryBatchRequest, opts ...grpc.CallOption) (*BatteryBatchResponse, error) {
	out := new(BatteryBatchResponse)
	err := c.cc.Invoke(ctx, Battery_Batch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batteryClient) Sample(ctx context.Context, in *BatterySnRequest, opts ...grpc.CallOption) (*BatterySampleResponse, error) {
	out := new(BatterySampleResponse)
	err := c.cc.Invoke(ctx, Battery_Sample_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batteryClient) FaultList(ctx context.Context, in *BatteryFaultListRequest, opts ...grpc.CallOption) (*BatteryFaultListResponse, error) {
	out := new(BatteryFaultListResponse)
	err := c.cc.Invoke(ctx, Battery_FaultList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batteryClient) FaultOverview(ctx context.Context, in *BatterySnRequest, opts ...grpc.CallOption) (*BatteryFaultOverviewResponse, error) {
	out := new(BatteryFaultOverviewResponse)
	err := c.cc.Invoke(ctx, Battery_FaultOverview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batteryClient) Statistics(ctx context.Context, in *BatterySnRequest, opts ...grpc.CallOption) (*BatteryStatisticsResponse, error) {
	out := new(BatteryStatisticsResponse)
	err := c.cc.Invoke(ctx, Battery_Statistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batteryClient) Position(ctx context.Context, in *BatteryPositionRequest, opts ...grpc.CallOption) (*BatteryPositionResponse, error) {
	out := new(BatteryPositionResponse)
	err := c.cc.Invoke(ctx, Battery_Position_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BatteryServer is the server API for Battery service.
// All implementations must embed UnimplementedBatteryServer
// for forward compatibility
type BatteryServer interface {
	Batch(context.Context, *BatteryBatchRequest) (*BatteryBatchResponse, error)
	Sample(context.Context, *BatterySnRequest) (*BatterySampleResponse, error)
	FaultList(context.Context, *BatteryFaultListRequest) (*BatteryFaultListResponse, error)
	FaultOverview(context.Context, *BatterySnRequest) (*BatteryFaultOverviewResponse, error)
	Statistics(context.Context, *BatterySnRequest) (*BatteryStatisticsResponse, error)
	Position(context.Context, *BatteryPositionRequest) (*BatteryPositionResponse, error)
	mustEmbedUnimplementedBatteryServer()
}

// UnimplementedBatteryServer must be embedded to have forward compatible implementations.
type UnimplementedBatteryServer struct {
}

func (UnimplementedBatteryServer) Batch(context.Context, *BatteryBatchRequest) (*BatteryBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Batch not implemented")
}
func (UnimplementedBatteryServer) Sample(context.Context, *BatterySnRequest) (*BatterySampleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sample not implemented")
}
func (UnimplementedBatteryServer) FaultList(context.Context, *BatteryFaultListRequest) (*BatteryFaultListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FaultList not implemented")
}
func (UnimplementedBatteryServer) FaultOverview(context.Context, *BatterySnRequest) (*BatteryFaultOverviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FaultOverview not implemented")
}
func (UnimplementedBatteryServer) Statistics(context.Context, *BatterySnRequest) (*BatteryStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Statistics not implemented")
}
func (UnimplementedBatteryServer) Position(context.Context, *BatteryPositionRequest) (*BatteryPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Position not implemented")
}
func (UnimplementedBatteryServer) mustEmbedUnimplementedBatteryServer() {}

// UnsafeBatteryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BatteryServer will
// result in compilation errors.
type UnsafeBatteryServer interface {
	mustEmbedUnimplementedBatteryServer()
}

func RegisterBatteryServer(s grpc.ServiceRegistrar, srv BatteryServer) {
	s.RegisterService(&Battery_ServiceDesc, srv)
}

func _Battery_Batch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatteryBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatteryServer).Batch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Battery_Batch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatteryServer).Batch(ctx, req.(*BatteryBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Battery_Sample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatterySnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatteryServer).Sample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Battery_Sample_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatteryServer).Sample(ctx, req.(*BatterySnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Battery_FaultList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatteryFaultListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatteryServer).FaultList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Battery_FaultList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatteryServer).FaultList(ctx, req.(*BatteryFaultListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Battery_FaultOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatterySnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatteryServer).FaultOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Battery_FaultOverview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatteryServer).FaultOverview(ctx, req.(*BatterySnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Battery_Statistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatterySnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatteryServer).Statistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Battery_Statistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatteryServer).Statistics(ctx, req.(*BatterySnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Battery_Position_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatteryPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatteryServer).Position(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Battery_Position_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatteryServer).Position(ctx, req.(*BatteryPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Battery_ServiceDesc is the grpc.ServiceDesc for Battery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Battery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Battery",
	HandlerType: (*BatteryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Batch",
			Handler:    _Battery_Batch_Handler,
		},
		{
			MethodName: "Sample",
			Handler:    _Battery_Sample_Handler,
		},
		{
			MethodName: "FaultList",
			Handler:    _Battery_FaultList_Handler,
		},
		{
			MethodName: "FaultOverview",
			Handler:    _Battery_FaultOverview_Handler,
		},
		{
			MethodName: "Statistics",
			Handler:    _Battery_Statistics_Handler,
		},
		{
			MethodName: "Position",
			Handler:    _Battery_Position_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "battery.proto",
}
